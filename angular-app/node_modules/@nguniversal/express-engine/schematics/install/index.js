var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/express-engine/schematics/install/index", ["require", "exports", "@angular-devkit/core", "@angular-devkit/schematics", "@angular-devkit/schematics/tasks", "@schematics/angular/utility/config"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var core_1 = require("@angular-devkit/core");
    var schematics_1 = require("@angular-devkit/schematics");
    var tasks_1 = require("@angular-devkit/schematics/tasks");
    var config_1 = require("@schematics/angular/utility/config");
    function getClientProject(host, options) {
        var workspace = config_1.getWorkspace(host);
        var clientProject = workspace.projects[options.clientProject];
        if (!clientProject) {
            throw new schematics_1.SchematicsException("Client app " + options.clientProject + " not found.");
        }
        return clientProject;
    }
    function addDependenciesAndScripts(options) {
        return function (host) {
            var pkgPath = '/package.json';
            var buffer = host.read(pkgPath);
            if (buffer === null) {
                throw new schematics_1.SchematicsException('Could not find package.json');
            }
            var pkg = JSON.parse(buffer.toString());
            pkg.dependencies['@nguniversal/express-engine'] = 'v6.1.0';
            pkg.dependencies['@nguniversal/module-map-ngfactory-loader'] = 'v6.1.0';
            pkg.dependencies['express'] = '^4.15.2';
            pkg.scripts['serve:ssr'] = 'node dist/server';
            pkg.scripts['build:ssr'] = 'npm run build:client-and-server-bundles && npm run compile:server';
            pkg.scripts['build:client-and-server-bundles'] =
                "ng build --prod && ng run " + options.clientProject + ":server:production";
            pkg.scripts['compile:server'] =
                "tsc -p " + options.serverFileName.replace(/\.ts$/, '') + ".tsconfig.json";
            host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
            return host;
        };
    }
    function updateConfigFile(options) {
        return function (host) {
            var workspace = config_1.getWorkspace(host);
            if (!workspace.projects[options.clientProject]) {
                throw new schematics_1.SchematicsException("Client app " + options.clientProject + " not found.");
            }
            var clientProject = workspace.projects[options.clientProject];
            if (!clientProject.architect) {
                throw new Error('Client project architect not found.');
            }
            var serverConfig = {
                production: {
                    fileReplacements: [
                        {
                            replace: 'src/environments/environment.ts',
                            with: 'src/environments/environment.prod.ts'
                        }
                    ]
                }
            };
            clientProject.architect.server.configurations = serverConfig;
            var workspacePath = config_1.getWorkspacePath(host);
            host.overwrite(workspacePath, JSON.stringify(workspace, null, 2));
            return host;
        };
    }
    function default_1(options) {
        return function (host, context) {
            var clientProject = getClientProject(host, options);
            if (clientProject.projectType !== 'application') {
                throw new schematics_1.SchematicsException("Universal requires a project type of \"application\".");
            }
            if (!options.skipInstall) {
                context.addTask(new tasks_1.NodePackageInstallTask());
            }
            var rootSource = schematics_1.apply(schematics_1.url('./files/root'), [
                options.skipServer ? schematics_1.filter(function (path) { return !path.startsWith('__serverFileName'); }) : schematics_1.noop(),
                schematics_1.template(__assign({}, core_1.strings, options, { stripTsExtension: function (s) { return s.replace(/\.ts$/, ''); } }))
            ]);
            return schematics_1.chain([
                schematics_1.externalSchematic('@schematics/angular', 'universal', options),
                updateConfigFile(options),
                schematics_1.mergeWith(rootSource),
                addDependenciesAndScripts(options),
            ]);
        };
    }
    exports.default = default_1;
});
//# sourceMappingURL=data:application/json;base64,