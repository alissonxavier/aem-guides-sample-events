{"version":3,"sources":["webpack://cqSpaPageModelManager/webpack/universalModuleDefinition","webpack://cqSpaPageModelManager/webpack/bootstrap","webpack://cqSpaPageModelManager/./index.js","webpack://cqSpaPageModelManager/./src/Constants.js","webpack://cqSpaPageModelManager/./src/EditorClient.js","webpack://cqSpaPageModelManager/./src/EventType.js","webpack://cqSpaPageModelManager/./src/InternalConstants.js","webpack://cqSpaPageModelManager/./src/MetaProperty.js","webpack://cqSpaPageModelManager/./src/ModelClient.js","webpack://cqSpaPageModelManager/./src/ModelManager.js","webpack://cqSpaPageModelManager/./src/ModelRouter.js","webpack://cqSpaPageModelManager/./src/ModelStore.js","webpack://cqSpaPageModelManager/./src/PathUtils.js","webpack://cqSpaPageModelManager/external \"clone\""],"names":["default","require","Constants","TYPE_PROP","ITEMS_PROP","ITEMS_ORDER_PROP","PATH_PROP","CHILDREN_PROP","HIERARCHY_TYPE_PROP","JCR_CONTENT","triggerPageModelLoaded","model","PathUtils","dispatchGlobalCustomEvent","EventType","PAGE_MODEL_LOADED","detail","EditorClient","ModelManager","_modelManager","_windowListener","event","msg","console","error","_updateModel","isBrowser","window","addEventListener","PAGE_MODEL_UPDATE","cmd","path","data","siblingName","itemPath","insertBefore","modelStore","setData","_notifyListeners","removeData","getParentNodePath","getNodeName","key","_modelStore","insertData","value","log","_data","removeEventListener","PAGE_MODEL_INIT","PAGE_MODEL_ROUTE_CHANGED","DEFAULT_SLING_MODEL_SELECTOR","InternalConstants","DEFAULT_MODEL_JSON_EXTENSION","MetaProperty","PAGE_MODEL_ROOT_URL","PAGE_MODEL_ROUTE_FILTERS","PAGE_MODEL_ROUTER","ModelClient","apiHost","_apiHost","_fetchPromises","modelPath","err","Promise","reject","Error","url","fetch","credentials","then","response","status","json","catch","hasChildOfPath","childPath","sanitize","isPageURLRoot","pagePath","modelRootPath","adaptPagePath","localPath","internalize","rootPath","localRootModelPath","modelClient","resolve","addSelector","addExtension","externalize","makeAbsolute","config","destroy","initialModel","_modelClient","_listenersMap","_initPromise","metaPropertyModelUrl","getMetaPropertyValue","currentPathname","getCurrentPathname","rootModelURL","_editorClient","ModelStore","_checkDependencies","rootModelPath","getData","_fetchData","rootModel","initialize","hasOwnProperty","promise","_toModelPath","obj","isItem","forceReload","initPromise","item","_storeData","call","listenersForPath","length","forEach","listener","e","callback","adaptedPath","push","index","indexOf","splice","getModelPath","getRouteFilters","isRouteExcluded","isModelRouterEnabled","dispatchRouteChanged","routeModel","ROUTER_MODES","DISABLED","CONTENT_PATH","localUrl","location","pathname","endPosition","substr","routeFilters","split","route","i","RegExp","test","modelRouterMetaType","ModelManagerSerice","pushState","history","replaceState","state","title","apply","arguments","_pageContentDelimiter","_rootPath","parent","undefined","parentPath","answer","items","pathKey","childItem","subPath","subpath","pageDelimiter","_getStartStrings","childParentPath","join","trimStrings","_findItemData","newData","itemKey","localData","immutable","dataPaths","splitPageContentPaths","pageData","_getPageData","result","warn","itemName","CONTEXT_PATH_REGEXP","JCR_CONTENT_PATTERN","matches","exec","lastIndex","contextPath","getContextPath","startsWith","endsWith","replace","propertyName","meta","document","head","querySelector","content","convertToModelUrl","metaModelUrl","getCurrentPageModelUrl","selectorIndex","extension","extensionPath","match","queue","selector","slice","eventName","options","dispatchEvent","CustomEvent","paths","normalize","filter","splashIndex","lastIndexOf","substring","targetPath","targetPathChildren","makeRelative","rootPathChildren","delimitators","delimitator","newPaths","delim","concat","lastPath","dataPath","splitPaths","strings","str","returnStr"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;iDC/DSA,O;;;;;;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;8CACSA,O;;;;;;AAtBT;;;;;;;;;;;;;;;;;AAiBA,mBAAAC,CAAQ,+CAAR,E;;;;;;;;;;;;;;;;;ACjBA;;;;;;;;;;;;;;;;;AAiBA;;;;;AAKA,IAAMC,YAAY;;AAEd;;;;;AAKAC,aAAW,OAPG;;AASd;;;;;AAKAC,cAAY,QAdE;;AAgBd;;;;;AAKAC,oBAAkB,aArBJ;;AAuBd;;;;;AAKAC,aAAW,OA5BG;;AA8Bd;;;;;AAKAC,iBAAe,WAnCD;;AAqCd;;;AAGAC,uBAAqB,gBAxCP;;AA0Cd;;;AAGAC,eAAa;AA7CC,CAAlB;;kBAgDeP,S;;;;;;;;;;;;;;;;;;;qjBCtEf;;;;;;;;;;;;;;;;;;QA0BgBQ,sB,GAAAA,sB;;AAVhB;;AACA;;;;AACA;;;;;;;;AAEA;;;;;;AAMO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C;AACAC,yBAAUC,yBAAV,CAAoCC,oBAAUC,iBAA9C,EAAiE;AAC7DC,gBAAQ;AACJL,mBAAO,qBAAMA,KAAN;AADH;AADqD,KAAjE;AAKH;;AAED;;;;IAGaM,Y,WAAAA,Y;AAET,0BAAYC,YAAZ,EAA0B;AAAA;;AAAA;;AACtB,aAAKC,aAAL,GAAqBD,YAArB;;AAEA,aAAKE,eAAL,GAAuB,UAACC,KAAD,EAAW;AAC9B,gBAAI,CAACA,KAAD,IAAU,CAACA,MAAML,MAAjB,IAA2B,CAACK,MAAML,MAAN,CAAaM,GAA7C,EAAkD;AAC9CC,wBAAQC,KAAR,CAAc,kBAAd,EAAkC,0CAAlC,EAA8EH,KAA9E;AACA;AACH;;AAED,kBAAKI,YAAL,CAAkBJ,MAAML,MAAN,CAAaM,GAA/B;AACH,SAPD;;AASA,YAAIV,qBAAUc,SAAV,EAAJ,EAA2B;AACvBC,mBAAOC,gBAAP,CAAwBd,oBAAUe,iBAAlC,EAAqD,KAAKT,eAA1D;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;;qCAaaE,G,EAAK;AACd,gBAAI,CAACA,GAAD,IAAQ,CAACA,IAAIQ,GAAb,IAAoB,CAACR,IAAIS,IAA7B,EAAmC;AAC/BR,wBAAQC,KAAR,CAAc,qBAAd,EAAqC,mDAArC;AACA;AACH;AACD;AACA,gBAAIO,OAAOT,IAAIS,IAAf;AACA;AACA,gBAAID,MAAMR,IAAIQ,GAAd;AACA;AACA,gBAAIE,OAAO,qBAAMV,IAAIU,IAAV,CAAX;;AAEA,gBAAIC,oBAAJ;AACA,gBAAIC,iBAAJ;AACA,gBAAIC,qBAAJ;;AAEA,oBAAOL,GAAP;AACI,qBAAK,SAAL;AACI,yBAAKX,aAAL,CAAmBiB,UAAnB,CAA8BC,OAA9B,CAAsCN,IAAtC,EAA4CC,IAA5C;AACA,yBAAKb,aAAL,CAAmBmB,gBAAnB,CAAoCP,IAApC;AACA;;AAEJ,qBAAK,QAAL;AACI,yBAAKZ,aAAL,CAAmBiB,UAAnB,CAA8BG,UAA9B,CAAyCR,IAAzC;AACA,yBAAKZ,aAAL,CAAmBmB,gBAAnB,CAAoC1B,qBAAU4B,iBAAV,CAA4BT,IAA5B,CAApC;AACA;;AAEJ,qBAAK,cAAL;AACII,mCAAe,IAAf;AACA;AACA;AACJ,qBAAK,aAAL;AACI;AACA;AACAF,kCAAcrB,qBAAU6B,WAAV,CAAsBV,IAAtB,CAAd;AACAG,+BAAWtB,qBAAU4B,iBAAV,CAA4BT,IAA5B,IAAoC,GAApC,GAA0CC,KAAKU,GAA1D;AACA,yBAAKvB,aAAL,CAAmBwB,WAAnB,CAA+BC,UAA/B,CAA0CV,QAA1C,EAAoDF,KAAKa,KAAzD,EAAgEZ,WAAhE,EAA6EE,YAA7E;AACA,yBAAKhB,aAAL,CAAmBmB,gBAAnB,CAAoC1B,qBAAU4B,iBAAV,CAA4BT,IAA5B,CAApC;;AAEA;;AAEJ;AACI;AACA;AACA;AACAR,4BAAQuB,GAAR,CAAY,cAAZ,EAA4B,sBAA5B,EAAoDhB,GAApD;AA7BR;;AAgCApB,mCAAuB,KAAKS,aAAL,CAAmBiB,UAAnB,CAA8BW,KAArD;AACH;;AAED;;;;;;kCAGU;AACN,iBAAK5B,aAAL,GAAqB,IAArB;AACA,mBAAO,KAAKA,aAAZ;;AAEA,gBAAIP,qBAAUc,SAAV,EAAJ,EAA2B;AACvBC,uBAAOqB,mBAAP,CAA2BlC,oBAAUe,iBAArC,EAAwD,KAAKT,eAA7D;AACH;AACJ;;;;;;;;;;;;;;;;;;;;;ACnIL;;;;;;;;;;;;;;;;;AAiBA;;;;;AAKA,IAAMN,YAAY;;AAEd;;;AAGAmC,mBAAiB,mBALH;;AAOd;;;AAGAlC,qBAAmB,qBAVL;;AAYd;;;AAGAc,qBAAmB,qBAfL;;AAiBd;;;AAGAqB,4BAA0B;AApBZ,CAAlB;;kBAuBepC,S;;;;;;;;;;;;;;;;;AC7Cf;;;;;;;;;;;;;;;;;AAiBA,IAAMqC,+BAA+B,OAArC;;AAEA,IAAMC,oBAAoB;;AAEtBD,gCAA8BA,4BAFR;;AAItBE,gCAA8B,MAAMF,4BAAN,GAAqC;AAJ7C,CAA1B;;kBAOeC,iB;;;;;;;;;;;;;;;;;AC1Bf;;;;;;;;;;;;;;;;;AAiBA;;;;;AAKA,IAAME,eAAe;;AAEjBC,uBAAqB,uBAFJ;;AAIjBC,4BAA0B,4BAJT;;AAMjBC,qBAAmB;;AANF,CAArB;;kBAUeH,Y;;;;;;;;;;;;;;;;;;;;;;AChCf;;;;;;;;;;;;;;;;;IAiBaI,W,WAAAA,W;;AAET;;;;AAIA,yBAAYC,OAAZ,EAAqB;AAAA;;AACjB,aAAKC,QAAL,GAAgBD,WAAW,EAA3B;AACA,aAAKE,cAAL,GAAsB,EAAtB;AACH;;AAED;;;;;;;;;;;;;;;;;;;;oBAMMC,S,EAAW;AACb,gBAAI,CAACA,SAAL,EAAgB;AACZ,oBAAIC,MAAM,uCAAuCD,SAAjD;AACA,uBAAOE,QAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAUH,GAAV,CAAf,CAAP;AACH;;AAED;AACA,gBAAII,WAAS,KAAKP,QAAd,GAAyBE,SAA7B;;AAEA;AACA;AACA,mBAAOM,MAAMD,GAAN,EAAW,EAACE,aAAa,aAAd,EAAX,EAAyCC,IAAzC,CAA8C,UAASC,QAAT,EAAmB;AACpE,oBAAIA,SAASC,MAAT,IAAmB,GAAnB,IAA0BD,SAASC,MAAT,GAAkB,GAAhD,EAAqD;AACjD,2BAAOD,SAASE,IAAT,EAAP;AACH;;AAED,sBAAM,EAAEF,UAAUA,QAAZ,EAAN;AACH,aANM,EAMJG,KANI,CAME,UAAClD,KAAD,EAAW;AAChB,uBAAOwC,QAAQC,MAAR,CAAezC,KAAf,CAAP;AACH,aARM,CAAP;AASH,S;;AAED;;;;;;kCAGU;AACN,iBAAKoC,QAAL,GAAgB,IAAhB;AACA,iBAAKC,cAAL,GAAsB,IAAtB;AACH;;;;;;;;;;;;;;;;;;;;;;qjBC9DL;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEA;;;;;;;;;AASA,SAASc,cAAT,CAAwBhE,KAAxB,EAA+BiE,SAA/B,EAA0C;AACtC,WAAO,CAAC,EAAEjE,SAASiE,SAAT,IAAsBjE,MAAMT,oBAAUK,aAAhB,CAAtB,IAAwDI,MAAMT,oBAAUK,aAAhB,EAA+BK,qBAAUiE,QAAV,CAAmBD,SAAnB,CAA/B,CAA1D,CAAR;AACH;;AAED;;;;;;;;;AASA,SAASE,aAAT,CAAuBC,QAAvB,EAAiCC,aAAjC,EAAgD;AAC5C,WAAO,CAACD,QAAD,IAAa,CAACC,aAAd,IAA+BpE,qBAAUiE,QAAV,CAAmBE,QAAnB,MAAiCnE,qBAAUiE,QAAV,CAAmBG,aAAnB,CAAvE;AACH;;AAED;;;;;;;;;;AAUA,SAASC,aAAT,CAAuBlD,IAAvB,EAA6B;AACzB,QAAI,CAACA,IAAL,EAAW;AACP,eAAO,EAAP;AACH;;AAED,QAAMmD,YAAYtE,qBAAUuE,WAAV,CAAsBpD,IAAtB,CAAlB;;AAEA,QAAI,CAAC,KAAKK,UAAN,IAAoB,CAAC,KAAKA,UAAL,CAAgBgD,QAAzC,EAAmD;AAC/C,eAAOF,SAAP;AACH;;AAED,QAAMG,qBAAqBzE,qBAAUiE,QAAV,CAAmB,KAAKzC,UAAL,CAAgBgD,QAAnC,CAA3B;;AAEA,WAAOF,cAAcG,kBAAd,GAAmC,EAAnC,GAAwCH,SAA/C;AACH;;AAED;;;;IAGMhE,Y;;;;;;;;;AA2BF;;;;;;6CAMqB;AACjB,gBAAI,CAAC,KAAKoE,WAAV,EAAuB;AACnB,uBAAOtB,QAAQC,MAAR,CAAe,2BAAf,CAAP;AACH;;AAED,gBAAI,CAAC,KAAK7B,UAAV,EAAsB;AAClB,uBAAO4B,QAAQC,MAAR,CAAe,4BAAf,CAAP;AACH;;AAED,mBAAOD,QAAQuB,OAAR,EAAP;AACH;;AAED;;;;;;;;;;qCAOaxD,I,EAAM;AACf,gBAAIoC,MAAMvD,qBAAU4E,WAAV,CAAsBzD,IAAtB,EAA4B,OAA5B,CAAV;AACAoC,kBAAMvD,qBAAU6E,YAAV,CAAuBtB,GAAvB,EAA4B,MAA5B,CAAN;AACAA,kBAAMvD,qBAAU8E,WAAV,CAAsBvB,GAAtB,CAAN;;AAEA,mBAAOvD,qBAAU+E,YAAV,CAAuBxB,GAAvB,CAAP;AACH;;AAED;;;;;;;;;;;;;;;;mCAaWyB,M,EAAQ;AAAA;;AACf,iBAAKC,OAAL;AACA,gBAAI9D,aAAJ;AACA,gBAAI+D,qBAAJ;;AAEA,gBAAI,CAACF,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAjC,EAA2C;AACvC7D,uBAAO6D,MAAP;AACH,aAFD,MAEO,IAAIA,MAAJ,EAAY;AACf7D,uBAAO6D,OAAO7D,IAAd;AACA,qBAAKgE,YAAL,GAAoBH,OAAON,WAA3B;AACAQ,+BAAeF,OAAOjF,KAAtB;AACH;;AAED,iBAAKqF,aAAL,GAAqB,EAArB;AACA,iBAAKnC,cAAL,GAAsB,EAAtB;AACA,iBAAKoC,YAAL,GAAoB,IAApB;;AAEA,gBAAMC,uBAAuBtF,qBAAUuE,WAAV,CAAsBvE,qBAAUuF,oBAAV,CAA+B7C,uBAAaC,mBAA5C,CAAtB,CAA7B;AACA,gBAAM6C,kBAAkBxF,qBAAUiE,QAAV,CAAmBjE,qBAAUyF,kBAAV,EAAnB,CAAxB;AACA;AACA;AACA;AACA;AACA,gBAAMC,eAAevE,QAAQmE,oBAAR,IAAgCE,eAArD;;AAEA,gBAAI,CAACE,YAAL,EAAmB;AACf/E,wBAAQC,KAAR,CAAc,iBAAd,EAAiC,0DAAjC;AACH;;AAED,gBAAI,CAAC,KAAKuE,YAAV,EAAwB;AACpB,qBAAKA,YAAL,GAAoB,IAAIrC,wBAAJ,EAApB;AACH;;AAED,iBAAK6C,aAAL,GAAqB,IAAItF,0BAAJ,CAAiB,IAAjB,CAArB;AACA,iBAAK0B,WAAL,GAAmB,IAAI6D,sBAAJ,CAAeF,YAAf,EAA6BR,YAA7B,CAAnB;;AAEA,iBAAKG,YAAL,GAAoB,KAAKQ,kBAAL,GAA0BnC,IAA1B,CAA+B,YAAM;AACrD,oBAAMoC,gBAAgB9F,qBAAUiE,QAAV,CAAmByB,YAAnB,CAAtB;AACA,oBAAItE,OAAO,MAAKI,UAAL,CAAgBuE,OAAhB,CAAwBD,aAAxB,CAAX;;AAEA,oBAAI1E,IAAJ,EAAU;AACN,8DAAuBA,IAAvB;AACA,2BAAOA,IAAP;AACH,iBAHD,MAGO;AACH,2BAAO,MAAK4E,UAAL,CAAgBN,YAAhB,EAA8BhC,IAA9B,CAAmC,UAACuC,SAAD,EAAe;AACrD,8BAAKzE,UAAL,CAAgB0E,UAAhB,CAA2BJ,aAA3B,EAA0CG,SAA1C;AACA;AACA;AACA,4BAAI,CAAC/B,cAAcsB,eAAd,EAA+BF,oBAA/B,CAAD,IAAyD,CAACvB,eAAekC,SAAf,EAA0BT,eAA1B,CAA9D,EAA0G;AACtG,mCAAO,MAAKQ,UAAL,CAAgBR,eAAhB,EAAiC9B,IAAjC,CAAsC,UAAC3D,KAAD,EAAW;AACpD,sCAAKyB,UAAL,CAAgBQ,UAAhB,CAA2BhC,qBAAUiE,QAAV,CAAmBuB,eAAnB,CAA3B,EAAgEzF,KAAhE;AACA,oCAAIqB,OAAO,MAAKI,UAAL,CAAgBuE,OAAhB,EAAX;AACA,0EAAuB3E,IAAvB;AACA,uCAAOA,IAAP;AACH,6BALM,CAAP;AAMH,yBAPD,MAOO;AACH,gCAAIA,QAAO,MAAKI,UAAL,CAAgBuE,OAAhB,EAAX;AACA,sEAAuB3E,KAAvB;AACA,mCAAOA,KAAP;AACH;AACJ,qBAhBM,CAAP;AAiBH;AACJ,aA1BmB,CAApB;;AA4BA,mBAAO,KAAKiE,YAAZ;AACH;;AAED;;;;;;;;;;mCAOWlE,I,EAAM;AAAA;;AACb,gBAAI,KAAK8B,cAAL,CAAoBkD,cAApB,CAAmChF,IAAnC,CAAJ,EAA8C;AAC1C,uBAAO,KAAK8B,cAAL,CAAoB9B,IAApB,CAAP;AACH;;AAED,gBAAIiF,UAAU,KAAK1B,WAAL,CAAiBlB,KAAjB,CAAuB,KAAK6C,YAAL,CAAkBlF,IAAlB,CAAvB,CAAd;;AAEA,iBAAK8B,cAAL,CAAoB9B,IAApB,IAA4BiF,OAA5B;;AAEAA,oBAAQ1C,IAAR,CAAa,UAAC4C,GAAD,EAAS;AAClB,uBAAO,OAAKrD,cAAL,CAAoB9B,IAApB,CAAP;AACA,uBAAOmF,GAAP;AACH,aAHD,EAGGxC,KAHH,CAGS,UAAClD,KAAD,EAAW;AAChB,uBAAO,OAAKqC,cAAL,CAAoB9B,IAApB,CAAP;AACA,uBAAOP,KAAP;AACH,aAND;;AAQA,mBAAOwF,OAAP;AACH;;;mCAEUjF,I,EAAMC,I,EAAM;AACnB,gBAAMmF,SAASvG,qBAAUuG,MAAV,CAAiBpF,IAAjB,CAAf;;AAEA,iBAAKK,UAAL,CAAgBQ,UAAhB,CAA2Bb,IAA3B,EAAiCC,IAAjC;;AAEA;AACA;AACA,iBAAKM,gBAAL,CAAsBP,IAAtB;;AAEA,gBAAI,CAACoF,MAAL,EAAa;AACT;AACA,qBAAK7E,gBAAL,CAAsB,EAAtB;AACH;;AAED,mBAAON,IAAP;AACH;;AAED;;;;;;;;;;AASA;;;;;gCAKQ4D,M,EAAQ;AAAA;;AACZ,gBAAI7D,aAAJ;AACA,gBAAIqF,cAAc,KAAlB;;AAEA,gBAAI,OAAOxB,MAAP,KAAkB,QAAtB,EAAgC;AAC5B7D,uBAAO6D,MAAP;AACH,aAFD,MAEO,IAAIA,MAAJ,EAAY;AACf7D,uBAAO6D,OAAO7D,IAAd;AACAqF,8BAAcxB,OAAOwB,WAArB;AACH;;AAED,gBAAIC,cAAc,KAAKpB,YAAL,IAAqBjC,QAAQuB,OAAR,EAAvC;;AAEA,mBAAO8B,YAAY/C,IAAZ,CAAiB;AAAA,uBAAM,OAAKmC,kBAAL,EAAN;AAAA,aAAjB,EACFnC,IADE,CACG,YAAM;AACR,oBAAI,CAAC8C,WAAL,EAAkB;AACd,wBAAIE,OAAO,OAAKlF,UAAL,CAAgBuE,OAAhB,CAAwB5E,IAAxB,CAAX;;AAEA,wBAAIuF,IAAJ,EAAU;AACN,+BAAOtD,QAAQuB,OAAR,CAAgB+B,IAAhB,CAAP;AACH;AACJ;;AAED;AACA;AACA,uBAAO,OAAKV,UAAL,CAAgB7E,IAAhB,EAAsBuC,IAAtB,CAA2B,UAACtC,IAAD;AAAA,2BAAU,OAAKuF,UAAL,CAAgBxF,IAAhB,EAAsBC,IAAtB,CAAV;AAAA,iBAA3B,CAAP;AACH,aAbE,CAAP;AAcH;;AAED;;;;;;;;;yCAMiBD,I,EAAM;AACnBA,mBAAOnB,qBAAUqE,aAAV,CAAwBuC,IAAxB,CAA6B,IAA7B,EAAmCzF,IAAnC,CAAP;AACA,gBAAI0F,mBAAmB,KAAKzB,aAAL,CAAmBjE,IAAnB,CAAvB;;AAEA,gBAAI,CAAC0F,gBAAL,EAAuB;AACnB;AACH;;AAED,gBAAIA,iBAAiBC,MAArB,EAA6B;AACzBD,iCAAiBE,OAAjB,CAAyB,UAACC,QAAD,EAAc;AACnC,wBAAI;AACAA;AACH,qBAFD,CAEE,OAAOC,CAAP,EAAU;AACRtG,gCAAQC,KAAR,CAAc,uBAAuBiG,gBAAvB,GAA0C,WAA1C,GAAwD1F,IAAxD,GAA+D,KAA/D,GAAuE8F,CAArF;AACH;AACJ,iBAND;AAOH;AACJ;;AAGD;;;;;;;;;oCAMY9F,I,EAAM+F,Q,EAAU;AACxB,gBAAI,CAAC/F,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACnC;AACH;;AAED,gBAAIgG,cAAc9C,cAAcuC,IAAd,CAAmB,IAAnB,EAAyBzF,IAAzB,CAAlB;;AAEA,iBAAKiE,aAAL,CAAmB+B,WAAnB,IAAkC,KAAK/B,aAAL,CAAmBjE,IAAnB,KAA4B,EAA9D;AACA,iBAAKiE,aAAL,CAAmB+B,WAAnB,EAAgCC,IAAhC,CAAqCF,QAArC;AACH;;AAED;;;;;;;;;uCAMe/F,I,EAAM+F,Q,EAAU;AAC3B,gBAAI,CAAC/F,IAAL,EAAW;AACP;AACH;AACD,gBAAIgG,cAAc9C,cAAcuC,IAAd,CAAmB,IAAnB,EAAyBzF,IAAzB,CAAlB;;AAEA,gBAAI0F,mBAAmB,KAAKzB,aAAL,CAAmB+B,WAAnB,CAAvB;AACA,gBAAIN,gBAAJ,EAAsB;AAClB,oBAAIQ,QAAQR,iBAAiBS,OAAjB,CAAyBJ,QAAzB,CAAZ;AACA,oBAAIG,UAAU,CAAC,CAAf,EAAkB;AACdR,qCAAiBU,MAAjB,CAAwBF,KAAxB,EAA+B,CAA/B;AACH;AACJ;AACJ;;AAED;;;;;;kCAGU;AACN,iBAAKpE,cAAL,GAAsB,IAAtB;AACA,mBAAO,KAAKA,cAAZ;AACA,iBAAKmC,aAAL,GAAqB,IAArB;AACA,mBAAO,KAAKA,aAAZ;;AAEA,gBAAI,KAAKV,WAAL,IAAoB,KAAKA,WAAL,CAAiBO,OAAzC,EAAkD;AAC9C,qBAAKP,WAAL,CAAiBO,OAAjB;AACH;;AAED,gBAAI,KAAKzD,UAAL,IAAmB,KAAKA,UAAL,CAAgByD,OAAvC,EAAgD;AAC5C,qBAAKzD,UAAL,CAAgByD,OAAhB;AACH;;AAED,gBAAI,KAAKU,aAAL,IAAsB,KAAKA,aAAL,CAAmBV,OAA7C,EAAsD;AAClD,qBAAKU,aAAL,CAAmBV,OAAnB;AACH;AACJ;;;;;AArTD;;;;;;;;AAQA;;;;;;;;;4BASkB;AACd,mBAAO,KAAKE,YAAZ;AACH;;;4BAEgB;AACb,mBAAO,KAAKpD,WAAZ;AACH;;;4BAoKc;AACX,mBAAO,KAAKP,UAAL,CAAgBgD,QAAvB;AACH;;;;;;kBA2HU,IAAIlE,YAAJ,E;;;;;;;;;;;;;;;;;;QC5SCkH,Y,GAAAA,Y;QAsBAC,e,GAAAA,e;QAaAC,e,GAAAA,e;QAkBAC,oB,GAAAA,oB;QAkBAC,oB,GAAAA,oB;QAqBAC,U,GAAAA,U;;AAxKhB;;;;AACA;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;AA/DA;;;;;;;;;;;;;;;;AAoEO,IAAMC,sCAAe;;AAExB;;;;;AAKAC,cAAU,UAPc;;AASxB;;;;;AAKAC,kBAAc;AAdU,CAArB;;AAiBP;;;;;;;AAOO,SAASR,YAAT,CAAsBjE,GAAtB,EAA2B;AAC9B,QAAI0E,iBAAJ;;AAEAA,eAAW1E,OAAOxC,OAAOmH,QAAP,CAAgBC,QAAlC;;AAEA;AACA,QAAIC,cAAcH,SAASX,OAAT,CAAiB,GAAjB,CAAlB;;AAEA,QAAIc,cAAc,CAAlB,EAAqB;AACjBA,sBAAcH,SAASnB,MAAvB;AACH;;AAED,WAAOmB,SAASI,MAAT,CAAgB,CAAhB,EAAmBD,WAAnB,CAAP;AACH;;AAED;;;;;;;AAOO,SAASX,eAAT,GAA2B;AAC9B,QAAIa,eAAetI,qBAAUuF,oBAAV,CAA+B7C,uBAAaE,wBAA5C,CAAnB;AACA,WAAO0F,eAAeA,aAAaC,KAAb,CAAmB,GAAnB,CAAf,GAAyC,EAAhD;AACH;;AAED;;;;;;;;AAQO,SAASb,eAAT,CAAyBc,KAAzB,EAAgC;AACnC,QAAMF,eAAeb,iBAArB;;AAEA,SAAK,IAAIgB,IAAI,CAAR,EAAW3B,SAASwB,aAAaxB,MAAtC,EAA8C2B,IAAI3B,MAAlD,EAA0D2B,GAA1D,EAA+D;AAC3D,YAAI,IAAIC,MAAJ,CAAWJ,aAAaG,CAAb,CAAX,EAA4BE,IAA5B,CAAiCH,KAAjC,CAAJ,EAA6C;AACzC,mBAAO,IAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH;;AAED;;;;;;AAMO,SAASb,oBAAT,GAAgC;AACnC,QAAI,CAAC3H,qBAAUc,SAAV,EAAL,EAA4B;AACxB,eAAO,KAAP;AACH;AACD,QAAM8H,sBAAsB5I,qBAAUuF,oBAAV,CAA+B7C,uBAAaG,iBAA5C,CAA5B;AACA;AACA,WAAO,CAAC+F,mBAAD,IAAwBd,aAAaC,QAAb,KAA0Ba,mBAAzD;AACH;;AAED;;;;;;;;;AASO,SAAShB,oBAAT,CAA8BzG,IAA9B,EAAoC;AACvC;AACA;AACA0H,2BAAmB9C,OAAnB,CAA2B,EAAC5E,MAAMA,IAAP,EAA3B,EAAyCuC,IAAzC,CAA8C,UAAU3D,KAAV,EAAiB;AAC3DC,6BAAUC,yBAAV,CAAoCC,oBAAUoC,wBAA9C,EAAwE;AACpElC,oBAAQ;AACJL,uBAAOA;AADH;AAD4D,SAAxE;AAKH,KAND;AAOH;;AAED;;;;;;;;;AASO,SAAS8H,UAAT,CAAoBtE,GAApB,EAAyB;AAC5B,QAAI,CAACoE,sBAAL,EAA6B;AACzB;AACH;;AAED,QAAMxG,OAAOqG,aAAajE,GAAb,CAAb;;AAGA;AACA;AACA;AACA,QAAI,CAACpC,IAAD,IAAS,QAAQA,IAAjB,IAAyBuG,gBAAgBvG,IAAhB,CAA7B,EAAoD;AAChD;AACH;;AAEDyG,yBAAqBzG,IAArB;AACH;;AAED;AACA,IAAIwG,sBAAJ,EAA4B;AACxB;AACA,QAAMmB,YAAY/H,OAAOgI,OAAP,CAAeD,SAAjC;AACA,QAAME,eAAejI,OAAOgI,OAAP,CAAeC,YAApC;;AAEAjI,WAAOgI,OAAP,CAAeD,SAAf,GAA2B,UAASG,KAAT,EAAgBC,KAAhB,EAAuB3F,GAAvB,EAA4B;AACnDsE,mBAAWtE,GAAX;;AAEA,eAAOuF,UAAUK,KAAV,CAAgBJ,OAAhB,EAAyBK,SAAzB,CAAP;AACH,KAJD;;AAMArI,WAAOgI,OAAP,CAAeC,YAAf,GAA8B,UAASC,KAAT,EAAgBC,KAAhB,EAAuB3F,GAAvB,EAA4B;AACtDsE,mBAAWtE,GAAX;;AAEA,eAAOyF,aAAaG,KAAb,CAAmBJ,OAAnB,EAA4BK,SAA5B,CAAP;AACH,KAJD;AAKH,C;;;;;;;;;;;;;;;;;;;qjBC3ND;;;;;;;;;;;;;;;;;;AAgBA;;;;AACA;;;;AACA;;;;;;AAEA;;;;IAIaxD,U,WAAAA,U;;AAET;;;;;;;;;;AAUA;;;;AAIA,wBAAYpB,QAAZ,EAAsBpD,IAAtB,EAA4B;AAAA;;AACxB,aAAK8E,UAAL,CAAgB1B,QAAhB,EAA0BpD,IAA1B;AACA,aAAKiI,qBAAL,GAA6B,CAAC/J,oBAAUO,WAAX,CAA7B;AACH;;AAED;;;;;;;;;;mCAMW2E,Q,EAAUpD,I,EAAM;AACvB,gBAAIA,IAAJ,EAAU;AACN,qBAAKe,KAAL,GAAaf,IAAb;AACH;;AAED,iBAAKkI,SAAL,GAAiB9E,QAAjB;AACH;;AAED;;;;;;;;;;AASA;;;;;;;qCAOaL,Q,EAAU;AACnB,gBAAI,CAAC,KAAKhC,KAAV,EAAiB;AACb;AACH;;AAED,gBAAI,OAAOgC,QAAP,IAAmBA,aAAa,KAAKhC,KAAL,CAAW7C,oBAAUI,SAArB,CAAhC,IAAmEyE,aAAa,KAAKK,QAAzF,EAAmG;AAC/F,uBAAO,KAAKrC,KAAZ;AACH;;AAED,mBAAQ,KAAKA,KAAL,CAAW7C,oBAAUK,aAArB,KAAuC,KAAKwC,KAAL,CAAW7C,oBAAUK,aAArB,EAAoCwE,QAApC,CAA/C;AACH;;AAED;;;;;;;;;;;;;sCAUchD,I,EAA8D;AAAA,gBAAxDC,IAAwD,uEAAjD,KAAKe,KAA4C;AAAA,gBAArCoH,MAAqC,uEAA5BC,SAA4B;AAAA,gBAAjBC,UAAiB,uEAAJ,EAAI;;AACxE,gBAAIC,SAAS;AACTH,wBAAQA,MADC;AAETE,4BAAYA;AAFH,aAAb;;AAKA,gBAAIE,QAAQvI,KAAK9B,oBAAUE,UAAf,CAAZ;;AAEA,gBAAI,CAACmK,KAAL,EAAY;AACR,uBAAOD,MAAP;AACH;;AAED,iBAAK,IAAIE,OAAT,IAAoBD,KAApB,EAA2B;AACvB,oBAAI,CAACA,MAAMxD,cAAN,CAAqByD,OAArB,CAAL,EAAoC;AAChC;AACH;;AAED,oBAAIC,YAAYF,MAAMC,OAAN,CAAhB;;AAEA;AACA,oBAAIA,YAAYzI,IAAhB,EAAsB;AAClBuI,2BAAOtI,IAAP,GAAcuI,MAAMC,OAAN,CAAd;AACAF,2BAAO5H,GAAP,GAAa8H,OAAb;AACA,2BAAOF,MAAP;AACH,iBAJD,MAIO;AACH;AACA,wBAAII,UAAU9J,qBAAU+J,OAAV,CAAkB5I,IAAlB,EAAwByI,OAAxB,CAAd;AACA,wBAAII,gBAAgBhK,qBAAUiK,gBAAV,CAA2BH,OAA3B,EAAoC,KAAKT,qBAAzC,CAApB;AACA,wBAAIa,kBAAkBlK,qBAAUmK,IAAV,CAAe,CAACV,UAAD,EAAaG,OAAb,EAAsBI,aAAtB,CAAf,CAAtB;AACAF,8BAAU9J,qBAAUoK,WAAV,CAAsBN,OAAtB,EAA+B,KAAKT,qBAApC,CAAV;;AAEA,wBAAIS,YAAY3I,IAAhB,EAAsB;AAClB0I,oCAAY,KAAKQ,aAAL,CAAmBP,OAAnB,EAA4BD,SAA5B,EAAuCA,SAAvC,EAAkDK,eAAlD,CAAZ;;AAEA,4BAAIL,SAAJ,EAAe;AACX,mCAAOA,SAAP;AACH;AACJ;AACJ;AACJ;;AAED,mBAAOH,MAAP;AACH;;AAED;;;;;;;;;gCAMQvI,I,EAAMmJ,O,EAAS;AACnB,gBAAIC,UAAUvK,qBAAU6B,WAAV,CAAsBV,IAAtB,CAAd;AACA,gBAAIC,OAAO,KAAK2E,OAAL,CAAa/F,qBAAU4B,iBAAV,CAA4BT,IAA5B,CAAb,EAAgD,KAAhD,CAAX;;AAEA,gBAAIC,QAAQA,KAAK9B,oBAAUE,UAAf,CAAZ,EAAwC;AACpC,oBAAIgL,YAAY,qBAAMF,OAAN,CAAhB;AACAlJ,qBAAK9B,oBAAUE,UAAf,EAA2B+K,OAA3B,IAAsCC,UAAUvI,KAAhD;AACH;AACJ;;AAED;;;;;;;;;;gCAOQd,I,EAAwB;AAAA,gBAAlBsJ,SAAkB,uEAAN,IAAM;;AAC5B,gBAAI,CAACtJ,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACnC,uBAAOsJ,YAAY,qBAAM,KAAKtI,KAAX,CAAZ,GAAgC,KAAKA,KAA5C;AACH;;AAED;AACA;AACA,gBAAIhB,SAAS,KAAKmI,SAAd,IAA2BnI,SAAS,KAAKmI,SAAL,GAAiB,GAAjB,GAAuBhK,oBAAUO,WAAzE,EAAsF;AAClF,uBAAO4K,YAAW,qBAAM,KAAKtI,KAAX,CAAX,GAA+B,KAAKA,KAA3C;AACH;;AAED,gBAAMuI,YAAY1K,qBAAU2K,qBAAV,CAAgCxJ,IAAhC,CAAlB;;AAEA,gBAAIyJ,WAAW,KAAKC,YAAL,CAAkBH,UAAUvG,QAA5B,CAAf;;AAEA;AACA;AACA;AACA,gBAAI,CAACyG,QAAD,IAAa,CAACF,UAAUpJ,QAA5B,EAAsC;AAClC,uBAAOmJ,YAAW,qBAAMG,QAAN,CAAX,GAA6BA,QAApC;AACH;;AAED,gBAAIE,SAAS,KAAKT,aAAL,CAAmBK,UAAUpJ,QAA7B,EAAuCsJ,QAAvC,CAAb;;AAEA,gBAAIE,MAAJ,EAAY;AACR,uBAAOL,YAAY,qBAAMK,OAAO1J,IAAb,CAAZ,GAAiC0J,OAAO1J,IAA/C;AACH;AACJ;;AAED;;;;;;;;;;;mCAQWD,I,EAAMC,I,EAAMC,W,EAAmC;AAAA,gBAAtBE,YAAsB,uEAAP,KAAO;;AACtDH,mBAAO,qBAAMA,IAAN,CAAP;AACA;AACA,gBAAI,CAACD,IAAL,EAAW;AACPR,wBAAQoK,IAAR,CAAa,4BAAb,EAA2C3J,IAA3C;AACA;AACH;;AAED,gBAAMmF,SAASvG,qBAAUuG,MAAV,CAAiBpF,IAAjB,CAAf;;AAEA,gBAAI,CAACoF,MAAD,IAAW,KAAKpE,KAAL,CAAW7C,oBAAUK,aAArB,CAAf,EAAoD;AAChD;AACA,qBAAKwC,KAAL,CAAW7C,oBAAUK,aAArB,EAAoCwB,IAApC,IAA4CC,IAA5C;AACA;AACH;;AAED;AACA,gBAAMsJ,YAAY1K,qBAAU2K,qBAAV,CAAgCxJ,IAAhC,CAAlB;AACA,gBAAIyJ,WAAW,KAAKC,YAAL,CAAkBH,UAAUvG,QAA5B,CAAf;AACA,gBAAI2G,SAAS,KAAKT,aAAL,CAAmBK,UAAUpJ,QAA7B,EAAuCsJ,QAAvC,CAAb;AACA,gBAAIrB,SAASuB,OAAOvB,MAAP,IAAiBqB,QAAjB,IAA6B,KAAKzI,KAA/C;AACA,gBAAI6I,WAAWhL,qBAAU6B,WAAV,CAAsB6I,UAAUpJ,QAAhC,CAAf;;AAEA,gBAAIiI,UAAUA,OAAOpD,cAAP,CAAsB7G,oBAAUE,UAAhC,CAAd,EAA2D;AACvD+J,uBAAOjK,oBAAUE,UAAjB,EAA6BwL,QAA7B,IAAyC5J,IAAzC;;AAEA,oBAAImI,OAAOpD,cAAP,CAAsB7G,oBAAUG,gBAAhC,CAAJ,EAAuD;AACnD,wBAAI4H,QAAQkC,OAAOjK,oBAAUG,gBAAjB,EAAmC6H,OAAnC,CAA2CjG,WAA3C,CAAZ;;AAEA,wBAAIgG,QAAQ,CAAC,CAAb,EAAgB;AACZkC,+BAAOjK,oBAAUG,gBAAjB,EAAmC8H,MAAnC,CAA0ChG,eAAe8F,KAAf,GAAuBA,QAAQ,CAAzE,EAA4E,CAA5E,EAA+E2D,QAA/E;AACH,qBAFD,MAEO;AACHzB,+BAAOjK,oBAAUG,gBAAjB,EAAmC2H,IAAnC,CAAwC4D,QAAxC;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;;;;mCAMW7J,I,EAAM;AACb,gBAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAED,gBAAMoF,SAASvG,qBAAUuG,MAAV,CAAiBpF,IAAjB,CAAf;;AAEA,gBAAI,CAACoF,MAAD,IAAW,KAAKpE,KAAL,CAAW7C,oBAAUK,aAArB,CAAf,EAAoD;AAChD;AACA,uBAAO,KAAKwC,KAAL,CAAW7C,oBAAUK,aAArB,EAAoCwB,IAApC,CAAP;AACA;AACH;;AAED;AACA,gBAAMuJ,YAAY1K,qBAAU2K,qBAAV,CAAgCxJ,IAAhC,CAAlB;AACA,gBAAIyJ,WAAW,KAAKC,YAAL,CAAkBH,UAAUvG,QAA5B,CAAf;AACA,gBAAI2G,SAAS,KAAKT,aAAL,CAAmBK,UAAUpJ,QAA7B,EAAuCsJ,QAAvC,CAAb;;AAEA,gBAAIE,OAAO1J,IAAX,EAAiB;AACb,oBAAI0J,UAAUA,OAAOvB,MAAjB,IAA2BuB,OAAOvB,MAAP,CAAcpD,cAAd,CAA6B7G,oBAAUE,UAAvC,CAA/B,EAAmF;AAAA,wBACzE+J,MADyE,GAC9DuB,MAD8D,CACzEvB,MADyE;;AAE/E,wBAAIyB,WAAWhL,qBAAU6B,WAAV,CAAsB6I,UAAUpJ,QAAhC,CAAf;;AAEA,2BAAOiI,OAAOjK,oBAAUE,UAAjB,EAA6BwL,QAA7B,CAAP;AACA,2BAAOF,OAAO1J,IAAd;AACA,2BAAO0J,OAAOvB,MAAd;;AAEA,wBAAIA,OAAOpD,cAAP,CAAsB7G,oBAAUG,gBAAhC,CAAJ,EAAuD;AACnD,4BAAI4H,QAAQkC,OAAOjK,oBAAUG,gBAAjB,EAAmC6H,OAAnC,CAA2C0D,QAA3C,CAAZ;AACAzB,+BAAOjK,oBAAUG,gBAAjB,EAAmC8H,MAAnC,CAA0CF,KAA1C,EAAiD,CAAjD;AACH;;AAED,2BAAOyD,OAAOrB,UAAd;AACH;AACJ,aAhBD,MAgBO;AACH9I,wBAAQoK,IAAR,oBAA8B5J,IAA9B;AACH;AACJ;;AAED;;;;;;kCAGU;AACN,iBAAKgB,KAAL,GAAa,IAAb;AACA,iBAAKmH,SAAL,GAAiB,IAAjB;AACA,iBAAKD,qBAAL,GAA6B,IAA7B;;AAEA,mBAAO,KAAKlH,KAAZ;AACA,mBAAO,KAAKmH,SAAZ;AACA,mBAAO,KAAKD,qBAAZ;AACH;;;4BAvOc;AACX,mBAAO,KAAKC,SAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;qjBClEL;;;;;;;;;;;;;;;;;;AAgBA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;AAIA,IAAM2B,sBAAsB,iDAA5B;;AAEA,IAAMC,sBAAsB,UAAU5L,oBAAUO,WAApB,GAAiC,OAA7D;;AAEA;;;;;;IAKaG,S,WAAAA,S;;;;;;;;;AAET;;;;;;oCAMmB;AACf,gBAAI;AACA,uBAAO,OAAOe,MAAP,KAAkB,WAAzB;AACH,aAFD,CAEC,OAAMkG,CAAN,EAAQ;AACL,uBAAO,KAAP;AACH;AACJ;;AAED;;;;;;;;;uCAMsBiB,Q,EAAU;AAC5BA,uBAAWA,YAAY,KAAKzC,kBAAL,EAAvB;AACA,gBAAI,CAACyC,QAAL,EAAe;AACX,uBAAO,EAAP;AACH;;AAED,gBAAIiD,UAAUF,oBAAoBG,IAApB,CAAyBlD,QAAzB,CAAd;AACA+C,gCAAoBI,SAApB,GAAgC,CAAhC;AACA,gBAAIF,WAAWA,QAAQ,CAAR,CAAf,EAA2B;AACvB,uBAAOA,QAAQ,CAAR,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;;AAED;;;;;;;;;;;;;sCAUqBhK,I,EAAMqD,Q,EAAU;AACjC,gBAAI,CAACrD,IAAL,EAAW;AACP,uBAAO,EAAP;AACH;;AAED,gBAAI,CAACqD,QAAL,EAAe;AACX,uBAAOrD,IAAP;AACH;;AAED,gBAAMmD,YAAYtE,UAAUuE,WAAV,CAAsBpD,IAAtB,CAAlB;AACA,gBAAMsD,qBAAqBzE,UAAUiE,QAAV,CAAmBO,QAAnB,CAA3B;;AAEA,mBAAOF,cAAcG,kBAAd,GAAmC,EAAnC,GAAwCH,SAA/C;AACH;;AAED;;;;;;;;;oCAMmBf,G,EAAK;AACpB,gBAAM+H,cAAc,KAAKC,cAAL,EAApB;;AAEA,gBAAI,CAACD,WAAD,IAAgB/H,IAAIiI,UAAJ,CAAeF,WAAf,CAApB,EAAiD;AAC7C,uBAAO/H,GAAP;AACH;;AAED,mBAAO+H,cAAc/H,GAArB;AACH;;AAED;;;;;;;;;oCAMmBA,G,EAAK;AACpB,gBAAI,CAACA,GAAL,EAAU;AACN,uBAAOA,GAAP;AACH;;AAED,gBAAM+H,cAAc,KAAKC,cAAL,EAApB;;AAEA;AACA,gBAAIhI,IAAIiI,UAAJ,CAAeF,YAAYG,QAAZ,CAAqB,GAArB,IAA4BH,WAA5B,GAA0CA,cAAc,GAAvE,CAAJ,EAAiF;AAC7E,uBAAO/H,IAAImI,OAAJ,CAAYJ,WAAZ,EAAyB,EAAzB,CAAP;AACH,aAFD,MAEO;AACH,uBAAO/H,GAAP;AACH;AACJ;;AAED;;;;;;;;;6CAM4BoI,Y,EAAc;AACtC,gBAAI,KAAK7K,SAAL,EAAJ,EAAsB;AAClB,oBAAM8K,OAAOC,SAASC,IAAT,CAAcC,aAAd,CAA4B,oBAAoBJ,YAApB,GAAmC,IAA/D,CAAb;AACA,uBAAOC,QAAQA,KAAKI,OAApB;AACH;AACJ;;AAED;;;;;;;;;0CAMyBzI,G,EAAK;AAC1B,mBAAOA,OAAOA,IAAImI,OAAX,IAAsBnI,IAAImI,OAAJ,CAAY,YAAZ,EAA0BlJ,4BAAkBC,4BAA5C,CAA7B;AACH;;AAED;;;;;;;;iDAKgC;AAC5B;AACA,mBAAO,KAAKwJ,iBAAL,CAAuB,KAAKxG,kBAAL,EAAvB,CAAP;AACH;;AAED;;;;;;;;;;;oCAQmBlC,G,EAAK;AACpB;AACA,gBAAIA,OAAOA,IAAImI,OAAf,EAAwB;AACpB,uBAAO,KAAKO,iBAAL,CAAuB1I,GAAvB,CAAP;AACH;;AAED;AACA,gBAAM2I,eAAe,KAAK3G,oBAAL,CAA0B7C,uBAAaC,mBAAvC,CAArB;;AAEA,gBAAIuJ,YAAJ,EAAkB;AACd,uBAAOA,YAAP;AACH;;AAED;AACA,mBAAO,KAAKC,sBAAL,EAAP;AACH;;AAED;;;;;;;;;;iCAOgBhL,I,EAAM;AAClB,gBAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAED;AACAA,mBAAOA,KAAKuK,OAAL,CACH,2CADG,EAEH,IAFG,CAAP;AAIA;AACA,gBAAIU,gBAAgBjL,KAAKmG,OAAL,CAAa,GAAb,CAApB;AACAnG,mBAAOiL,gBAAgB,CAAC,CAAjB,GAAqBjL,KAAKkH,MAAL,CAAY,CAAZ,EAAe+D,aAAf,CAArB,GAAqDjL,IAA5D;AACA;AACAA,mBAAO,KAAKoD,WAAL,CAAiBpD,IAAjB,CAAP;;AAEA,mBAAOA,IAAP;AACH;;AAED;;;;;;;;;qCAMoBA,I,EAAMkL,S,EAAW;AACjC,gBAAI,CAACA,SAAD,IAAcA,UAAUvF,MAAV,GAAmB,CAArC,EAAwC;AACpC,uBAAO3F,IAAP;AACH;;AAED,gBAAI,CAACkL,UAAUb,UAAV,CAAqB,GAArB,CAAL,EAAgC;AAC5Ba,4BAAY,MAAMA,SAAlB;AACH;;AAED,gBAAI,CAAClL,IAAD,IAASA,KAAK2F,MAAL,GAAc,CAAvB,IAA4B3F,KAAKmG,OAAL,CAAa+E,SAAb,IAA0B,CAAC,CAA3D,EAA8D;AAC1D,uBAAOlL,IAAP;AACH;;AAED,gBAAImL,gBAAgBnL,IAApB;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAIoL,QAAQ,qGAAqGnB,IAArG,CACRjK,IADQ,CAAZ;AAGA,gBAAIqL,QAAQ,EAAZ;;AAEA,gBAAID,SAASA,MAAMzF,MAAN,GAAe,CAA5B,EAA+B;AAC3B;AACA0F,wBAAQD,MAAM,CAAN,IAAW,MAAMA,MAAM,CAAN,CAAjB,GAA4B,EAApC;AACA;AACAC,yBAASD,MAAM,CAAN,IAAW,MAAMA,MAAM,CAAN,CAAjB,GAA4B,EAArC;;AAEAD,gCACIC,MAAM,CAAN,IACA,GADA,GAEAA,MAAM,CAAN,EAASb,OAAT,CAAiB,WAAjB,EAA8BW,SAA9B,CAFA,GAGAG,KAJJ;AAKH;;AAED,mBAAOF,cAAchF,OAAd,CAAsB+E,SAAtB,IAAmC,CAAC,CAApC,GACDC,aADC,GAEDA,gBAAgBD,SAAhB,GAA4BG,KAFlC;AAGH;;AAED;;;;;;;;;oCAMmBrL,I,EAAMsL,Q,EAAU;AAC/B,gBAAI,CAACA,QAAD,IAAaA,SAAS3F,MAAT,GAAkB,CAAnC,EAAsC;AAClC,uBAAO3F,IAAP;AACH;;AAED,gBAAI,CAACsL,SAASjB,UAAT,CAAoB,GAApB,CAAL,EAA+B;AAC3BiB,2BAAW,MAAMA,QAAjB;AACH;;AAED,gBAAI,CAACtL,IAAD,IAASA,KAAK2F,MAAL,GAAc,CAAvB,IAA4B3F,KAAKmG,OAAL,CAAamF,QAAb,IAAyB,CAAC,CAA1D,EAA6D;AACzD,uBAAOtL,IAAP;AACH;;AAED,gBAAIkG,QAAQlG,KAAKmG,OAAL,CAAa,GAAb,KAAqBnG,KAAK2F,MAAtC;;AAEA,gBAAIO,QAAQ,CAAZ,EAAe;AACX,uBAAOlG,OAAOsL,QAAd;AACH;;AAED,mBAAOtL,KAAKuL,KAAL,CAAW,CAAX,EAAcrF,KAAd,IAAuBoF,QAAvB,GAAkCtL,KAAKuL,KAAL,CAAWrF,KAAX,EAAkBlG,KAAK2F,MAAvB,CAAzC;AACH;;AAED;;;;;;;6CAI4B;AACxB,mBAAO,KAAKhG,SAAL,KAAmBC,OAAOmH,QAAP,CAAgBC,QAAnC,GAA8CqB,SAArD;AACH;;AAED;;;;;;;;;kDAMiCmD,S,EAAWC,O,EAAS;AACjD,gBAAI,KAAK9L,SAAL,EAAJ,EAAsB;AAClBC,uBAAO8L,aAAP,CAAqB,IAAIC,WAAJ,CAAgBH,SAAhB,EAA2BC,OAA3B,CAArB;AACH;AACJ;;AAED;;;;;;;;;6BAMaG,K,EAAO;AAChB,mBAAOA,QAAQ,KAAKC,SAAL,CAAeD,MAAME,MAAN,CAAa,UAAC9L,IAAD;AAAA,uBAAUA,IAAV;AAAA,aAAb,EAA6BgJ,IAA7B,CAAkC,GAAlC,CAAf,CAAR,GAAiE,EAAxE;AACH;;AAED;;;;;;;;;kCAMiBhJ,I,EAAM;AACnB,gBAAI,CAACA,IAAL,EAAW,OAAO,EAAP;AACX,mBAAOA,OAAOA,KAAKuK,OAAL,CAAa,QAAb,EAAuB,GAAvB,CAAP,GAAqC,EAA5C;AACH;;AAED;;;;;;;;;qCAMoBvK,I,EAAM;AACtB,gBAAI,CAACA,IAAD,IAAU,OAAOA,IAAP,KAAgB,QAA9B,EAAyC,OAAO,EAAP;AACzC,mBAAOA,KAAKqK,UAAL,CAAgB,GAAhB,IAAuBrK,IAAvB,GAA8B,MAAMA,IAA3C;AACH;;AAED;;;;;;;;;qCAMoBA,I,EAAM;AACtB,gBAAI,CAACA,IAAD,IAAU,OAAOA,IAAP,KAAgB,QAA9B,EAAyC,OAAO,EAAP;AACzC,mBAAOA,KAAKqK,UAAL,CAAgB,GAAhB,IAAuBrK,KAAKuL,KAAL,CAAW,CAAX,CAAvB,GAAuCvL,IAA9C;AACH;;AAED;;;;;;;;;0CAMyBA,I,EAAM;AAC3B,gBAAM+L,cAAc/L,KAAKgM,WAAL,CAAiB,GAAjB,IAAwB,CAA5C;AACA,mBAAOhM,QAAQ,OAAOA,IAAP,KAAgB,QAAxB,IAAoC+L,cAAc,CAAlD,IAAuDA,cAAc/L,KAAK2F,MAA1E,IAAoF3F,KAAKiM,SAAL,CAAe,CAAf,EAAkBF,cAAc,CAAhC,CAA3F;AACH;;AAED;;;;;;;;;+BAMc/L,I,EAAM;AAChB,mBAAO,IAAIuH,MAAJ,CAAWwC,mBAAX,EAAgCvC,IAAhC,CAAqCxH,IAArC,CAAP;AACH;;AAED;;;;;;;;oCAKmBA,I,EAAM;AACrB,gBAAM+L,cAAc/L,KAAKgM,WAAL,CAAiB,GAAjB,IAAwB,CAA5C;AACA,mBAAOhM,QAAQ,OAAOA,IAAP,KAAgB,QAAxB,IAAoC+L,cAAc/L,KAAK2F,MAAvD,IAAiE3F,KAAKiM,SAAL,CAAeF,WAAf,EAA4B/L,KAAK2F,MAAjC,CAAxE;AACH;;AAED;;;;;;;;;;;gCAQeuG,U,EAAY7I,Q,EAAU;AACjC,gBAAI,CAAC6I,UAAL,EAAiB;AACb,uBAAO,EAAP;AACH;;AAED,gBAAIC,qBAAqBtN,UAAUuN,YAAV,CAAuBF,UAAvB,EAAmC9E,KAAnC,CAAyC,GAAzC,CAAzB;AACA,gBAAIiF,mBAAmBxN,UAAUuN,YAAV,CAAuB/I,QAAvB,EAAiC+D,KAAjC,CAAuC,GAAvC,CAAvB;;AAEA,gBAAI+E,mBAAmBxG,MAAnB,GAA4B0G,iBAAiB1G,MAAjD,EAAyD;AACrD,uBAAOuG,UAAP;AACH;;AAED,gBAAIhG,cAAJ;AACA,iBAAIA,QAAQ,CAAZ,EAAeA,QAAQmG,iBAAiB1G,MAAxC,EAAgD,EAAEO,KAAlD,EAAyD;AACrD,oBAAIiG,mBAAmBjG,KAAnB,MAA8BmG,iBAAiBnG,KAAjB,CAAlC,EAA2D;AACvD;AACH;AACJ;;AAED,gBAAIA,UAAUmG,iBAAiB1G,MAA/B,EAAuC;AACnC,uBAAOwG,mBAAmBZ,KAAnB,CAAyBrF,KAAzB,EAAgC8C,IAAhC,CAAqC,GAArC,CAAP;AACH,aAFD,MAEO;AACH,uBAAOkD,UAAP;AACH;AACJ;;AAED;;;;;;;;;;4CAO2BlM,I,EAAMsM,Y,EAAc;AAC3C,gBAAIV,QAAQ,CAAC5L,IAAD,CAAZ;AACAsM,yBAAa1G,OAAb,CAAqB,UAAC2G,WAAD,EAAiB;AAClC,oBAAIC,WAAW,EAAf;AACA,oBAAIC,QAAQ5N,UAAUgN,SAAV,CAAoBhN,UAAU+E,YAAV,CAAuB2I,WAAvB,IAAsC,GAA1D,CAAZ;AACAX,sBAAMhG,OAAN,CAAc,UAAC5F,IAAD,EAAU;AACpBwM,+BAAWA,SAASE,MAAT,CAAgB1M,KAAKoH,KAAL,CAAWqF,KAAX,CAAhB,CAAX;AACA,wBAAIzM,KAAKsK,QAAL,CAAciC,WAAd,CAAJ,EAAgC;AAC5B,4BAAII,WAAWH,SAASpG,MAAT,CAAgBoG,SAAS7G,MAAT,GAAgB,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,CAAf;AACA,4BAAIgH,aAAaJ,WAAjB,EAA8B;AAC1BC,uCAAWA,SAASE,MAAT,CAAgBC,SAASvF,KAAT,CAAevI,UAAU+E,YAAV,CAAuB2I,WAAvB,CAAf,CAAhB,CAAX;AACH;AACJ;AACDC,+BAAWA,SAASV,MAAT,CAAgB,UAAC9L,IAAD;AAAA,+BAAUA,IAAV;AAAA,qBAAhB,CAAX;AACH,iBATD;AAUA4L,wBAAQY,QAAR;AACH,aAdD;AAeA,mBAAOZ,KAAP;AACH;;AAED;;;;;;;;;;oCAOmB5I,Q,EAAU4J,Q,EAAU;AACnC,mBAAO5J,WAAW,GAAX,GAAiB7E,oBAAUO,WAA3B,GAAyC,GAAzC,GAA+CkO,QAAtD;AACH;;AAED;;;;;;;;;;8CAO6B5M,I,EAAM;AAC/B,gBAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACnC;AACH;;AAED,gBAAM6M,aAAa7M,KAAKoH,KAAL,CAAW,MAAMjJ,oBAAUO,WAAhB,GAA8B,GAAzC,CAAnB;;AAEA,gBAAI0I,QAAQ;AACRpE,0BAAU6J,WAAW,CAAX;AADF,aAAZ;;AAIA,gBAAIA,WAAWlH,MAAX,GAAoB,CAAxB,EAA2B;AACvByB,sBAAMjH,QAAN,GAAiB0M,WAAW,CAAX,CAAjB;AACH;;AAED,mBAAOzF,KAAP;AACH;;AAED;;;;;;;;;;oCAOmBpH,I,EAAM8M,O,EAAS;AAC9BA,oBAAQlH,OAAR,CAAgB,UAACmH,GAAD,EAAS;AACrB,uBAAM/M,KAAKqK,UAAL,CAAgB0C,GAAhB,CAAN,EAA4B;AACxB/M,2BAAOnB,UAAUuN,YAAV,CAAuBpM,KAAKuL,KAAL,CAAWwB,IAAIpH,MAAf,CAAvB,CAAP;AACH;;AAED,uBAAM3F,KAAKsK,QAAL,CAAcyC,GAAd,CAAN,EAA0B;AACtB/M,2BAAOA,KAAKuL,KAAL,CAAW,CAAX,EAAcvL,KAAK2F,MAAL,GAAcoH,IAAIpH,MAAhC,CAAP;AACA,wBAAI3F,KAAKsK,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACpBtK,+BAAOA,KAAKuL,KAAL,CAAW,CAAX,EAAcvL,KAAK2F,MAAL,GAAc,CAA5B,CAAP;AACH;AACJ;AACJ,aAXD;AAYA,mBAAO3F,IAAP;AACH;;;yCAEuBA,I,EAAM8M,O,EAAS;AACnC,gBAAIE,YAAY,EAAhB;AACAF,oBAAQlH,OAAR,CAAgB,UAACmH,GAAD,EAAS;AACrB,uBAAM/M,KAAKqK,UAAL,CAAgB0C,GAAhB,CAAN,EAA4B;AACxB/M,2BAAOnB,UAAUuN,YAAV,CAAuBpM,KAAKuL,KAAL,CAAWwB,IAAIpH,MAAf,CAAvB,CAAP;AACAqH,gCAAYA,YAAY,GAAZ,GAAkBD,GAA9B;AACH;AACJ,aALD;AAMA,mBAAOlO,UAAUuN,YAAV,CAAuBY,SAAvB,CAAP;AACH;;;;;;;;;;;;;;;ACpgBL,kC","file":"cq-spa-page-model-manager.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cqSpaPageModelManager\"] = factory();\n\telse\n\t\troot[\"cqSpaPageModelManager\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\n\nrequire('./src/ModelRouter');\n\nexport { default as ModelManager } from \"./src/ModelManager\";\nexport * from \"./src/ModelClient\";\nexport * from \"./src/PathUtils\";\nexport { default as Constants } from \"./src/Constants\";","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\n\n/**\n * Useful variables for interacting with CQ/AEM components\n *\n * @namespace Constants\n */\nconst Constants = {\n\n    /**\n     * Type of the item\n     *\n     * @type {string}\n     */\n    TYPE_PROP: ':type',\n\n    /**\n     * List of child items of an item\n     *\n     * @type {string}\n     */\n    ITEMS_PROP: ':items',\n\n    /**\n     * Order in which the items should be listed\n     *\n     * @type {string}\n     */\n    ITEMS_ORDER_PROP: ':itemsOrder',\n\n    /**\n     * Path of an item\n     *\n     * @type {string}\n     */\n    PATH_PROP: ':path',\n\n    /**\n     * Children of a hierarchical item\n     *\n     * @type {string}\n     */\n    CHILDREN_PROP: ':children',\n\n    /**\n     * Hierarchical type of the item\n     */\n    HIERARCHY_TYPE_PROP: ':hierarchyType',\n\n    /**\n     * JCR CONTENT Node\n     */\n    JCR_CONTENT: \"jcr:content\"\n};\n\nexport default Constants;\n","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\nimport { PathUtils } from \"./PathUtils\";\nimport clone from 'clone';\nimport EventType from \"./EventType\";\n\n/**\n * Broadcast an event to indicate the page model has been loaded\n *\n * @param {{}} model - model item to be added to the broadcast payload\n * @fires cq-pagemodel-loaded\n */\nexport function triggerPageModelLoaded(model) {\n    // Deep copy to protect the internal state of the page mode\n    PathUtils.dispatchGlobalCustomEvent(EventType.PAGE_MODEL_LOADED, {\n        detail: {\n            model: clone(model)\n        }\n    });\n}\n\n/**\n * The EditorClient is responsible for the interactions with the Page Editor.\n */\nexport class EditorClient {\n\n    constructor(ModelManager) {\n        this._modelManager = ModelManager;\n\n        this._windowListener = (event) => {\n            if (!event || !event.detail || !event.detail.msg) {\n                console.error('EditorService.js', 'No message passed to cq-pagemodel-update', event);\n                return;\n            }\n\n            this._updateModel(event.detail.msg);\n        };\n\n        if (PathUtils.isBrowser()) {\n            window.addEventListener(EventType.PAGE_MODEL_UPDATE, this._windowListener);\n        }\n    }\n\n    /**\n     * Updates the page model with the given data\n     *\n     * @param {Object} msg - Object containing the data to update the page model\n     * @property {String} msg.dataPath - Relative data path in the PageModel which needs to be updated\n     * @property {String} msg.pagePath - Absolute page path corresponding to the page in the PageModel which needs to be updated\n     * @param {String} msg.cmd - Command Action requested via Editable on the content Node\n     * @param {Object} msg.data - Data that needs to be updated in the PageModel at {path}\n     *\n     * @fires cq-pagemodel-loaded\n     *\n     * @private\n     */\n    _updateModel(msg) {\n        if (!msg || !msg.cmd || !msg.path) {\n            console.error('PageModelManager.js', 'Not enough data received to update the page model');\n            return;\n        }\n        // Path in the PageModel which needs to be updated\n        let path = msg.path;\n        // Command Action requested via Editable on the content Node\n        let cmd = msg.cmd;\n        // Data that needs to be updated in the page model at the given path\n        let data = clone(msg.data);\n\n        let siblingName;\n        let itemPath;\n        let insertBefore;\n\n        switch(cmd) {\n            case 'replace':\n                this._modelManager.modelStore.setData(path, data);\n                this._modelManager._notifyListeners(path);\n                break;\n\n            case 'delete':\n                this._modelManager.modelStore.removeData(path);\n                this._modelManager._notifyListeners(PathUtils.getParentNodePath(path));\n                break;\n\n            case 'insertBefore':\n                insertBefore = true;\n                // No break as we want both insert command to be treated the same way\n                // eslint-disable-next-line no-fallthrough\n            case 'insertAfter':\n                // The logic relative to the item path and sibling between the editor and the ModelManager is reversed\n                // Adapting the command to the ModelManager API\n                siblingName = PathUtils.getNodeName(path);\n                itemPath = PathUtils.getParentNodePath(path) + \"/\" + data.key;\n                this._modelManager._modelStore.insertData(itemPath, data.value, siblingName, insertBefore);\n                this._modelManager._notifyListeners(PathUtils.getParentNodePath(path));\n\n                break;\n\n            default:\n                // \"replaceContent\" command not supported\n                // \"moveBefore\", \"moveAfter\" commands not supported.\n                // As instead, we are replacing source and destination parents because they can contain data about the item we want to relocate\n                console.log('EditorClient', 'unsupported command:', cmd);\n        }\n\n        triggerPageModelLoaded(this._modelManager.modelStore._data);\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        this._modelManager = null;\n        delete this._modelManager;\n\n        if (PathUtils.isBrowser()) {\n            window.removeEventListener(EventType.PAGE_MODEL_UPDATE, this._windowListener);\n        }\n    }\n}","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\n\n/**\n * Type of events triggered or listened by the PageModelManager and ModelRouter\n *\n * @type {{PAGE_MODEL_INIT: string, PAGE_MODEL_LOADED: string, PAGE_MODEL_UPDATE: string, PAGE_MODEL_ROUTE_CHANGED: string}}\n */\nconst EventType = {\n\n    /**\n     * Event which indicates that the PageModelManager has been initialized\n     */\n    PAGE_MODEL_INIT: 'cq-pagemodel-init',\n\n    /**\n     * Event which indicates that the PageModelManager has loaded new content\n     */\n    PAGE_MODEL_LOADED: 'cq-pagemodel-loaded',\n\n    /**\n     * Event that indicates a request to update the page model\n     */\n    PAGE_MODEL_UPDATE: 'cq-pagemodel-update',\n\n    /**\n     * Event which indicates that ModelRouter has identified that model route has changed\n     */\n    PAGE_MODEL_ROUTE_CHANGED: 'cq-pagemodel-route-changed'\n};\n\nexport default EventType;","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\n\nconst DEFAULT_SLING_MODEL_SELECTOR = 'model';\n\nconst InternalConstants = {\n\n    DEFAULT_SLING_MODEL_SELECTOR: DEFAULT_SLING_MODEL_SELECTOR,\n\n    DEFAULT_MODEL_JSON_EXTENSION: '.' + DEFAULT_SLING_MODEL_SELECTOR + '.json'\n};\n\nexport default InternalConstants;","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\n\n/**\n * Names of the meta properties associated with the PageModelProvider and ModelRouter\n *\n * @type {{PAGE_MODEL_ROOT_URL: string, PAGE_MODEL_ROUTE_FILTERS: string, PAGE_MODEL_ROUTER: string}}\n */\nconst MetaProperty = {\n\n    PAGE_MODEL_ROOT_URL: 'cq:pagemodel_root_url',\n\n    PAGE_MODEL_ROUTE_FILTERS: 'cq:pagemodel_route_filters',\n\n    PAGE_MODEL_ROUTER: 'cq:pagemodel_router'\n\n};\n\nexport default MetaProperty;","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\n\nexport class ModelClient {\n\n    /**\n     * @constructor\n     * @param {string} [apiHost] - Http host of the API\n     */\n    constructor(apiHost) {\n        this._apiHost = apiHost || '';\n        this._fetchPromises = {};\n    }\n\n    /**\n     * Fetches a model using the given a resource path\n     *\n     * @param {string} modelPath - Absolute path to the model.\n     * @return {*}\n     */\n    fetch(modelPath) {\n        if (!modelPath) {\n            let err = 'Fetching model rejected for path: ' + modelPath;\n            return Promise.reject(new Error(err));\n        }\n\n        // Either the API host has been provided or we make an absolute request relative to the current host\n        let url = `${this._apiHost}${modelPath}`;\n        \n        // Assure that the default credentials value ('same-origin') is set for browsers which do not set it\n        // or which are setting the old default value ('omit')\n        return fetch(url, {credentials: 'same-origin'}).then(function(response) {\n            if (response.status >= 200 && response.status < 300) {\n                return response.json();\n            }\n\n            throw { response: response };\n        }).catch((error) => {\n            return Promise.reject(error);\n        });\n    }\n\n    /**\n     * Destroys the internal references to avoid memory leaks\n     */\n    destroy() {\n        this._apiHost = null;\n        this._fetchPromises = null;\n    }\n}","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\nimport { PathUtils } from \"./PathUtils\";\nimport Constants from \"./Constants\";\nimport MetaProperty from \"./MetaProperty\";\nimport {EditorClient, triggerPageModelLoaded} from \"./EditorClient\";\nimport { ModelClient } from \"./ModelClient\";\nimport { ModelStore } from \"./ModelStore\";\n\n/**\n * Does the provided model object contains an entry for the given child path\n *\n * @param {{}} model            - model to be evaluated\n * @param {string} childPath    - path of the child\n * @return {*}\n *\n * @private\n */\nfunction hasChildOfPath(model, childPath) {\n    return !!(model && childPath && model[Constants.CHILDREN_PROP] && model[Constants.CHILDREN_PROP][PathUtils.sanitize(childPath)]);\n}\n\n/**\n * Does the provided page path correspond to the model root path\n *\n * @param {string} pagePath         - path of the page model\n * @param {string} modelRootPath    - current model root path\n * @return {boolean}\n *\n * @private\n */\nfunction isPageURLRoot(pagePath, modelRootPath) {\n    return !pagePath || !modelRootPath || PathUtils.sanitize(pagePath) === PathUtils.sanitize(modelRootPath);\n}\n\n/**\n * Adapts the provided path to a valid model path.\n * Returns an empty string if the given path is equal to the root model path.\n * This function is a utility tool that converts a provided root model path into an internal specific empty path\n *\n * @param {string} [path]   - raw model path\n * @return {string} the valid model path\n *\n * @private\n */\nfunction adaptPagePath(path) {\n    if (!path) {\n        return '';\n    }\n\n    const localPath = PathUtils.internalize(path);\n\n    if (!this.modelStore || !this.modelStore.rootPath) {\n        return localPath;\n    }\n\n    const localRootModelPath = PathUtils.sanitize(this.modelStore.rootPath);\n\n    return localPath === localRootModelPath ? '' : localPath;\n}\n\n/**\n * The ModelManager gathers all the components implicated in managing the model data\n */\nclass ModelManager {\n\n    /**\n     * Configuration object for the getData function\n     *\n     * @typedef {{}} GetDataConfig\n     * @property {string} path             - Path of the data model\n     * @property {boolean} forceReload     - Should the data model be reloaded\n     */\n\n    /**\n     * Configuration object for the Initialization function\n     *\n     * @typedef {{}} InitializationConfig\n     * @property {string} [path]                   - Path of the data model\n     * @property {{}} [model]                      - Model structure to initialize the page model manager with\n     * @property {ModelClient} [modelClient]       - Model client\n     */\n\n    get modelClient() {\n        return this._modelClient;\n    }\n\n    get modelStore() {\n        return this._modelStore;\n    }\n\n    /**\n     * Verifies the integrity of the provided dependencies\n     *\n     * @return {Promise}\n     * @private\n     */\n    _checkDependencies() {\n        if (!this.modelClient) {\n            return Promise.reject(\"No ModelClient registered\");\n        }\n\n        if (!this.modelStore) {\n            return Promise.reject(\"No ModelManager registered\");\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Transforms the given path into a model URL\n     *\n     * @param path\n     * @return {*}\n     * @private\n     */\n    _toModelPath(path) {\n        let url = PathUtils.addSelector(path, 'model');\n        url = PathUtils.addExtension(url, 'json');\n        url = PathUtils.externalize(url);\n\n        return PathUtils.makeAbsolute(url);\n    }\n\n    /**\n     * Initializes the ModelManager using the given path to resolve a data model.\n     * If no path is provided, fallbacks are applied in the following order:\n     *\n     * - meta property: cq:pagemodel_root_url\n     * - current pathname of the browser\n     *\n     * Once the initial model is loaded and if the data model doesn't contain the path of the current pathname, the library attempts to fetch a fragment of model.\n     *\n     * @param {string|InitializationConfig} [config]                - URL to the data model or configuration object\n     * @fires cq-pagemodel-loaded\n     * @return {Promise}\n     */\n    initialize(config) {\n        this.destroy();\n        let path;\n        let initialModel;\n\n        if (!config || typeof config === 'string') {\n            path = config;\n        } else if (config) {\n            path = config.path;\n            this._modelClient = config.modelClient;\n            initialModel = config.model;\n        }\n\n        this._listenersMap = {};\n        this._fetchPromises = {};\n        this._initPromise = null;\n\n        const metaPropertyModelUrl = PathUtils.internalize(PathUtils.getMetaPropertyValue(MetaProperty.PAGE_MODEL_ROOT_URL));\n        const currentPathname = PathUtils.sanitize(PathUtils.getCurrentPathname());\n        // Fetch the app root model\n        // 1. consider the provided page path\n        // 2. consider the meta property value\n        // 3. fallback to the model path contained in the URL\n        const rootModelURL = path || metaPropertyModelUrl || currentPathname;\n\n        if (!rootModelURL) {\n            console.error('ModelManager.js', 'Cannot initialize without an URL to fetch the root model');\n        }\n\n        if (!this._modelClient) {\n            this._modelClient = new ModelClient();\n        }\n\n        this._editorClient = new EditorClient(this);\n        this._modelStore = new ModelStore(rootModelURL, initialModel);\n\n        this._initPromise = this._checkDependencies().then(() => {\n            const rootModelPath = PathUtils.sanitize(rootModelURL);\n            let data = this.modelStore.getData(rootModelPath);\n\n            if (data) {\n                triggerPageModelLoaded(data);\n                return data;\n            } else {\n                return this._fetchData(rootModelURL).then((rootModel) => {\n                    this.modelStore.initialize(rootModelPath, rootModel);\n                    // Append the child page if the page model doesn't correspond to the URL of the root model\n                    // and if the model root path doesn't already contain the child model (asynchronous page load)\n                    if (!isPageURLRoot(currentPathname, metaPropertyModelUrl) && !hasChildOfPath(rootModel, currentPathname)) {\n                        return this._fetchData(currentPathname).then((model) => {\n                            this.modelStore.insertData(PathUtils.sanitize(currentPathname), model);\n                            let data = this.modelStore.getData();\n                            triggerPageModelLoaded(data);\n                            return data;\n                        });\n                    } else {\n                        let data = this.modelStore.getData();\n                        triggerPageModelLoaded(data);\n                        return data;\n                    }\n                });\n            }\n        });\n\n        return this._initPromise;\n    }\n\n    /**\n     * Fetches a model for the given path\n     *\n     * @param {string} path - Model path\n     * @return {Promise}\n     * @private\n     */\n    _fetchData(path) {\n        if (this._fetchPromises.hasOwnProperty(path)) {\n            return this._fetchPromises[path];\n        }\n\n        let promise = this.modelClient.fetch(this._toModelPath(path));\n\n        this._fetchPromises[path] = promise;\n\n        promise.then((obj) => {\n            delete this._fetchPromises[path];\n            return obj;\n        }).catch((error) => {\n            delete this._fetchPromises[path];\n            return error;\n        });\n\n        return promise;\n    }\n\n    _storeData(path, data) {\n        const isItem = PathUtils.isItem(path);\n\n        this.modelStore.insertData(path, data);\n\n        // If the path correspond to an item notify either the parent item\n        // Otherwise notify the app root\n        this._notifyListeners(path);\n\n        if (!isItem) {\n            // As we are expecting a page, we notify the root\n            this._notifyListeners('');\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the path of the data model root\n     *\n     * @return {string}\n     */\n    get rootPath() {\n        return this.modelStore.rootPath;\n    }\n\n    /**\n     * Returns the model for the given configuration\n     * @param {string|GetDataConfig} [config]     - Either the path of the data model or a configuration object. If no parameter is provided the complete model is returned\n     * @return {Promise}\n     */\n    getData(config) {\n        let path;\n        let forceReload = false;\n\n        if (typeof config === 'string') {\n            path = config;\n        } else if (config) {\n            path = config.path;\n            forceReload = config.forceReload;\n        }\n\n        let initPromise = this._initPromise || Promise.resolve();\n\n        return initPromise.then(() => this._checkDependencies())\n            .then(() => {\n                if (!forceReload) {\n                    let item = this.modelStore.getData(path);\n\n                    if (item) {\n                        return Promise.resolve(item);\n                    }\n                }\n\n                // We are not having any items\n                // We want to reload the item\n                return this._fetchData(path).then((data) => this._storeData(path, data));\n            });\n    }\n\n    /**\n     * Notifies the listeners for a given path\n     *\n     * @param {string} path - Path of the data model\n     * @private\n     */\n    _notifyListeners(path) {\n        path = PathUtils.adaptPagePath.call(this, path);\n        let listenersForPath = this._listenersMap[path];\n\n        if (!listenersForPath) {\n            return;\n        }\n\n        if (listenersForPath.length) {\n            listenersForPath.forEach((listener) => {\n                try {\n                    listener();\n                } catch (e) {\n                    console.error('Error in listener ' + listenersForPath + ' at path ' + path + ' : ' + e);\n                }\n            });\n        }\n    }\n\n\n    /**\n     * Add the given callback as a listener for changes at the given path.\n     *\n     * @param {String}  [path]  Absolute path of the resource (e.g., \"/content/mypage\"). If not provided, the root page path is used.\n     * @param {String}  [callback]  Function to be executed listening to changes at given path\n     */\n    addListener(path, callback) {\n        if (!path && typeof path !== 'string') {\n            return;\n        }\n\n        let adaptedPath = adaptPagePath.call(this, path);\n\n        this._listenersMap[adaptedPath] = this._listenersMap[path] || [];\n        this._listenersMap[adaptedPath].push(callback);\n    }\n\n    /**\n     * Remove the callback listener from the given path path.\n     *\n     * @param {String}  [path] Absolute path of the resource (e.g., \"/content/mypage\"). If not provided, the root page path is used.\n     * @param {String}  [callback]  Listener function to be removed.\n     */\n    removeListener(path, callback) {\n        if (!path) {\n            return;\n        }\n        let adaptedPath = adaptPagePath.call(this, path);\n\n        let listenersForPath = this._listenersMap[adaptedPath];\n        if (listenersForPath) {\n            let index = listenersForPath.indexOf(callback);\n            if (index !== -1) {\n                listenersForPath.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        this._fetchPromises = null;\n        delete this._fetchPromises;\n        this._listenersMap = null;\n        delete this._listenersMap;\n\n        if (this.modelClient && this.modelClient.destroy) {\n            this.modelClient.destroy();\n        }\n\n        if (this.modelStore && this.modelStore.destroy) {\n            this.modelStore.destroy();\n        }\n\n        if (this._editorClient && this._editorClient.destroy) {\n            this._editorClient.destroy();\n        }\n    }\n}\n\nexport default new ModelManager();","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\nimport EventType from './EventType';\nimport { PathUtils } from \"./PathUtils\";\nimport MetaProperty from \"./MetaProperty\";\nimport ModelManagerSerice from \"./ModelManager\";\n\n/**\n * Triggered by the ModelRouter when the route has changed.\n *\n * @event cq-pagemodel-route-changed\n * @type {Object}\n * @property {Object} detail\n * @property {Object} detail.model - The page model object corresponding to the new route\n */\n\n/**\n * <p>The ModelRouter listens for HTML5 History API <i>popstate</i> events and calls {@link PageModelManager#getData()} with the model path it extracted from the URL.</p>\n *\n * <h2>Configuration</h2>\n *\n * <p>The Model Router can be configured using meta properties located in the head section of the document.</p>\n *\n * <h3>Meta properties</h3>\n * <ul>\n *     <li>cq:page_model_router - default=undefined, options=disable</li>\n *     <li>cq:page_model_route_filters - default=undefined, options=RegExp<></li>\n * </ul>\n *\n * <h3>Defaults</h3>\n * <ul>\n *     <li>The ModelRouter is enabled and uses the <i>History</i> API to extract the model path from the current content path</li>\n * </ul>\n *\n * <h3>Examples and Usages</h3>\n *\n * <h4>Disables the page model router</h4>\n * <pre>\n *     <code>e.g. &lt;meta property=\"cq:page_model_router\" content=\"disable\"\\&gt;</code>\n * </pre>\n *\n * <h4>Filters paths from the model routing with the given patterns</h4>\n * <pre>\n *     <code>e.g. &lt;meta property=\"cq:page_model_route_filters\" content=\"route/not/found,^(.*)(?:exclude/path)(.*)\"\\&gt;</code>\n * </pre>\n *\n * @module ModelRouter\n */\n\n/**\n * Modes in which the Model Router operates\n *\n * @type {{DISABLED: string, CONTENT_PATH: string}}\n */\nexport const ROUTER_MODES = {\n\n    /**\n     * Flag that indicates that the model router should be disabled\n     *\n     * @type {string}\n     */\n    DISABLED: 'disabled',\n\n    /**\n     * Flag that indicates that the model router should extract the model path from the content path section of the URL\n     *\n     * @type {string}\n     */\n    CONTENT_PATH: 'path'\n};\n\n/**\n * Returns the model path. If no URL is provided the current window URL is used\n *\n * @param {string} [url]    - url from which to extract the model path\n *\n * @return {string}\n */\nexport function getModelPath(url) {\n    let localUrl;\n\n    localUrl = url || window.location.pathname;\n\n    // The default value model path comes as the the content path\n    let endPosition = localUrl.indexOf('.');\n\n    if (endPosition < 0) {\n        endPosition = localUrl.length;\n    }\n\n    return localUrl.substr(0, endPosition);\n}\n\n/**\n * Returns the list of provided route filters\n *\n * @returns {string[]}\n *\n * @private\n */\nexport function getRouteFilters() {\n    let routeFilters = PathUtils.getMetaPropertyValue(MetaProperty.PAGE_MODEL_ROUTE_FILTERS);\n    return routeFilters ? routeFilters.split(',') : [];\n}\n\n/**\n * Should the route be excluded\n *\n * @param route\n * @returns {boolean}\n *\n * @private\n */\nexport function isRouteExcluded(route) {\n    const routeFilters = getRouteFilters();\n\n    for (let i = 0, length = routeFilters.length; i < length; i++) {\n        if (new RegExp(routeFilters[i]).test(route)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Is the model router enabled. Enabled by default\n * @returns {boolean}\n *\n * @private\n */\nexport function isModelRouterEnabled() {\n    if (!PathUtils.isBrowser()) {\n        return false;\n    }\n    const modelRouterMetaType = PathUtils.getMetaPropertyValue(MetaProperty.PAGE_MODEL_ROUTER);\n    // Enable the the page model routing by default\n    return !modelRouterMetaType || ROUTER_MODES.DISABLED !== modelRouterMetaType;\n}\n\n/**\n * Fetches the model from the PageModelManager and then dispatches it\n *\n * @fires cq-pagemodel-route-changed\n *\n * @param {string} [path]   - path of the model to be dispatched\n *\n * @private\n */\nexport function dispatchRouteChanged(path) {\n    // Triggering the page model manager to load a new child page model\n    // No need to use a cache as the PageModelManager already does it\n    ModelManagerSerice.getData({path: path}).then(function (model) {\n        PathUtils.dispatchGlobalCustomEvent(EventType.PAGE_MODEL_ROUTE_CHANGED, {\n            detail: {\n                model: model\n            }\n        });\n    });\n}\n\n/**\n * Triggers the PageModelManager to fetch data based on the current route\n *\n * @fires cq-pagemodel-route-changed - with the root page model object\n *\n * @param {string} [url]    - url from which to extract the model path\n *\n * @private\n */\nexport function routeModel(url) {\n    if (!isModelRouterEnabled()) {\n        return;\n    }\n\n    const path = getModelPath(url);\n\n\n    // don't fetch the model\n    // for the root path\n    // or when the route is excluded\n    if (!path || '/' === path || isRouteExcluded(path)) {\n        return;\n    }\n\n    dispatchRouteChanged(path);\n}\n\n// Activate the model router\nif (isModelRouterEnabled()) {\n    // Encapsulate the history.pushState and history.replaceState functions to prefetch the page model for the current route\n    const pushState = window.history.pushState;\n    const replaceState = window.history.replaceState;\n\n    window.history.pushState = function(state, title, url) {\n        routeModel(url);\n\n        return pushState.apply(history, arguments);\n    };\n\n    window.history.replaceState = function(state, title, url) {\n        routeModel(url);\n\n        return replaceState.apply(history, arguments);\n    };\n}\n","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\nimport clone from 'clone';\nimport Constants from \"./Constants\";\nimport { PathUtils } from \"./PathUtils\";\n\n/**\n * The ModelStore is in charge of providing access to the data model. It provides the CRUD operations over the model.\n * To protect the integrity of the data it initially returns immutable data. If needed, you can request a mutable object.\n */\nexport class ModelStore {\n\n    /**\n     * Item wrapper containing information about the item parent\n     *\n     * @typedef {Object} ItemWrapper\n     * @property {string} [key]             - Name of the item\n     * @property {{}} [data]                - Item data\n     * @property {{}} [parent]                - Parent item\n     * @property {string} [parentPath]        - Path of the parent item\n     */\n\n    /**\n     * @param {string} [rootPath]     - Root path of the model\n     * @param {{}} [data]             - Initial model\n     */\n    constructor(rootPath, data) {\n        this.initialize(rootPath, data);\n        this._pageContentDelimiter = [Constants.JCR_CONTENT];\n    }\n\n    /**\n     * Initializes the the ModelManager\n     *\n     * @param {string} rootPath     - Root path of the model\n     * @param {{}} data             - Initial model\n     */\n    initialize(rootPath, data) {\n        if (data) {\n            this._data = data;\n        }\n\n        this._rootPath = rootPath;\n    }\n\n    /**\n     * Returns the current root path\n     *\n     * @return {string}\n     */\n    get rootPath() {\n        return this._rootPath;\n    }\n\n    /**\n     *\n     * @param {string} pagePath - Path of the page\n     *\n     * @return {{}|undefined} - Data of the page\n     * @private\n     */\n    _getPageData(pagePath) {\n        if (!this._data) {\n            return;\n        }\n\n        if ('' === pagePath || pagePath === this._data[Constants.PATH_PROP] || pagePath === this.rootPath) {\n            return this._data;\n        }\n\n        return  this._data[Constants.CHILDREN_PROP] && this._data[Constants.CHILDREN_PROP][pagePath];\n    }\n\n    /**\n     * Retrieves the item and eventually returns the data wrapped with the parent information\n     *\n     * @param {string} path                 - Path of the item\n     * @param {{}} [data=_data]             - Data to be explored\n     * @param {{}} [parent]                 - Parent data\n     * @param {string} [parentPath='']      - Path of the parent data\n     * @return {ItemWrapper}\n     * @private\n     */\n    _findItemData(path, data = this._data, parent = undefined, parentPath = '') {\n        let answer = {\n            parent: parent,\n            parentPath: parentPath\n        };\n\n        let items = data[Constants.ITEMS_PROP];\n\n        if (!items) {\n            return answer;\n        }\n\n        for (let pathKey in items) {\n            if (!items.hasOwnProperty(pathKey)) {\n                continue;\n            }\n\n            let childItem = items[pathKey];\n\n            // Direct child. We reached the leaf\n            if (pathKey === path) {\n                answer.data = items[pathKey];\n                answer.key = pathKey;\n                return answer;\n            } else {\n                // Continue traversing\n                let subPath = PathUtils.subpath(path, pathKey);\n                let pageDelimiter = PathUtils._getStartStrings(subPath, this._pageContentDelimiter);\n                let childParentPath = PathUtils.join([parentPath, pathKey, pageDelimiter]);\n                subPath = PathUtils.trimStrings(subPath, this._pageContentDelimiter);\n\n                if (subPath !== path) {\n                    childItem = this._findItemData(subPath, childItem, childItem, childParentPath);\n\n                    if (childItem) {\n                        return childItem;\n                    }\n                }\n            }\n        }\n\n        return answer;\n    }\n\n    /**\n     * Replaces the data in the given location\n     *\n     * @param {string} path     - Path of the data\n     * @param {{}} newData      - New data to be set\n     */\n    setData(path, newData) {\n        let itemKey = PathUtils.getNodeName(path);\n        let data = this.getData(PathUtils.getParentNodePath(path), false);\n\n        if (data && data[Constants.ITEMS_PROP]) {\n            let localData = clone(newData);\n            data[Constants.ITEMS_PROP][itemKey] = localData.value;\n        }\n    }\n\n    /**\n     * Returns the data for the given path. If no path is provided, it returns the whole data\n     *\n     * @param {string} [path]                   - Path to the data\n     * @param {boolean} [immutable=true]        - Should the returned data be a clone\n     * @return {*}\n     */\n    getData(path, immutable = true) {\n        if (!path && typeof path !== 'string') {\n            return immutable ? clone(this._data) : this._data;\n        }\n\n        // Request for the root path\n        // Returns the full data\n        if (path === this._rootPath || path === this._rootPath + '/' + Constants.JCR_CONTENT) {\n            return immutable? clone(this._data) : this._data;\n        }\n\n        const dataPaths = PathUtils.splitPageContentPaths(path);\n\n        let pageData = this._getPageData(dataPaths.pagePath);\n\n        // If there is no page\n        // or if we are getting the data of a page\n        // return the page data\n        if (!pageData || !dataPaths.itemPath) {\n            return immutable? clone(pageData) : pageData;\n        }\n\n        let result = this._findItemData(dataPaths.itemPath, pageData);\n\n        if (result) {\n            return immutable ? clone(result.data) : result.data;\n        }\n    }\n\n    /**\n     * Insert the provided data at the location of the given path. If no sibling name is provided the data is added at the end of the list\n     *\n     * @param {string} path                     - Path to the data\n     * @param {{}} data                         - Data to be inserted\n     * @param {string} [siblingName]            - Name of the item before or after which to add the data\n     * @param {boolean} [insertBefore=false]    - Should the data be inserted before the sibling\n     */\n    insertData(path, data, siblingName, insertBefore = false) {\n        data = clone(data);\n        // We need to find the parent\n        if (!path) {\n            console.warn(\"No path provided for data:\", data);\n            return;\n        }\n\n        const isItem = PathUtils.isItem(path);\n\n        if (!isItem && this._data[Constants.CHILDREN_PROP]) {\n            // Page data\n            this._data[Constants.CHILDREN_PROP][path] = data;\n            return;\n        }\n\n        // Item data\n        const dataPaths = PathUtils.splitPageContentPaths(path);\n        let pageData = this._getPageData(dataPaths.pagePath);\n        let result = this._findItemData(dataPaths.itemPath, pageData);\n        let parent = result.parent || pageData || this._data;\n        let itemName = PathUtils.getNodeName(dataPaths.itemPath);\n\n        if (parent && parent.hasOwnProperty(Constants.ITEMS_PROP)) {\n            parent[Constants.ITEMS_PROP][itemName] = data;\n\n            if (parent.hasOwnProperty(Constants.ITEMS_ORDER_PROP)) {\n                let index = parent[Constants.ITEMS_ORDER_PROP].indexOf(siblingName);\n\n                if (index > -1) {\n                    parent[Constants.ITEMS_ORDER_PROP].splice(insertBefore ? index : index + 1, 0, itemName);\n                } else {\n                    parent[Constants.ITEMS_ORDER_PROP].push(itemName);\n                }\n            }\n        }\n    }\n\n    /**\n     * Removes the data located at the provided location\n     *\n     * @param {string} path         - Path of the data\n     * @return {string|undefined}   - Path to the parent item initially containing the removed data\n     */\n    removeData(path) {\n        if (!path) {\n            return;\n        }\n\n        const isItem = PathUtils.isItem(path);\n\n        if (!isItem && this._data[Constants.CHILDREN_PROP]) {\n            // Page data\n            delete this._data[Constants.CHILDREN_PROP][path];\n            return;\n        }\n\n        // Item data\n        const dataPaths = PathUtils.splitPageContentPaths(path);\n        let pageData = this._getPageData(dataPaths.pagePath);\n        let result = this._findItemData(dataPaths.itemPath, pageData);\n\n        if (result.data) {\n            if (result && result.parent && result.parent.hasOwnProperty(Constants.ITEMS_PROP)) {\n                let { parent } = result;\n                let itemName = PathUtils.getNodeName(dataPaths.itemPath);\n\n                delete parent[Constants.ITEMS_PROP][itemName];\n                delete result.data;\n                delete result.parent;\n\n                if (parent.hasOwnProperty(Constants.ITEMS_ORDER_PROP)) {\n                    let index = parent[Constants.ITEMS_ORDER_PROP].indexOf(itemName);\n                    parent[Constants.ITEMS_ORDER_PROP].splice(index, 1);\n                }\n\n                return result.parentPath;\n            }\n        } else {\n            console.warn(`Item for path ${path} was not found! Nothing to remove then.`);\n        }\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        this._data = null;\n        this._rootPath = null;\n        this._pageContentDelimiter = null;\n\n        delete this._data;\n        delete this._rootPath;\n        delete this._pageContentDelimiter;\n    }\n}","/*\n * ADOBE CONFIDENTIAL\n *\n * Copyright 2018 Adobe Systems Incorporated\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and may be covered by U.S. and Foreign Patents,\n * patents in process, and are protected by trade secret or copyright law.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n */\nimport Constants from \"./Constants\";\nimport InternalConstants from \"./InternalConstants\";\nimport MetaProperty from \"./MetaProperty\";\n\n/**\n * Regexp used to extract the context path of a location.\n * The context path is extracted by assuming that the location starts with the context path followed by one of the following node names\n */\nconst CONTEXT_PATH_REGEXP = /^(.*)?(?:\\/(?:content|conf|apps|libs|etc)\\/.*)/g;\n\nconst JCR_CONTENT_PATTERN = '(.+)/' + Constants.JCR_CONTENT +'/(.+)';\n\n/**\n * Helper functions related to path manipulation.\n *\n * @namespace PathUtils\n */\nexport class PathUtils {\n\n    /**\n     * Returns if the code executes in the browser context or not by checking for the\n     * existance of the window object\n     *\n     * @returns {Boolean} the result of the check of the existance of the window object\n     */\n    static isBrowser() {\n        try {\n            return typeof window !== 'undefined';\n        }catch(e){\n            return false;\n        }\n    }\n\n    /**\n     * Returns the context path of the given location.\n     * If no location is provided, it fallbacks to the current location.\n     * @param {String} [location] - Location to be used to detect the context path from.\n     * @returns {String}\n     */\n    static getContextPath(location) {\n        location = location || this.getCurrentPathname();\n        if (!location) {\n            return \"\";\n        }\n\n        let matches = CONTEXT_PATH_REGEXP.exec(location);\n        CONTEXT_PATH_REGEXP.lastIndex = 0;\n        if (matches && matches[1]) {\n            return matches[1];\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * Adapts the provided path to a valid model path.\n     * Returns an empty string if the given path is equal to the root model path.\n     * This function is a utility tool that converts a provided root model path into an internal specific empty path\n     *\n     * @param {string} [path]   - raw model path\n     * @return {string} the valid model path\n     *\n     * @private\n     */\n    static adaptPagePath(path, rootPath) {\n        if (!path) {\n            return '';\n        }\n\n        if (!rootPath) {\n            return path;\n        }\n\n        const localPath = PathUtils.internalize(path);\n        const localRootModelPath = PathUtils.sanitize(rootPath);\n\n        return localPath === localRootModelPath ? '' : localPath;\n    }\n\n    /**\n     * Returns the given URL externalized by adding the optional context path\n     *\n     * @param {string} url - URL to externalize\n     * @returns {string}\n     */\n    static externalize(url) {\n        const contextPath = this.getContextPath();\n\n        if (!contextPath || url.startsWith(contextPath)) {\n            return url;\n        }\n\n        return contextPath + url;\n    }\n\n    /**\n     * Returns the given URL internalized by removing the optional context path\n     *\n     * @param {string} url - URL to internalize\n     * @returns {string}\n     */\n    static internalize(url) {\n        if (!url) {\n            return url;\n        }\n\n        const contextPath = this.getContextPath();\n\n        // Does the path starts with a node\n        if (url.startsWith(contextPath.endsWith('/') ? contextPath : contextPath + '/')) {\n            return url.replace(contextPath, \"\");\n        } else {\n            return url;\n        }\n    }\n\n    /**\n     * Returns the value of the meta property with the given key\n     *\n     * @param {string} propertyName  - name of the meta property\n     * @return {string|undefined}\n     */\n    static getMetaPropertyValue(propertyName) {\n        if (this.isBrowser()) {\n            const meta = document.head.querySelector('meta[property=\"' + propertyName + '\"]');\n            return meta && meta.content;\n        }\n    }\n\n    /**\n     * Returns a model path for the given URL\n     *\n     * @param {string} url - Raw URL for which to get a model URL\n     * @return {string|undefined}\n     */\n    static convertToModelUrl(url) {\n        return url && url.replace && url.replace(/\\.htm(l)?$/, InternalConstants.DEFAULT_MODEL_JSON_EXTENSION);\n    }\n\n    /**\n     * Returns the model URL as contained in the current page URL\n     *\n     * @return {string}\n     */\n    static getCurrentPageModelUrl() {\n        // extract the model from the pathname\n        return this.convertToModelUrl(this.getCurrentPathname());\n    }\n\n    /**\n     * Returns the URL of the page model to initialize the page model manager with.\n     * It is either derived from a meta tag property called 'cq:pagemodel_root_url' or from the given location.\n     * If no location is provided, it derives it from the current location.\n     *\n     * @param {String} [url]   - path or URL to be used to derive the page model URL from\n     * @returns {String}\n     */\n    static getModelUrl(url) {\n        // Model path extracted from the given url\n        if (url && url.replace) {\n            return this.convertToModelUrl(url);\n        }\n\n        // model path from the meta property\n        const metaModelUrl = this.getMetaPropertyValue(MetaProperty.PAGE_MODEL_ROOT_URL);\n\n        if (metaModelUrl) {\n            return metaModelUrl;\n        }\n\n        // Model URL extracted from the current page URL\n        return this.getCurrentPageModelUrl();\n    }\n\n    /**\n     * Returns the given path after sanitizing it.\n     * This function should be called on page paths before storing them in the page model,\n     * to make sure only properly formatted paths (e.g., \"/content/mypage\") are stored.\n     * @param {string} path - Path of the page to be sanitized.\n     * @return {string|undefined}\n     */\n    static sanitize(path) {\n        if (!path) {\n            return;\n        }\n\n        // Remove protocol, domain, port and keep only the path\n        path = path.replace(\n            /^[a-z]{4}:\\/{2}[a-z]{1,}:[0-9]{1,4}(\\/.*)/,\n            \"$1\"\n        );\n        // Remove possible selectors\n        let selectorIndex = path.indexOf(\".\");\n        path = selectorIndex > -1 ? path.substr(0, selectorIndex) : path;\n        // Remove possible context path\n        path = this.internalize(path);\n\n        return path;\n    }\n\n    /**\n     * Returns the given path extended with the given extension.\n     * @param {String} path - Path to be extended.\n     * @param {String} extension - Extension to be added.\n     * @returns {String}\n     */\n    static addExtension(path, extension) {\n        if (!extension || extension.length < 1) {\n            return path;\n        }\n\n        if (!extension.startsWith(\".\")) {\n            extension = \".\" + extension;\n        }\n\n        if (!path || path.length < 1 || path.indexOf(extension) > -1) {\n            return path;\n        }\n\n        let extensionPath = path;\n\n        // Groups\n        // 1. the resource\n        // 2. the selectors and the extension\n        // 3. the suffix\n        // 4. the parameters\n        let match = /^((?:[/a-zA-Z0-9:_-]*)+)(?:\\.?)([a-zA-Z0-9._-]*)(?:\\/?)([a-zA-Z0-9/._-]*)(?:\\??)([a-zA-Z0-9=&]*)$/g.exec(\n            path\n        );\n        let queue = \"\";\n\n        if (match && match.length > 2) {\n            // suffix\n            queue = match[3] ? \"/\" + match[3] : \"\";\n            // parameters\n            queue += match[4] ? \"?\" + match[4] : \"\";\n\n            extensionPath =\n                match[1] +\n                \".\" +\n                match[2].replace(/\\.htm(l)?/, extension) +\n                queue;\n        }\n\n        return extensionPath.indexOf(extension) > -1\n            ? extensionPath\n            : extensionPath + extension + queue;\n    }\n\n    /**\n     * Returns the given path extended with the given selector.\n     * @param {String} path - Path to be extended.\n     * @param {String} selector - Selector to be added.\n     * @returns {String}\n     */\n    static addSelector(path, selector) {\n        if (!selector || selector.length < 1) {\n            return path;\n        }\n\n        if (!selector.startsWith(\".\")) {\n            selector = \".\" + selector;\n        }\n\n        if (!path || path.length < 1 || path.indexOf(selector) > -1) {\n            return path;\n        }\n\n        let index = path.indexOf(\".\") || path.length;\n\n        if (index < 0) {\n            return path + selector;\n        }\n\n        return path.slice(0, index) + selector + path.slice(index, path.length);\n    }\n\n    /**\n     * Returns the current location as a string.\n     * @returns {String}\n     */\n    static getCurrentPathname() {\n        return this.isBrowser() ? window.location.pathname : undefined;\n    }\n\n    /**\n     * Dispatches a custom event on the window object, when in the browser context\n     *\n     * @param  {String} eventName - the name of the custom event\n     * @param {Object} options - the custom event options\n     */\n    static dispatchGlobalCustomEvent(eventName, options) {\n        if (this.isBrowser()) {\n            window.dispatchEvent(new CustomEvent(eventName, options));\n        }\n    }\n\n    /**\n     * Joins given path segments into a string using /\n     *\n     * @param paths\n     * @returns {string}\n     */\n    static join (paths) {\n        return paths ? this.normalize(paths.filter((path) => path).join('/')) : \"\";\n    }\n\n    /**\n     * Normalizes given path by replacing repeated / with a single one\n     *\n     * @param {string} path\n     * @returns {string}\n     */\n    static normalize(path) {\n        if (!path) return \"\";\n        return path ? path.replace(/(\\/+)/g, '/') : \"\";\n    }\n\n    /**\n     * Returns path that starts with /\n     *\n     * @param {string} path\n     * @returns {*}\n     */\n    static makeAbsolute(path) {\n        if (!path || (typeof path !== \"string\")) return \"\";\n        return path.startsWith('/') ? path : \"/\" + path;\n    }\n\n    /**\n     * Returns path without the leading /\n     *\n     * @param path\n     * @returns {*}\n     */\n    static makeRelative(path) {\n        if (!path || (typeof path !== \"string\")) return \"\";\n        return path.startsWith('/') ? path.slice(1) : path;\n    }\n\n    /**\n     * Returns path to the direct parent\n     *\n     * @param path\n     * @returns {*|boolean|string}\n     */\n    static getParentNodePath(path) {\n        const splashIndex = path.lastIndexOf('/') + 1;\n        return path && typeof path === 'string' && splashIndex > 0 && splashIndex < path.length && path.substring(0, splashIndex - 1);\n    }\n\n    /**\n     * Checks if given path is an JCR path\n     *\n     * @param path\n     * @returns {boolean}\n     */\n    static isItem(path) {\n        return new RegExp(JCR_CONTENT_PATTERN).test(path);\n    }\n\n    /**\n     * Returns the name of the last node of the given path\n     * @param path\n     * @returns {*|boolean|string}\n     */\n    static getNodeName(path) {\n        const splashIndex = path.lastIndexOf('/') + 1;\n        return path && typeof path === 'string' && splashIndex < path.length && path.substring(splashIndex, path.length);\n    }\n\n    /**\n     * Returns the subpath of the targetPath relative to the rootPath,\n     * or the targetPath if the rootPath is not a root of the targetPath.\n     *\n     * @param targetPath\n     * @param rootPath\n     * @returns {*}\n     */\n    static subpath(targetPath, rootPath) {\n        if (!targetPath) {\n            return \"\";\n        }\n\n        let targetPathChildren = PathUtils.makeRelative(targetPath).split('/');\n        let rootPathChildren = PathUtils.makeRelative(rootPath).split('/');\n\n        if (targetPathChildren.length < rootPathChildren.length) {\n            return targetPath;\n        }\n\n        let index;\n        for(index = 0; index < rootPathChildren.length; ++index) {\n            if (targetPathChildren[index] !== rootPathChildren[index]) {\n                break;\n            }\n        }\n\n        if (index === rootPathChildren.length) {\n            return targetPathChildren.slice(index).join(\"/\");\n        } else {\n            return targetPath;\n        }\n    }\n\n    /**\n     * Returns an array of segments of the path, split by the custom set of delimitators passed as an array.\n     *\n     * @param {string} path\n     * @param {array} delimitators\n     * @returns {*}\n     */\n    static splitByDelimitators(path, delimitators) {\n        let paths = [path];\n        delimitators.forEach((delimitator) => {\n            let newPaths = [];\n            let delim = PathUtils.normalize(PathUtils.makeAbsolute(delimitator) + \"/\");\n            paths.forEach((path) => {\n                newPaths = newPaths.concat(path.split(delim));\n                if (path.endsWith(delimitator)) {\n                    let lastPath = newPaths.splice(newPaths.length-1, 1)[0];\n                    if (lastPath !== delimitator) {\n                        newPaths = newPaths.concat(lastPath.split(PathUtils.makeAbsolute(delimitator)));\n                    }\n                }\n                newPaths = newPaths.filter((path) => path);\n            });\n            paths = newPaths;\n        });\n        return paths;\n    }\n\n    /**\n     * Returns an JCR path based on pagePath and dataPath\n     *\n     * @param pagePath  path to the page\n     * @param dataPath  path to the item on the page\n     * @returns {string}\n     */\n    static _getJCRPath(pagePath, dataPath) {\n        return pagePath + '/' + Constants.JCR_CONTENT + '/' + dataPath;\n    }\n\n    /**\n     * Returns object containing pagePath (path to a page) and, if exists, itemPath (path to the item on that page)\n     * from the passed path\n     *\n     * @param {string} path\n     * @returns {{pagePath}}\n     */\n    static splitPageContentPaths(path) {\n        if (!path && typeof path !== 'string') {\n            return;\n        }\n\n        const splitPaths = path.split('/' + Constants.JCR_CONTENT + '/');\n\n        let split = {\n            pagePath: splitPaths[0]\n        };\n\n        if (splitPaths.length > 1) {\n            split.itemPath = splitPaths[1];\n        }\n\n        return split;\n    }\n\n    /**\n     * Returns path that is no longer prefixed nor suffixed by the set of strings passed as an array\n     *\n     * @param path\n     * @param {array} strings\n     * @returns {*}\n     */\n    static trimStrings(path, strings) {\n        strings.forEach((str) => {\n            while(path.startsWith(str)) {\n                path = PathUtils.makeRelative(path.slice(str.length));\n            }\n\n            while(path.endsWith(str)) {\n                path = path.slice(0, path.length - str.length);\n                if (path.endsWith('/')) {\n                    path = path.slice(0, path.length - 1);\n                }\n            }\n        });\n        return path;\n    }\n\n    static _getStartStrings(path, strings) {\n        let returnStr = \"\";\n        strings.forEach((str) => {\n            while(path.startsWith(str)) {\n                path = PathUtils.makeRelative(path.slice(str.length));\n                returnStr = returnStr + \"/\" + str;\n            }\n        });\n        return PathUtils.makeRelative(returnStr);\n    }\n}","module.exports = require(\"clone\");"],"sourceRoot":""}