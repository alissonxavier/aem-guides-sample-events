(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["cqSpaPageModelManager"] = factory();
	else
		root["cqSpaPageModelManager"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ModelManager = __webpack_require__(/*! ./src/ModelManager */ "./src/ModelManager.js");

Object.defineProperty(exports, "ModelManager", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ModelManager).default;
  }
});

var _ModelClient = __webpack_require__(/*! ./src/ModelClient */ "./src/ModelClient.js");

Object.keys(_ModelClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ModelClient[key];
    }
  });
});

var _PathUtils = __webpack_require__(/*! ./src/PathUtils */ "./src/PathUtils.js");

Object.keys(_PathUtils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _PathUtils[key];
    }
  });
});

var _Constants = __webpack_require__(/*! ./src/Constants */ "./src/Constants.js");

Object.defineProperty(exports, "Constants", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Constants).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

__webpack_require__(/*! ./src/ModelRouter */ "./src/ModelRouter.js");

/***/ }),

/***/ "./src/Constants.js":
/*!**************************!*\
  !*** ./src/Constants.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

/**
 * Useful variables for interacting with CQ/AEM components
 *
 * @namespace Constants
 */
var Constants = {

  /**
   * Type of the item
   *
   * @type {string}
   */
  TYPE_PROP: ':type',

  /**
   * List of child items of an item
   *
   * @type {string}
   */
  ITEMS_PROP: ':items',

  /**
   * Order in which the items should be listed
   *
   * @type {string}
   */
  ITEMS_ORDER_PROP: ':itemsOrder',

  /**
   * Path of an item
   *
   * @type {string}
   */
  PATH_PROP: ':path',

  /**
   * Children of a hierarchical item
   *
   * @type {string}
   */
  CHILDREN_PROP: ':children',

  /**
   * Hierarchical type of the item
   */
  HIERARCHY_TYPE_PROP: ':hierarchyType',

  /**
   * JCR CONTENT Node
   */
  JCR_CONTENT: "jcr:content"
};

exports.default = Constants;

/***/ }),

/***/ "./src/EditorClient.js":
/*!*****************************!*\
  !*** ./src/EditorClient.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EditorClient = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * ADOBE CONFIDENTIAL

opyright 2018 Adobe Systems Incorporated
ll Rights Reserved.

ll information contained herein is, and remains
the property of Adobe Systems Incorporated and its suppliers,
if any.  The intellectual and technical concepts contained
herein are proprietary to Adobe Systems Incorporated and its
suppliers and may be covered by U.S. and Foreign Patents,
patents in process, and are protected by trade secret or copyright law.
issemination of this information or reproduction of this material
is strictly forbidden unless prior written permission is obtained
from Adobe Systems Incorporated.



exports.triggerPageModelLoaded = triggerPageModelLoaded;

var _PathUtils = __webpack_require__(/*! ./PathUtils */ "./src/PathUtils.js");

var _clone = __webpack_require__(/*! clone */ "clone");

var _clone2 = _interopRequireDefault(_clone);

var _EventType = __webpack_require__(/*! ./EventType */ "./src/EventType.js");

var _EventType2 = _interopRequireDefault(_EventType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Broadcast an event to indicate the page model has been loaded
 *
 * @param {{}} model - model item to be added to the broadcast payload
 * @fires cq-pagemodel-loaded
 */
function triggerPageModelLoaded(model) {
    // Deep copy to protect the internal state of the page mode
    _PathUtils.PathUtils.dispatchGlobalCustomEvent(_EventType2.default.PAGE_MODEL_LOADED, {
        detail: {
            model: (0, _clone2.default)(model)
        }
    });
}

/**
 * The EditorClient is responsible for the interactions with the Page Editor.
 */

var EditorClient = exports.EditorClient = function () {
    function EditorClient(ModelManager) {
        var _this = this;

        _classCallCheck(this, EditorClient);

        this._modelManager = ModelManager;

        this._windowListener = function (event) {
            if (!event || !event.detail || !event.detail.msg) {
                console.error('EditorService.js', 'No message passed to cq-pagemodel-update', event);
                return;
            }

            _this._updateModel(event.detail.msg);
        };

        if (_PathUtils.PathUtils.isBrowser()) {
            window.addEventListener(_EventType2.default.PAGE_MODEL_UPDATE, this._windowListener);
        }
    }

    /**
     * Updates the page model with the given data
     *
     * @param {Object} msg - Object containing the data to update the page model
     * @property {String} msg.dataPath - Relative data path in the PageModel which needs to be updated
     * @property {String} msg.pagePath - Absolute page path corresponding to the page in the PageModel which needs to be updated
     * @param {String} msg.cmd - Command Action requested via Editable on the content Node
     * @param {Object} msg.data - Data that needs to be updated in the PageModel at {path}
     *
     * @fires cq-pagemodel-loaded
     *
     * @private
     */


    _createClass(EditorClient, [{
        key: "_updateModel",
        value: function _updateModel(msg) {
            if (!msg || !msg.cmd || !msg.path) {
                console.error('PageModelManager.js', 'Not enough data received to update the page model');
                return;
            }
            // Path in the PageModel which needs to be updated
            var path = msg.path;
            // Command Action requested via Editable on the content Node
            var cmd = msg.cmd;
            // Data that needs to be updated in the page model at the given path
            var data = (0, _clone2.default)(msg.data);

            var siblingName = void 0;
            var itemPath = void 0;
            var insertBefore = void 0;

            switch (cmd) {
                case 'replace':
                    this._modelManager.modelStore.setData(path, data);
                    this._modelManager._notifyListeners(path);
                    break;

                case 'delete':
                    this._modelManager.modelStore.removeData(path);
                    this._modelManager._notifyListeners(_PathUtils.PathUtils.getParentNodePath(path));
                    break;

                case 'insertBefore':
                    insertBefore = true;
                // No break as we want both insert command to be treated the same way
                // eslint-disable-next-line no-fallthrough
                case 'insertAfter':
                    // The logic relative to the item path and sibling between the editor and the ModelManager is reversed
                    // Adapting the command to the ModelManager API
                    siblingName = _PathUtils.PathUtils.getNodeName(path);
                    itemPath = _PathUtils.PathUtils.getParentNodePath(path) + "/" + data.key;
                    this._modelManager._modelStore.insertData(itemPath, data.value, siblingName, insertBefore);
                    this._modelManager._notifyListeners(_PathUtils.PathUtils.getParentNodePath(path));

                    break;

                default:
                    // "replaceContent" command not supported
                    // "moveBefore", "moveAfter" commands not supported.
                    // As instead, we are replacing source and destination parents because they can contain data about the item we want to relocate
                    console.log('EditorClient', 'unsupported command:', cmd);
            }

            triggerPageModelLoaded(this._modelManager.modelStore._data);
        }

        /**
         * @private
         */

    }, {
        key: "destroy",
        value: function destroy() {
            this._modelManager = null;
            delete this._modelManager;

            if (_PathUtils.PathUtils.isBrowser()) {
                window.removeEventListener(_EventType2.default.PAGE_MODEL_UPDATE, this._windowListener);
            }
        }
    }]);

    return EditorClient;
}();

/***/ }),

/***/ "./src/EventType.js":
/*!**************************!*\
  !*** ./src/EventType.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

/**
 * Type of events triggered or listened by the PageModelManager and ModelRouter
 *
 * @type {{PAGE_MODEL_INIT: string, PAGE_MODEL_LOADED: string, PAGE_MODEL_UPDATE: string, PAGE_MODEL_ROUTE_CHANGED: string}}
 */
var EventType = {

  /**
   * Event which indicates that the PageModelManager has been initialized
   */
  PAGE_MODEL_INIT: 'cq-pagemodel-init',

  /**
   * Event which indicates that the PageModelManager has loaded new content
   */
  PAGE_MODEL_LOADED: 'cq-pagemodel-loaded',

  /**
   * Event that indicates a request to update the page model
   */
  PAGE_MODEL_UPDATE: 'cq-pagemodel-update',

  /**
   * Event which indicates that ModelRouter has identified that model route has changed
   */
  PAGE_MODEL_ROUTE_CHANGED: 'cq-pagemodel-route-changed'
};

exports.default = EventType;

/***/ }),

/***/ "./src/InternalConstants.js":
/*!**********************************!*\
  !*** ./src/InternalConstants.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

var DEFAULT_SLING_MODEL_SELECTOR = 'model';

var InternalConstants = {

  DEFAULT_SLING_MODEL_SELECTOR: DEFAULT_SLING_MODEL_SELECTOR,

  DEFAULT_MODEL_JSON_EXTENSION: '.' + DEFAULT_SLING_MODEL_SELECTOR + '.json'
};

exports.default = InternalConstants;

/***/ }),

/***/ "./src/MetaProperty.js":
/*!*****************************!*\
  !*** ./src/MetaProperty.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

/**
 * Names of the meta properties associated with the PageModelProvider and ModelRouter
 *
 * @type {{PAGE_MODEL_ROOT_URL: string, PAGE_MODEL_ROUTE_FILTERS: string, PAGE_MODEL_ROUTER: string}}
 */
var MetaProperty = {

  PAGE_MODEL_ROOT_URL: 'cq:pagemodel_root_url',

  PAGE_MODEL_ROUTE_FILTERS: 'cq:pagemodel_route_filters',

  PAGE_MODEL_ROUTER: 'cq:pagemodel_router'

};

exports.default = MetaProperty;

/***/ }),

/***/ "./src/ModelClient.js":
/*!****************************!*\
  !*** ./src/ModelClient.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

var ModelClient = exports.ModelClient = function () {

    /**
     * @constructor
     * @param {string} [apiHost] - Http host of the API
     */
    function ModelClient(apiHost) {
        _classCallCheck(this, ModelClient);

        this._apiHost = apiHost || '';
        this._fetchPromises = {};
    }

    /**
     * Fetches a model using the given a resource path
     *
     * @param {string} modelPath - Absolute path to the model.
     * @return {*}
     */


    _createClass(ModelClient, [{
        key: 'fetch',
        value: function (_fetch) {
            function fetch(_x) {
                return _fetch.apply(this, arguments);
            }

            fetch.toString = function () {
                return _fetch.toString();
            };

            return fetch;
        }(function (modelPath) {
            if (!modelPath) {
                var err = 'Fetching model rejected for path: ' + modelPath;
                return Promise.reject(new Error(err));
            }

            // Either the API host has been provided or we make an absolute request relative to the current host
            var url = '' + this._apiHost + modelPath;

            // Assure that the default credentials value ('same-origin') is set for browsers which do not set it
            // or which are setting the old default value ('omit')
            return fetch(url, { credentials: 'same-origin' }).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }

                throw { response: response };
            }).catch(function (error) {
                return Promise.reject(error);
            });
        })

        /**
         * Destroys the internal references to avoid memory leaks
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this._apiHost = null;
            this._fetchPromises = null;
        }
    }]);

    return ModelClient;
}();

/***/ }),

/***/ "./src/ModelManager.js":
/*!*****************************!*\
  !*** ./src/ModelManager.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * ADOBE CONFIDENTIAL

opyright 2018 Adobe Systems Incorporated
ll Rights Reserved.

ll information contained herein is, and remains
the property of Adobe Systems Incorporated and its suppliers,
if any.  The intellectual and technical concepts contained
herein are proprietary to Adobe Systems Incorporated and its
suppliers and may be covered by U.S. and Foreign Patents,
patents in process, and are protected by trade secret or copyright law.
issemination of this information or reproduction of this material
is strictly forbidden unless prior written permission is obtained
from Adobe Systems Incorporated.



var _PathUtils = __webpack_require__(/*! ./PathUtils */ "./src/PathUtils.js");

var _Constants = __webpack_require__(/*! ./Constants */ "./src/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _MetaProperty = __webpack_require__(/*! ./MetaProperty */ "./src/MetaProperty.js");

var _MetaProperty2 = _interopRequireDefault(_MetaProperty);

var _EditorClient = __webpack_require__(/*! ./EditorClient */ "./src/EditorClient.js");

var _ModelClient = __webpack_require__(/*! ./ModelClient */ "./src/ModelClient.js");

var _ModelStore = __webpack_require__(/*! ./ModelStore */ "./src/ModelStore.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Does the provided model object contains an entry for the given child path
 *
 * @param {{}} model            - model to be evaluated
 * @param {string} childPath    - path of the child
 * @return {*}
 *
 * @private
 */
function hasChildOfPath(model, childPath) {
    return !!(model && childPath && model[_Constants2.default.CHILDREN_PROP] && model[_Constants2.default.CHILDREN_PROP][_PathUtils.PathUtils.sanitize(childPath)]);
}

/**
 * Does the provided page path correspond to the model root path
 *
 * @param {string} pagePath         - path of the page model
 * @param {string} modelRootPath    - current model root path
 * @return {boolean}
 *
 * @private
 */
function isPageURLRoot(pagePath, modelRootPath) {
    return !pagePath || !modelRootPath || _PathUtils.PathUtils.sanitize(pagePath) === _PathUtils.PathUtils.sanitize(modelRootPath);
}

/**
 * Adapts the provided path to a valid model path.
 * Returns an empty string if the given path is equal to the root model path.
 * This function is a utility tool that converts a provided root model path into an internal specific empty path
 *
 * @param {string} [path]   - raw model path
 * @return {string} the valid model path
 *
 * @private
 */
function adaptPagePath(path) {
    if (!path) {
        return '';
    }

    var localPath = _PathUtils.PathUtils.internalize(path);

    if (!this.modelStore || !this.modelStore.rootPath) {
        return localPath;
    }

    var localRootModelPath = _PathUtils.PathUtils.sanitize(this.modelStore.rootPath);

    return localPath === localRootModelPath ? '' : localPath;
}

/**
 * The ModelManager gathers all the components implicated in managing the model data
 */

var ModelManager = function () {
    function ModelManager() {
        _classCallCheck(this, ModelManager);
    }

    _createClass(ModelManager, [{
        key: "_checkDependencies",


        /**
         * Verifies the integrity of the provided dependencies
         *
         * @return {Promise}
         * @private
         */
        value: function _checkDependencies() {
            if (!this.modelClient) {
                return Promise.reject("No ModelClient registered");
            }

            if (!this.modelStore) {
                return Promise.reject("No ModelManager registered");
            }

            return Promise.resolve();
        }

        /**
         * Transforms the given path into a model URL
         *
         * @param path
         * @return {*}
         * @private
         */

    }, {
        key: "_toModelPath",
        value: function _toModelPath(path) {
            var url = _PathUtils.PathUtils.addSelector(path, 'model');
            url = _PathUtils.PathUtils.addExtension(url, 'json');
            url = _PathUtils.PathUtils.externalize(url);

            return _PathUtils.PathUtils.makeAbsolute(url);
        }

        /**
         * Initializes the ModelManager using the given path to resolve a data model.
         * If no path is provided, fallbacks are applied in the following order:
         *
         * - meta property: cq:pagemodel_root_url
         * - current pathname of the browser
         *
         * Once the initial model is loaded and if the data model doesn't contain the path of the current pathname, the library attempts to fetch a fragment of model.
         *
         * @param {string|InitializationConfig} [config]                - URL to the data model or configuration object
         * @fires cq-pagemodel-loaded
         * @return {Promise}
         */

    }, {
        key: "initialize",
        value: function initialize(config) {
            var _this = this;

            this.destroy();
            var path = void 0;
            var initialModel = void 0;

            if (!config || typeof config === 'string') {
                path = config;
            } else if (config) {
                path = config.path;
                this._modelClient = config.modelClient;
                initialModel = config.model;
            }

            this._listenersMap = {};
            this._fetchPromises = {};
            this._initPromise = null;

            var metaPropertyModelUrl = _PathUtils.PathUtils.internalize(_PathUtils.PathUtils.getMetaPropertyValue(_MetaProperty2.default.PAGE_MODEL_ROOT_URL));
            var currentPathname = _PathUtils.PathUtils.sanitize(_PathUtils.PathUtils.getCurrentPathname());
            // Fetch the app root model
            // 1. consider the provided page path
            // 2. consider the meta property value
            // 3. fallback to the model path contained in the URL
            var rootModelURL = path || metaPropertyModelUrl || currentPathname;

            if (!rootModelURL) {
                console.error('ModelManager.js', 'Cannot initialize without an URL to fetch the root model');
            }

            if (!this._modelClient) {
                this._modelClient = new _ModelClient.ModelClient();
            }

            this._editorClient = new _EditorClient.EditorClient(this);
            this._modelStore = new _ModelStore.ModelStore(rootModelURL, initialModel);

            this._initPromise = this._checkDependencies().then(function () {
                var rootModelPath = _PathUtils.PathUtils.sanitize(rootModelURL);
                var data = _this.modelStore.getData(rootModelPath);

                if (data) {
                    (0, _EditorClient.triggerPageModelLoaded)(data);
                    return data;
                } else {
                    return _this._fetchData(rootModelURL).then(function (rootModel) {
                        _this.modelStore.initialize(rootModelPath, rootModel);
                        // Append the child page if the page model doesn't correspond to the URL of the root model
                        // and if the model root path doesn't already contain the child model (asynchronous page load)
                        if (!isPageURLRoot(currentPathname, metaPropertyModelUrl) && !hasChildOfPath(rootModel, currentPathname)) {
                            return _this._fetchData(currentPathname).then(function (model) {
                                _this.modelStore.insertData(_PathUtils.PathUtils.sanitize(currentPathname), model);
                                var data = _this.modelStore.getData();
                                (0, _EditorClient.triggerPageModelLoaded)(data);
                                return data;
                            });
                        } else {
                            var _data = _this.modelStore.getData();
                            (0, _EditorClient.triggerPageModelLoaded)(_data);
                            return _data;
                        }
                    });
                }
            });

            return this._initPromise;
        }

        /**
         * Fetches a model for the given path
         *
         * @param {string} path - Model path
         * @return {Promise}
         * @private
         */

    }, {
        key: "_fetchData",
        value: function _fetchData(path) {
            var _this2 = this;

            if (this._fetchPromises.hasOwnProperty(path)) {
                return this._fetchPromises[path];
            }

            var promise = this.modelClient.fetch(this._toModelPath(path));

            this._fetchPromises[path] = promise;

            promise.then(function (obj) {
                delete _this2._fetchPromises[path];
                return obj;
            }).catch(function (error) {
                delete _this2._fetchPromises[path];
                return error;
            });

            return promise;
        }
    }, {
        key: "_storeData",
        value: function _storeData(path, data) {
            var isItem = _PathUtils.PathUtils.isItem(path);

            this.modelStore.insertData(path, data);

            // If the path correspond to an item notify either the parent item
            // Otherwise notify the app root
            this._notifyListeners(path);

            if (!isItem) {
                // As we are expecting a page, we notify the root
                this._notifyListeners('');
            }

            return data;
        }

        /**
         * Returns the path of the data model root
         *
         * @return {string}
         */

    }, {
        key: "getData",


        /**
         * Returns the model for the given configuration
         * @param {string|GetDataConfig} [config]     - Either the path of the data model or a configuration object. If no parameter is provided the complete model is returned
         * @return {Promise}
         */
        value: function getData(config) {
            var _this3 = this;

            var path = void 0;
            var forceReload = false;

            if (typeof config === 'string') {
                path = config;
            } else if (config) {
                path = config.path;
                forceReload = config.forceReload;
            }

            var initPromise = this._initPromise || Promise.resolve();

            return initPromise.then(function () {
                return _this3._checkDependencies();
            }).then(function () {
                if (!forceReload) {
                    var item = _this3.modelStore.getData(path);

                    if (item) {
                        return Promise.resolve(item);
                    }
                }

                // We are not having any items
                // We want to reload the item
                return _this3._fetchData(path).then(function (data) {
                    return _this3._storeData(path, data);
                });
            });
        }

        /**
         * Notifies the listeners for a given path
         *
         * @param {string} path - Path of the data model
         * @private
         */

    }, {
        key: "_notifyListeners",
        value: function _notifyListeners(path) {
            path = _PathUtils.PathUtils.adaptPagePath.call(this, path);
            var listenersForPath = this._listenersMap[path];

            if (!listenersForPath) {
                return;
            }

            if (listenersForPath.length) {
                listenersForPath.forEach(function (listener) {
                    try {
                        listener();
                    } catch (e) {
                        console.error('Error in listener ' + listenersForPath + ' at path ' + path + ' : ' + e);
                    }
                });
            }
        }

        /**
         * Add the given callback as a listener for changes at the given path.
         *
         * @param {String}  [path]  Absolute path of the resource (e.g., "/content/mypage"). If not provided, the root page path is used.
         * @param {String}  [callback]  Function to be executed listening to changes at given path
         */

    }, {
        key: "addListener",
        value: function addListener(path, callback) {
            if (!path && typeof path !== 'string') {
                return;
            }

            var adaptedPath = adaptPagePath.call(this, path);

            this._listenersMap[adaptedPath] = this._listenersMap[path] || [];
            this._listenersMap[adaptedPath].push(callback);
        }

        /**
         * Remove the callback listener from the given path path.
         *
         * @param {String}  [path] Absolute path of the resource (e.g., "/content/mypage"). If not provided, the root page path is used.
         * @param {String}  [callback]  Listener function to be removed.
         */

    }, {
        key: "removeListener",
        value: function removeListener(path, callback) {
            if (!path) {
                return;
            }
            var adaptedPath = adaptPagePath.call(this, path);

            var listenersForPath = this._listenersMap[adaptedPath];
            if (listenersForPath) {
                var index = listenersForPath.indexOf(callback);
                if (index !== -1) {
                    listenersForPath.splice(index, 1);
                }
            }
        }

        /**
         * @private
         */

    }, {
        key: "destroy",
        value: function destroy() {
            this._fetchPromises = null;
            delete this._fetchPromises;
            this._listenersMap = null;
            delete this._listenersMap;

            if (this.modelClient && this.modelClient.destroy) {
                this.modelClient.destroy();
            }

            if (this.modelStore && this.modelStore.destroy) {
                this.modelStore.destroy();
            }

            if (this._editorClient && this._editorClient.destroy) {
                this._editorClient.destroy();
            }
        }
    }, {
        key: "modelClient",


        /**
         * Configuration object for the getData function
         *
         * @typedef {{}} GetDataConfig
         * @property {string} path             - Path of the data model
         * @property {boolean} forceReload     - Should the data model be reloaded
         */

        /**
         * Configuration object for the Initialization function
         *
         * @typedef {{}} InitializationConfig
         * @property {string} [path]                   - Path of the data model
         * @property {{}} [model]                      - Model structure to initialize the page model manager with
         * @property {ModelClient} [modelClient]       - Model client
         */

        get: function get() {
            return this._modelClient;
        }
    }, {
        key: "modelStore",
        get: function get() {
            return this._modelStore;
        }
    }, {
        key: "rootPath",
        get: function get() {
            return this.modelStore.rootPath;
        }
    }]);

    return ModelManager;
}();

exports.default = new ModelManager();

/***/ }),

/***/ "./src/ModelRouter.js":
/*!****************************!*\
  !*** ./src/ModelRouter.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ROUTER_MODES = undefined;
exports.getModelPath = getModelPath;
exports.getRouteFilters = getRouteFilters;
exports.isRouteExcluded = isRouteExcluded;
exports.isModelRouterEnabled = isModelRouterEnabled;
exports.dispatchRouteChanged = dispatchRouteChanged;
exports.routeModel = routeModel;

var _EventType = __webpack_require__(/*! ./EventType */ "./src/EventType.js");

var _EventType2 = _interopRequireDefault(_EventType);

var _PathUtils = __webpack_require__(/*! ./PathUtils */ "./src/PathUtils.js");

var _MetaProperty = __webpack_require__(/*! ./MetaProperty */ "./src/MetaProperty.js");

var _MetaProperty2 = _interopRequireDefault(_MetaProperty);

var _ModelManager = __webpack_require__(/*! ./ModelManager */ "./src/ModelManager.js");

var _ModelManager2 = _interopRequireDefault(_ModelManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Triggered by the ModelRouter when the route has changed.
 *
 * @event cq-pagemodel-route-changed
 * @type {Object}
 * @property {Object} detail
 * @property {Object} detail.model - The page model object corresponding to the new route
 */

/**
 * <p>The ModelRouter listens for HTML5 History API <i>popstate</i> events and calls {@link PageModelManager#getData()} with the model path it extracted from the URL.</p>
 *
 * <h2>Configuration</h2>
 *
 * <p>The Model Router can be configured using meta properties located in the head section of the document.</p>
 *
 * <h3>Meta properties</h3>
 * <ul>
 *     <li>cq:page_model_router - default=undefined, options=disable</li>
 *     <li>cq:page_model_route_filters - default=undefined, options=RegExp<></li>
 * </ul>
 *
 * <h3>Defaults</h3>
 * <ul>
 *     <li>The ModelRouter is enabled and uses the <i>History</i> API to extract the model path from the current content path</li>
 * </ul>
 *
 * <h3>Examples and Usages</h3>
 *
 * <h4>Disables the page model router</h4>
 * <pre>
 *     <code>e.g. &lt;meta property="cq:page_model_router" content="disable"\&gt;</code>
 * </pre>
 *
 * <h4>Filters paths from the model routing with the given patterns</h4>
 * <pre>
 *     <code>e.g. &lt;meta property="cq:page_model_route_filters" content="route/not/found,^(.*)(?:exclude/path)(.*)"\&gt;</code>
 * </pre>
 *
 * @module ModelRouter
 */

/**
 * Modes in which the Model Router operates
 *
 * @type {{DISABLED: string, CONTENT_PATH: string}}
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
var ROUTER_MODES = exports.ROUTER_MODES = {

    /**
     * Flag that indicates that the model router should be disabled
     *
     * @type {string}
     */
    DISABLED: 'disabled',

    /**
     * Flag that indicates that the model router should extract the model path from the content path section of the URL
     *
     * @type {string}
     */
    CONTENT_PATH: 'path'
};

/**
 * Returns the model path. If no URL is provided the current window URL is used
 *
 * @param {string} [url]    - url from which to extract the model path
 *
 * @return {string}
 */
function getModelPath(url) {
    var localUrl = void 0;

    localUrl = url || window.location.pathname;

    // The default value model path comes as the the content path
    var endPosition = localUrl.indexOf('.');

    if (endPosition < 0) {
        endPosition = localUrl.length;
    }

    return localUrl.substr(0, endPosition);
}

/**
 * Returns the list of provided route filters
 *
 * @returns {string[]}
 *
 * @private
 */
function getRouteFilters() {
    var routeFilters = _PathUtils.PathUtils.getMetaPropertyValue(_MetaProperty2.default.PAGE_MODEL_ROUTE_FILTERS);
    return routeFilters ? routeFilters.split(',') : [];
}

/**
 * Should the route be excluded
 *
 * @param route
 * @returns {boolean}
 *
 * @private
 */
function isRouteExcluded(route) {
    var routeFilters = getRouteFilters();

    for (var i = 0, length = routeFilters.length; i < length; i++) {
        if (new RegExp(routeFilters[i]).test(route)) {
            return true;
        }
    }

    return false;
}

/**
 * Is the model router enabled. Enabled by default
 * @returns {boolean}
 *
 * @private
 */
function isModelRouterEnabled() {
    if (!_PathUtils.PathUtils.isBrowser()) {
        return false;
    }
    var modelRouterMetaType = _PathUtils.PathUtils.getMetaPropertyValue(_MetaProperty2.default.PAGE_MODEL_ROUTER);
    // Enable the the page model routing by default
    return !modelRouterMetaType || ROUTER_MODES.DISABLED !== modelRouterMetaType;
}

/**
 * Fetches the model from the PageModelManager and then dispatches it
 *
 * @fires cq-pagemodel-route-changed
 *
 * @param {string} [path]   - path of the model to be dispatched
 *
 * @private
 */
function dispatchRouteChanged(path) {
    // Triggering the page model manager to load a new child page model
    // No need to use a cache as the PageModelManager already does it
    _ModelManager2.default.getData({ path: path }).then(function (model) {
        _PathUtils.PathUtils.dispatchGlobalCustomEvent(_EventType2.default.PAGE_MODEL_ROUTE_CHANGED, {
            detail: {
                model: model
            }
        });
    });
}

/**
 * Triggers the PageModelManager to fetch data based on the current route
 *
 * @fires cq-pagemodel-route-changed - with the root page model object
 *
 * @param {string} [url]    - url from which to extract the model path
 *
 * @private
 */
function routeModel(url) {
    if (!isModelRouterEnabled()) {
        return;
    }

    var path = getModelPath(url);

    // don't fetch the model
    // for the root path
    // or when the route is excluded
    if (!path || '/' === path || isRouteExcluded(path)) {
        return;
    }

    dispatchRouteChanged(path);
}

// Activate the model router
if (isModelRouterEnabled()) {
    // Encapsulate the history.pushState and history.replaceState functions to prefetch the page model for the current route
    var pushState = window.history.pushState;
    var replaceState = window.history.replaceState;

    window.history.pushState = function (state, title, url) {
        routeModel(url);

        return pushState.apply(history, arguments);
    };

    window.history.replaceState = function (state, title, url) {
        routeModel(url);

        return replaceState.apply(history, arguments);
    };
}

/***/ }),

/***/ "./src/ModelStore.js":
/*!***************************!*\
  !*** ./src/ModelStore.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModelStore = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * ADOBE CONFIDENTIAL

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright 2018 Adobe Systems Incorporated
ll Rights Reserved.

ll information contained herein is, and remains
the property of Adobe Systems Incorporated and its suppliers,
if any.  The intellectual and technical concepts contained
herein are proprietary to Adobe Systems Incorporated and its
suppliers and may be covered by U.S. and Foreign Patents,
patents in process, and are protected by trade secret or copyright law.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Dissemination of this information or reproduction of this material
is strictly forbidden unless prior written permission is obtained
from Adobe Systems Incorporated.



var _clone = __webpack_require__(/*! clone */ "clone");

var _clone2 = _interopRequireDefault(_clone);

var _Constants = __webpack_require__(/*! ./Constants */ "./src/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _PathUtils = __webpack_require__(/*! ./PathUtils */ "./src/PathUtils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The ModelStore is in charge of providing access to the data model. It provides the CRUD operations over the model.
 * To protect the integrity of the data it initially returns immutable data. If needed, you can request a mutable object.
 */
var ModelStore = exports.ModelStore = function () {

    /**
     * Item wrapper containing information about the item parent
     *
     * @typedef {Object} ItemWrapper
     * @property {string} [key]             - Name of the item
     * @property {{}} [data]                - Item data
     * @property {{}} [parent]                - Parent item
     * @property {string} [parentPath]        - Path of the parent item
     */

    /**
     * @param {string} [rootPath]     - Root path of the model
     * @param {{}} [data]             - Initial model
     */
    function ModelStore(rootPath, data) {
        _classCallCheck(this, ModelStore);

        this.initialize(rootPath, data);
        this._pageContentDelimiter = [_Constants2.default.JCR_CONTENT];
    }

    /**
     * Initializes the the ModelManager
     *
     * @param {string} rootPath     - Root path of the model
     * @param {{}} data             - Initial model
     */


    _createClass(ModelStore, [{
        key: "initialize",
        value: function initialize(rootPath, data) {
            if (data) {
                this._data = data;
            }

            this._rootPath = rootPath;
        }

        /**
         * Returns the current root path
         *
         * @return {string}
         */

    }, {
        key: "_getPageData",


        /**
         *
         * @param {string} pagePath - Path of the page
         *
         * @return {{}|undefined} - Data of the page
         * @private
         */
        value: function _getPageData(pagePath) {
            if (!this._data) {
                return;
            }

            if ('' === pagePath || pagePath === this._data[_Constants2.default.PATH_PROP] || pagePath === this.rootPath) {
                return this._data;
            }

            return this._data[_Constants2.default.CHILDREN_PROP] && this._data[_Constants2.default.CHILDREN_PROP][pagePath];
        }

        /**
         * Retrieves the item and eventually returns the data wrapped with the parent information
         *
         * @param {string} path                 - Path of the item
         * @param {{}} [data=_data]             - Data to be explored
         * @param {{}} [parent]                 - Parent data
         * @param {string} [parentPath='']      - Path of the parent data
         * @return {ItemWrapper}
         * @private
         */

    }, {
        key: "_findItemData",
        value: function _findItemData(path) {
            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._data;
            var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

            var answer = {
                parent: parent,
                parentPath: parentPath
            };

            var items = data[_Constants2.default.ITEMS_PROP];

            if (!items) {
                return answer;
            }

            for (var pathKey in items) {
                if (!items.hasOwnProperty(pathKey)) {
                    continue;
                }

                var childItem = items[pathKey];

                // Direct child. We reached the leaf
                if (pathKey === path) {
                    answer.data = items[pathKey];
                    answer.key = pathKey;
                    return answer;
                } else {
                    // Continue traversing
                    var subPath = _PathUtils.PathUtils.subpath(path, pathKey);
                    var pageDelimiter = _PathUtils.PathUtils._getStartStrings(subPath, this._pageContentDelimiter);
                    var childParentPath = _PathUtils.PathUtils.join([parentPath, pathKey, pageDelimiter]);
                    subPath = _PathUtils.PathUtils.trimStrings(subPath, this._pageContentDelimiter);

                    if (subPath !== path) {
                        childItem = this._findItemData(subPath, childItem, childItem, childParentPath);

                        if (childItem) {
                            return childItem;
                        }
                    }
                }
            }

            return answer;
        }

        /**
         * Replaces the data in the given location
         *
         * @param {string} path     - Path of the data
         * @param {{}} newData      - New data to be set
         */

    }, {
        key: "setData",
        value: function setData(path, newData) {
            var itemKey = _PathUtils.PathUtils.getNodeName(path);
            var data = this.getData(_PathUtils.PathUtils.getParentNodePath(path), false);

            if (data && data[_Constants2.default.ITEMS_PROP]) {
                var localData = (0, _clone2.default)(newData);
                data[_Constants2.default.ITEMS_PROP][itemKey] = localData.value;
            }
        }

        /**
         * Returns the data for the given path. If no path is provided, it returns the whole data
         *
         * @param {string} [path]                   - Path to the data
         * @param {boolean} [immutable=true]        - Should the returned data be a clone
         * @return {*}
         */

    }, {
        key: "getData",
        value: function getData(path) {
            var immutable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (!path && typeof path !== 'string') {
                return immutable ? (0, _clone2.default)(this._data) : this._data;
            }

            // Request for the root path
            // Returns the full data
            if (path === this._rootPath || path === this._rootPath + '/' + _Constants2.default.JCR_CONTENT) {
                return immutable ? (0, _clone2.default)(this._data) : this._data;
            }

            var dataPaths = _PathUtils.PathUtils.splitPageContentPaths(path);

            var pageData = this._getPageData(dataPaths.pagePath);

            // If there is no page
            // or if we are getting the data of a page
            // return the page data
            if (!pageData || !dataPaths.itemPath) {
                return immutable ? (0, _clone2.default)(pageData) : pageData;
            }

            var result = this._findItemData(dataPaths.itemPath, pageData);

            if (result) {
                return immutable ? (0, _clone2.default)(result.data) : result.data;
            }
        }

        /**
         * Insert the provided data at the location of the given path. If no sibling name is provided the data is added at the end of the list
         *
         * @param {string} path                     - Path to the data
         * @param {{}} data                         - Data to be inserted
         * @param {string} [siblingName]            - Name of the item before or after which to add the data
         * @param {boolean} [insertBefore=false]    - Should the data be inserted before the sibling
         */

    }, {
        key: "insertData",
        value: function insertData(path, data, siblingName) {
            var insertBefore = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            data = (0, _clone2.default)(data);
            // We need to find the parent
            if (!path) {
                console.warn("No path provided for data:", data);
                return;
            }

            var isItem = _PathUtils.PathUtils.isItem(path);

            if (!isItem && this._data[_Constants2.default.CHILDREN_PROP]) {
                // Page data
                this._data[_Constants2.default.CHILDREN_PROP][path] = data;
                return;
            }

            // Item data
            var dataPaths = _PathUtils.PathUtils.splitPageContentPaths(path);
            var pageData = this._getPageData(dataPaths.pagePath);
            var result = this._findItemData(dataPaths.itemPath, pageData);
            var parent = result.parent || pageData || this._data;
            var itemName = _PathUtils.PathUtils.getNodeName(dataPaths.itemPath);

            if (parent && parent.hasOwnProperty(_Constants2.default.ITEMS_PROP)) {
                parent[_Constants2.default.ITEMS_PROP][itemName] = data;

                if (parent.hasOwnProperty(_Constants2.default.ITEMS_ORDER_PROP)) {
                    var index = parent[_Constants2.default.ITEMS_ORDER_PROP].indexOf(siblingName);

                    if (index > -1) {
                        parent[_Constants2.default.ITEMS_ORDER_PROP].splice(insertBefore ? index : index + 1, 0, itemName);
                    } else {
                        parent[_Constants2.default.ITEMS_ORDER_PROP].push(itemName);
                    }
                }
            }
        }

        /**
         * Removes the data located at the provided location
         *
         * @param {string} path         - Path of the data
         * @return {string|undefined}   - Path to the parent item initially containing the removed data
         */

    }, {
        key: "removeData",
        value: function removeData(path) {
            if (!path) {
                return;
            }

            var isItem = _PathUtils.PathUtils.isItem(path);

            if (!isItem && this._data[_Constants2.default.CHILDREN_PROP]) {
                // Page data
                delete this._data[_Constants2.default.CHILDREN_PROP][path];
                return;
            }

            // Item data
            var dataPaths = _PathUtils.PathUtils.splitPageContentPaths(path);
            var pageData = this._getPageData(dataPaths.pagePath);
            var result = this._findItemData(dataPaths.itemPath, pageData);

            if (result.data) {
                if (result && result.parent && result.parent.hasOwnProperty(_Constants2.default.ITEMS_PROP)) {
                    var parent = result.parent;

                    var itemName = _PathUtils.PathUtils.getNodeName(dataPaths.itemPath);

                    delete parent[_Constants2.default.ITEMS_PROP][itemName];
                    delete result.data;
                    delete result.parent;

                    if (parent.hasOwnProperty(_Constants2.default.ITEMS_ORDER_PROP)) {
                        var index = parent[_Constants2.default.ITEMS_ORDER_PROP].indexOf(itemName);
                        parent[_Constants2.default.ITEMS_ORDER_PROP].splice(index, 1);
                    }

                    return result.parentPath;
                }
            } else {
                console.warn("Item for path " + path + " was not found! Nothing to remove then.");
            }
        }

        /**
         * @private
         */

    }, {
        key: "destroy",
        value: function destroy() {
            this._data = null;
            this._rootPath = null;
            this._pageContentDelimiter = null;

            delete this._data;
            delete this._rootPath;
            delete this._pageContentDelimiter;
        }
    }, {
        key: "rootPath",
        get: function get() {
            return this._rootPath;
        }
    }]);

    return ModelStore;
}();

/***/ }),

/***/ "./src/PathUtils.js":
/*!**************************!*\
  !*** ./src/PathUtils.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PathUtils = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * ADOBE CONFIDENTIAL

opyright 2018 Adobe Systems Incorporated
ll Rights Reserved.

ll information contained herein is, and remains
the property of Adobe Systems Incorporated and its suppliers,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * if any.  The intellectual and technical concepts contained
herein are proprietary to Adobe Systems Incorporated and its
suppliers and may be covered by U.S. and Foreign Patents,
patents in process, and are protected by trade secret or copyright law.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Dissemination of this information or reproduction of this material
is strictly forbidden unless prior written permission is obtained
from Adobe Systems Incorporated.



var _Constants = __webpack_require__(/*! ./Constants */ "./src/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _InternalConstants = __webpack_require__(/*! ./InternalConstants */ "./src/InternalConstants.js");

var _InternalConstants2 = _interopRequireDefault(_InternalConstants);

var _MetaProperty = __webpack_require__(/*! ./MetaProperty */ "./src/MetaProperty.js");

var _MetaProperty2 = _interopRequireDefault(_MetaProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Regexp used to extract the context path of a location.
 * The context path is extracted by assuming that the location starts with the context path followed by one of the following node names
 */
var CONTEXT_PATH_REGEXP = /^(.*)?(?:\/(?:content|conf|apps|libs|etc)\/.*)/g;

var JCR_CONTENT_PATTERN = '(.+)/' + _Constants2.default.JCR_CONTENT + '/(.+)';

/**
 * Helper functions related to path manipulation.
 *
 * @namespace PathUtils
 */

var PathUtils = exports.PathUtils = function () {
    function PathUtils() {
        _classCallCheck(this, PathUtils);
    }

    _createClass(PathUtils, null, [{
        key: "isBrowser",


        /**
         * Returns if the code executes in the browser context or not by checking for the
         * existance of the window object
         *
         * @returns {Boolean} the result of the check of the existance of the window object
         */
        value: function isBrowser() {
            try {
                return typeof window !== 'undefined';
            } catch (e) {
                return false;
            }
        }

        /**
         * Returns the context path of the given location.
         * If no location is provided, it fallbacks to the current location.
         * @param {String} [location] - Location to be used to detect the context path from.
         * @returns {String}
         */

    }, {
        key: "getContextPath",
        value: function getContextPath(location) {
            location = location || this.getCurrentPathname();
            if (!location) {
                return "";
            }

            var matches = CONTEXT_PATH_REGEXP.exec(location);
            CONTEXT_PATH_REGEXP.lastIndex = 0;
            if (matches && matches[1]) {
                return matches[1];
            } else {
                return "";
            }
        }

        /**
         * Adapts the provided path to a valid model path.
         * Returns an empty string if the given path is equal to the root model path.
         * This function is a utility tool that converts a provided root model path into an internal specific empty path
         *
         * @param {string} [path]   - raw model path
         * @return {string} the valid model path
         *
         * @private
         */

    }, {
        key: "adaptPagePath",
        value: function adaptPagePath(path, rootPath) {
            if (!path) {
                return '';
            }

            if (!rootPath) {
                return path;
            }

            var localPath = PathUtils.internalize(path);
            var localRootModelPath = PathUtils.sanitize(rootPath);

            return localPath === localRootModelPath ? '' : localPath;
        }

        /**
         * Returns the given URL externalized by adding the optional context path
         *
         * @param {string} url - URL to externalize
         * @returns {string}
         */

    }, {
        key: "externalize",
        value: function externalize(url) {
            var contextPath = this.getContextPath();

            if (!contextPath || url.startsWith(contextPath)) {
                return url;
            }

            return contextPath + url;
        }

        /**
         * Returns the given URL internalized by removing the optional context path
         *
         * @param {string} url - URL to internalize
         * @returns {string}
         */

    }, {
        key: "internalize",
        value: function internalize(url) {
            if (!url) {
                return url;
            }

            var contextPath = this.getContextPath();

            // Does the path starts with a node
            if (url.startsWith(contextPath.endsWith('/') ? contextPath : contextPath + '/')) {
                return url.replace(contextPath, "");
            } else {
                return url;
            }
        }

        /**
         * Returns the value of the meta property with the given key
         *
         * @param {string} propertyName  - name of the meta property
         * @return {string|undefined}
         */

    }, {
        key: "getMetaPropertyValue",
        value: function getMetaPropertyValue(propertyName) {
            if (this.isBrowser()) {
                var meta = document.head.querySelector('meta[property="' + propertyName + '"]');
                return meta && meta.content;
            }
        }

        /**
         * Returns a model path for the given URL
         *
         * @param {string} url - Raw URL for which to get a model URL
         * @return {string|undefined}
         */

    }, {
        key: "convertToModelUrl",
        value: function convertToModelUrl(url) {
            return url && url.replace && url.replace(/\.htm(l)?$/, _InternalConstants2.default.DEFAULT_MODEL_JSON_EXTENSION);
        }

        /**
         * Returns the model URL as contained in the current page URL
         *
         * @return {string}
         */

    }, {
        key: "getCurrentPageModelUrl",
        value: function getCurrentPageModelUrl() {
            // extract the model from the pathname
            return this.convertToModelUrl(this.getCurrentPathname());
        }

        /**
         * Returns the URL of the page model to initialize the page model manager with.
         * It is either derived from a meta tag property called 'cq:pagemodel_root_url' or from the given location.
         * If no location is provided, it derives it from the current location.
         *
         * @param {String} [url]   - path or URL to be used to derive the page model URL from
         * @returns {String}
         */

    }, {
        key: "getModelUrl",
        value: function getModelUrl(url) {
            // Model path extracted from the given url
            if (url && url.replace) {
                return this.convertToModelUrl(url);
            }

            // model path from the meta property
            var metaModelUrl = this.getMetaPropertyValue(_MetaProperty2.default.PAGE_MODEL_ROOT_URL);

            if (metaModelUrl) {
                return metaModelUrl;
            }

            // Model URL extracted from the current page URL
            return this.getCurrentPageModelUrl();
        }

        /**
         * Returns the given path after sanitizing it.
         * This function should be called on page paths before storing them in the page model,
         * to make sure only properly formatted paths (e.g., "/content/mypage") are stored.
         * @param {string} path - Path of the page to be sanitized.
         * @return {string|undefined}
         */

    }, {
        key: "sanitize",
        value: function sanitize(path) {
            if (!path) {
                return;
            }

            // Remove protocol, domain, port and keep only the path
            path = path.replace(/^[a-z]{4}:\/{2}[a-z]{1,}:[0-9]{1,4}(\/.*)/, "$1");
            // Remove possible selectors
            var selectorIndex = path.indexOf(".");
            path = selectorIndex > -1 ? path.substr(0, selectorIndex) : path;
            // Remove possible context path
            path = this.internalize(path);

            return path;
        }

        /**
         * Returns the given path extended with the given extension.
         * @param {String} path - Path to be extended.
         * @param {String} extension - Extension to be added.
         * @returns {String}
         */

    }, {
        key: "addExtension",
        value: function addExtension(path, extension) {
            if (!extension || extension.length < 1) {
                return path;
            }

            if (!extension.startsWith(".")) {
                extension = "." + extension;
            }

            if (!path || path.length < 1 || path.indexOf(extension) > -1) {
                return path;
            }

            var extensionPath = path;

            // Groups
            // 1. the resource
            // 2. the selectors and the extension
            // 3. the suffix
            // 4. the parameters
            var match = /^((?:[/a-zA-Z0-9:_-]*)+)(?:\.?)([a-zA-Z0-9._-]*)(?:\/?)([a-zA-Z0-9/._-]*)(?:\??)([a-zA-Z0-9=&]*)$/g.exec(path);
            var queue = "";

            if (match && match.length > 2) {
                // suffix
                queue = match[3] ? "/" + match[3] : "";
                // parameters
                queue += match[4] ? "?" + match[4] : "";

                extensionPath = match[1] + "." + match[2].replace(/\.htm(l)?/, extension) + queue;
            }

            return extensionPath.indexOf(extension) > -1 ? extensionPath : extensionPath + extension + queue;
        }

        /**
         * Returns the given path extended with the given selector.
         * @param {String} path - Path to be extended.
         * @param {String} selector - Selector to be added.
         * @returns {String}
         */

    }, {
        key: "addSelector",
        value: function addSelector(path, selector) {
            if (!selector || selector.length < 1) {
                return path;
            }

            if (!selector.startsWith(".")) {
                selector = "." + selector;
            }

            if (!path || path.length < 1 || path.indexOf(selector) > -1) {
                return path;
            }

            var index = path.indexOf(".") || path.length;

            if (index < 0) {
                return path + selector;
            }

            return path.slice(0, index) + selector + path.slice(index, path.length);
        }

        /**
         * Returns the current location as a string.
         * @returns {String}
         */

    }, {
        key: "getCurrentPathname",
        value: function getCurrentPathname() {
            return this.isBrowser() ? window.location.pathname : undefined;
        }

        /**
         * Dispatches a custom event on the window object, when in the browser context
         *
         * @param  {String} eventName - the name of the custom event
         * @param {Object} options - the custom event options
         */

    }, {
        key: "dispatchGlobalCustomEvent",
        value: function dispatchGlobalCustomEvent(eventName, options) {
            if (this.isBrowser()) {
                window.dispatchEvent(new CustomEvent(eventName, options));
            }
        }

        /**
         * Joins given path segments into a string using /
         *
         * @param paths
         * @returns {string}
         */

    }, {
        key: "join",
        value: function join(paths) {
            return paths ? this.normalize(paths.filter(function (path) {
                return path;
            }).join('/')) : "";
        }

        /**
         * Normalizes given path by replacing repeated / with a single one
         *
         * @param {string} path
         * @returns {string}
         */

    }, {
        key: "normalize",
        value: function normalize(path) {
            if (!path) return "";
            return path ? path.replace(/(\/+)/g, '/') : "";
        }

        /**
         * Returns path that starts with /
         *
         * @param {string} path
         * @returns {*}
         */

    }, {
        key: "makeAbsolute",
        value: function makeAbsolute(path) {
            if (!path || typeof path !== "string") return "";
            return path.startsWith('/') ? path : "/" + path;
        }

        /**
         * Returns path without the leading /
         *
         * @param path
         * @returns {*}
         */

    }, {
        key: "makeRelative",
        value: function makeRelative(path) {
            if (!path || typeof path !== "string") return "";
            return path.startsWith('/') ? path.slice(1) : path;
        }

        /**
         * Returns path to the direct parent
         *
         * @param path
         * @returns {*|boolean|string}
         */

    }, {
        key: "getParentNodePath",
        value: function getParentNodePath(path) {
            var splashIndex = path.lastIndexOf('/') + 1;
            return path && typeof path === 'string' && splashIndex > 0 && splashIndex < path.length && path.substring(0, splashIndex - 1);
        }

        /**
         * Checks if given path is an JCR path
         *
         * @param path
         * @returns {boolean}
         */

    }, {
        key: "isItem",
        value: function isItem(path) {
            return new RegExp(JCR_CONTENT_PATTERN).test(path);
        }

        /**
         * Returns the name of the last node of the given path
         * @param path
         * @returns {*|boolean|string}
         */

    }, {
        key: "getNodeName",
        value: function getNodeName(path) {
            var splashIndex = path.lastIndexOf('/') + 1;
            return path && typeof path === 'string' && splashIndex < path.length && path.substring(splashIndex, path.length);
        }

        /**
         * Returns the subpath of the targetPath relative to the rootPath,
         * or the targetPath if the rootPath is not a root of the targetPath.
         *
         * @param targetPath
         * @param rootPath
         * @returns {*}
         */

    }, {
        key: "subpath",
        value: function subpath(targetPath, rootPath) {
            if (!targetPath) {
                return "";
            }

            var targetPathChildren = PathUtils.makeRelative(targetPath).split('/');
            var rootPathChildren = PathUtils.makeRelative(rootPath).split('/');

            if (targetPathChildren.length < rootPathChildren.length) {
                return targetPath;
            }

            var index = void 0;
            for (index = 0; index < rootPathChildren.length; ++index) {
                if (targetPathChildren[index] !== rootPathChildren[index]) {
                    break;
                }
            }

            if (index === rootPathChildren.length) {
                return targetPathChildren.slice(index).join("/");
            } else {
                return targetPath;
            }
        }

        /**
         * Returns an array of segments of the path, split by the custom set of delimitators passed as an array.
         *
         * @param {string} path
         * @param {array} delimitators
         * @returns {*}
         */

    }, {
        key: "splitByDelimitators",
        value: function splitByDelimitators(path, delimitators) {
            var paths = [path];
            delimitators.forEach(function (delimitator) {
                var newPaths = [];
                var delim = PathUtils.normalize(PathUtils.makeAbsolute(delimitator) + "/");
                paths.forEach(function (path) {
                    newPaths = newPaths.concat(path.split(delim));
                    if (path.endsWith(delimitator)) {
                        var lastPath = newPaths.splice(newPaths.length - 1, 1)[0];
                        if (lastPath !== delimitator) {
                            newPaths = newPaths.concat(lastPath.split(PathUtils.makeAbsolute(delimitator)));
                        }
                    }
                    newPaths = newPaths.filter(function (path) {
                        return path;
                    });
                });
                paths = newPaths;
            });
            return paths;
        }

        /**
         * Returns an JCR path based on pagePath and dataPath
         *
         * @param pagePath  path to the page
         * @param dataPath  path to the item on the page
         * @returns {string}
         */

    }, {
        key: "_getJCRPath",
        value: function _getJCRPath(pagePath, dataPath) {
            return pagePath + '/' + _Constants2.default.JCR_CONTENT + '/' + dataPath;
        }

        /**
         * Returns object containing pagePath (path to a page) and, if exists, itemPath (path to the item on that page)
         * from the passed path
         *
         * @param {string} path
         * @returns {{pagePath}}
         */

    }, {
        key: "splitPageContentPaths",
        value: function splitPageContentPaths(path) {
            if (!path && typeof path !== 'string') {
                return;
            }

            var splitPaths = path.split('/' + _Constants2.default.JCR_CONTENT + '/');

            var split = {
                pagePath: splitPaths[0]
            };

            if (splitPaths.length > 1) {
                split.itemPath = splitPaths[1];
            }

            return split;
        }

        /**
         * Returns path that is no longer prefixed nor suffixed by the set of strings passed as an array
         *
         * @param path
         * @param {array} strings
         * @returns {*}
         */

    }, {
        key: "trimStrings",
        value: function trimStrings(path, strings) {
            strings.forEach(function (str) {
                while (path.startsWith(str)) {
                    path = PathUtils.makeRelative(path.slice(str.length));
                }

                while (path.endsWith(str)) {
                    path = path.slice(0, path.length - str.length);
                    if (path.endsWith('/')) {
                        path = path.slice(0, path.length - 1);
                    }
                }
            });
            return path;
        }
    }, {
        key: "_getStartStrings",
        value: function _getStartStrings(path, strings) {
            var returnStr = "";
            strings.forEach(function (str) {
                while (path.startsWith(str)) {
                    path = PathUtils.makeRelative(path.slice(str.length));
                    returnStr = returnStr + "/" + str;
                }
            });
            return PathUtils.makeRelative(returnStr);
        }
    }]);

    return PathUtils;
}();

/***/ }),

/***/ "clone":
/*!************************!*\
  !*** external "clone" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("clone");

/***/ })

/******/ });
});
//# sourceMappingURL=cq-spa-page-model-manager.js.map