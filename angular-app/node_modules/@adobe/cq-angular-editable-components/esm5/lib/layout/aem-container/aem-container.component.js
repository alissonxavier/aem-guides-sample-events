/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
import { Component, Input } from '@angular/core';
import { Constants } from '../constants';
import { Utils } from "../utils";
var /** @type {?} */ PLACEHOLDER_CLASS_NAMES = Constants.NEW_SECTION_CLASS_NAMES;
var /** @type {?} */ PLACEHOLDER_ITEM_NAME = '*';
var /** @type {?} */ CONTAINER_CLASS_NAMES = 'aem-container';
var AEMContainerComponent = /** @class */ (function () {
    function AEMContainerComponent() {
        /**
         * Path to the model associated with the current instance of the component
         */
        this.cqPath = '';
        /**
         * Key of the model structure
         */
        this.modelName = '';
    }
    Object.defineProperty(AEMContainerComponent.prototype, "isInEditMode", {
        /**
         * Returns weather of not we are in the editor
         */
        get: /**
         * Returns weather of not we are in the editor
         * @return {?}
         */
        function () {
            return Utils.isInEditor();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param path - the provided path to aggregate with the container path
     */
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    AEMContainerComponent.prototype.getDataPath = /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    function (path) {
        return this.cqPath ? this.cqPath + '/' + path : path;
    };
    /**
     * Returns the item data from the cqModel
     *
     * @param itemKey - the itemKey to look for in the items.
     */
    /**
     * Returns the item data from the cqModel
     *
     * @param {?} itemKey - the itemKey to look for in the items.
     * @return {?}
     */
    AEMContainerComponent.prototype.getItem = /**
     * Returns the item data from the cqModel
     *
     * @param {?} itemKey - the itemKey to look for in the items.
     * @return {?}
     */
    function (itemKey) {
        return this.cqItems && this.cqItems[itemKey];
    };
    /**
     * Returns the class names of the container based on the data from the cqModel
     */
    /**
     * Returns the class names of the container based on the data from the cqModel
     * @return {?}
     */
    AEMContainerComponent.prototype.getHostClassNames = /**
     * Returns the class names of the container based on the data from the cqModel
     * @return {?}
     */
    function () {
        return CONTAINER_CLASS_NAMES;
    };
    Object.defineProperty(AEMContainerComponent.prototype, "hostClasses", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getHostClassNames();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the placeholder classes
     */
    /**
     * Returns the placeholder classes
     * @return {?}
     */
    AEMContainerComponent.prototype.getPlaceholderClassNames = /**
     * Returns the placeholder classes
     * @return {?}
     */
    function () {
        return PLACEHOLDER_CLASS_NAMES;
    };
    Object.defineProperty(AEMContainerComponent.prototype, "placeholderPath", {
        /**
         * Returns the placeholder path
         */
        get: /**
         * Returns the placeholder path
         * @return {?}
         */
        function () {
            return this.cqPath && this.cqPath + '/' + PLACEHOLDER_ITEM_NAME;
        },
        enumerable: true,
        configurable: true
    });
    AEMContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'aem-container',
                    host: {
                        '[class]': 'hostClasses',
                        '[attr.data-cq-data-path]': 'cqPath'
                    },
                    template: "<ng-container *ngFor=\"let itemKey of cqItemsOrder\">\n  <ng-container [aemComponent] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey'></ng-container>\n  <div *ngIf=\"isInEditMode\" [attr.data-cq-data-path]=\"placeholderPath\" [class]=\"getPlaceholderClassNames()\"></div>\n</ng-container>\n"
                },] },
    ];
    /** @nocollapse */
    AEMContainerComponent.propDecorators = {
        "cqItems": [{ type: Input },],
        "cqItemsOrder": [{ type: Input },],
        "cqPath": [{ type: Input },],
        "modelName": [{ type: Input },],
        "classNames": [{ type: Input },],
    };
    return AEMContainerComponent;
}());
export { AEMContainerComponent };
function AEMContainerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AEMContainerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AEMContainerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AEMContainerComponent.propDecorators;
    /**
     * Map of model items included in the current container
     * @type {?}
     */
    AEMContainerComponent.prototype.cqItems;
    /**
     * Array of model item keys
     * @type {?}
     */
    AEMContainerComponent.prototype.cqItemsOrder;
    /**
     * Path to the model associated with the current instance of the component
     * @type {?}
     */
    AEMContainerComponent.prototype.cqPath;
    /**
     * Key of the model structure
     * @type {?}
     */
    AEMContainerComponent.prototype.modelName;
    /**
     * Class names of the current component
     * @type {?}
     */
    AEMContainerComponent.prototype.classNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWVtLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWRvYmUvY3EtYW5ndWxhci1lZGl0YWJsZS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2xheW91dC9hZW0tY29udGFpbmVyL2FlbS1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDeEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVqQyxxQkFBTSx1QkFBdUIsR0FBRyxTQUFTLENBQUMsdUJBQXVCLENBQUM7QUFDbEUscUJBQU0scUJBQXFCLEdBQUcsR0FBRyxDQUFDO0FBQ2xDLHFCQUFNLHFCQUFxQixHQUFHLGVBQWUsQ0FBQzs7Ozs7O3NCQThCbkIsRUFBRTs7Ozt5QkFJQyxFQUFFOztJQVM5QixzQkFBSSwrQ0FBWTtRQUhoQjs7V0FFRzs7Ozs7UUFDSDtZQUNFLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDM0I7OztPQUFBO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNILDJDQUFXOzs7Ozs7SUFBWCxVQUFZLElBQUk7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7S0FDdEQ7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0gsdUNBQU87Ozs7OztJQUFQLFVBQVEsT0FBTztRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDOUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxpREFBaUI7Ozs7SUFBakI7UUFDRSxNQUFNLENBQUMscUJBQXFCLENBQUM7S0FDOUI7SUFFRCxzQkFBSSw4Q0FBVzs7OztRQUFmO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQ2pDOzs7T0FBQTtJQUVEOztPQUVHOzs7OztJQUNILHdEQUF3Qjs7OztJQUF4QjtRQUNFLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQztLQUNoQztJQUtELHNCQUFJLGtEQUFlO1FBSG5COztXQUVHOzs7OztRQUNIO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcscUJBQXFCLENBQUM7U0FDakU7OztPQUFBOztnQkF0RkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixJQUFJLEVBQUU7d0JBQ0YsU0FBUyxFQUFFLGFBQWE7d0JBQ3hCLDBCQUEwQixFQUFDLFFBQVE7cUJBQ3RDO29CQUNELFFBQVEsRUFBRSxxVUFJWDtpQkFDQTs7Ozs0QkFTRSxLQUFLO2lDQUlMLEtBQUs7MkJBSUwsS0FBSzs4QkFJTCxLQUFLOytCQUlMLEtBQUs7O2dDQTdEUjs7U0F5Q2EscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEFET0JFIENPTkZJREVOVElBTFxuICpcbiAqIENvcHlyaWdodCAyMDE4IEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogIEFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgaGVyZWluIGlzLCBhbmQgcmVtYWluc1xuICogdGhlIHByb3BlcnR5IG9mIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkIGFuZCBpdHMgc3VwcGxpZXJzLFxuICogaWYgYW55LiAgVGhlIGludGVsbGVjdHVhbCBhbmQgdGVjaG5pY2FsIGNvbmNlcHRzIGNvbnRhaW5lZFxuICogaGVyZWluIGFyZSBwcm9wcmlldGFyeSB0byBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZCBhbmQgaXRzXG4gKiBzdXBwbGllcnMgYW5kIG1heSBiZSBjb3ZlcmVkIGJ5IFUuUy4gYW5kIEZvcmVpZ24gUGF0ZW50cyxcbiAqIHBhdGVudHMgaW4gcHJvY2VzcywgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgdHJhZGUgc2VjcmV0IG9yIGNvcHlyaWdodCBsYXcuXG4gKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcbiAqIGlzIHN0cmljdGx5IGZvcmJpZGRlbiB1bmxlc3MgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uIGlzIG9idGFpbmVkXG4gKiBmcm9tIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4uL2NvbnN0YW50cydcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNvbnN0IFBMQUNFSE9MREVSX0NMQVNTX05BTUVTID0gQ29uc3RhbnRzLk5FV19TRUNUSU9OX0NMQVNTX05BTUVTO1xuY29uc3QgUExBQ0VIT0xERVJfSVRFTV9OQU1FID0gJyonO1xuY29uc3QgQ09OVEFJTkVSX0NMQVNTX05BTUVTID0gJ2FlbS1jb250YWluZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhZW0tY29udGFpbmVyJyxcbiAgaG9zdDoge1xuICAgICAgJ1tjbGFzc10nOiAnaG9zdENsYXNzZXMnLFxuICAgICAgJ1thdHRyLmRhdGEtY3EtZGF0YS1wYXRoXSc6J2NxUGF0aCdcbiAgfSxcbiAgdGVtcGxhdGU6IGA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBpdGVtS2V5IG9mIGNxSXRlbXNPcmRlclwiPlxuICA8bmctY29udGFpbmVyIFthZW1Db21wb25lbnRdIFtjcUl0ZW1dPSdnZXRJdGVtKGl0ZW1LZXkpJyBbY3FQYXRoXT0nZ2V0RGF0YVBhdGgoaXRlbUtleSknIFtpdGVtTmFtZV09J2l0ZW1LZXknPjwvbmctY29udGFpbmVyPlxuICA8ZGl2ICpuZ0lmPVwiaXNJbkVkaXRNb2RlXCIgW2F0dHIuZGF0YS1jcS1kYXRhLXBhdGhdPVwicGxhY2Vob2xkZXJQYXRoXCIgW2NsYXNzXT1cImdldFBsYWNlaG9sZGVyQ2xhc3NOYW1lcygpXCI+PC9kaXY+XG48L25nLWNvbnRhaW5lcj5cbmBcbn0pXG4vKipcbiAqIFRoZSBjdXJyZW50IGNvbXBvbmVudCBwcm92aWRlcyB0aGUgYmFzZSBwcmVzZW50YXRpb25hbCBsb2dpYyBjb21tb24gdG8gY29udGFpbmVycyBzdWNoIGFzIGEgZ3JpZCBvciBhIHBhZ2UuXG4gKiBDb250YWluZXIgaGF2ZSBpbiBjb21tb24gdGhlIG5vdGlvbiBvZiBpdGVtIGhvbGRlcnMuIEl0ZW1zIGFyZSByZXByZXNlbnRlZCBpbiB0aGUgbW9kZWwgYnkgdGhlIGZpZWxkcyBfOml0ZW1zXyBhbmQgXzppdGVtc09yZGVyX1xuICovXG5leHBvcnQgY2xhc3MgQUVNQ29udGFpbmVyQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIE1hcCBvZiBtb2RlbCBpdGVtcyBpbmNsdWRlZCBpbiB0aGUgY3VycmVudCBjb250YWluZXJcbiAgICovXG4gIEBJbnB1dCgpIGNxSXRlbXM7XG4gIC8qKlxuICAgKiBBcnJheSBvZiBtb2RlbCBpdGVtIGtleXNcbiAgICovXG4gIEBJbnB1dCgpIGNxSXRlbXNPcmRlcjtcbiAgLyoqXG4gICAqIFBhdGggdG8gdGhlIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50XG4gICAqL1xuICBASW5wdXQoKSBjcVBhdGg6c3RyaW5nID0gJyc7XG4gIC8qKlxuICAgKiBLZXkgb2YgdGhlIG1vZGVsIHN0cnVjdHVyZVxuICAgKi9cbiAgQElucHV0KCkgbW9kZWxOYW1lOnN0cmluZyA9ICcnO1xuICAvKipcbiAgICogQ2xhc3MgbmFtZXMgb2YgdGhlIGN1cnJlbnQgY29tcG9uZW50XG4gICAqL1xuICBASW5wdXQoKSBjbGFzc05hbWVzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2VhdGhlciBvZiBub3Qgd2UgYXJlIGluIHRoZSBlZGl0b3JcbiAgICovXG4gIGdldCBpc0luRWRpdE1vZGUoKSB7XG4gICAgcmV0dXJuIFV0aWxzLmlzSW5FZGl0b3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhZ2dyZWdhdGVkIHBhdGggb2YgdGhpcyBjb250YWluZXIgcGF0aCBhbmQgdGhlIHByb3ZpZGVkIHBhdGhcbiAgICpcbiAgICogQHBhcmFtIHBhdGggLSB0aGUgcHJvdmlkZWQgcGF0aCB0byBhZ2dyZWdhdGUgd2l0aCB0aGUgY29udGFpbmVyIHBhdGhcbiAgICovXG4gIGdldERhdGFQYXRoKHBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jcVBhdGggPyB0aGlzLmNxUGF0aCArICcvJyArIHBhdGggOiBwYXRoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGl0ZW0gZGF0YSBmcm9tIHRoZSBjcU1vZGVsXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtS2V5IC0gdGhlIGl0ZW1LZXkgdG8gbG9vayBmb3IgaW4gdGhlIGl0ZW1zLlxuICAgKi9cbiAgZ2V0SXRlbShpdGVtS2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuY3FJdGVtcyAmJiB0aGlzLmNxSXRlbXNbaXRlbUtleV07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2xhc3MgbmFtZXMgb2YgdGhlIGNvbnRhaW5lciBiYXNlZCBvbiB0aGUgZGF0YSBmcm9tIHRoZSBjcU1vZGVsXG4gICAqL1xuICBnZXRIb3N0Q2xhc3NOYW1lcygpIHtcbiAgICByZXR1cm4gQ09OVEFJTkVSX0NMQVNTX05BTUVTO1xuICB9XG5cbiAgZ2V0IGhvc3RDbGFzc2VzICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRIb3N0Q2xhc3NOYW1lcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNsYXNzZXNcbiAgICovXG4gIGdldFBsYWNlaG9sZGVyQ2xhc3NOYW1lcygpIHtcbiAgICByZXR1cm4gUExBQ0VIT0xERVJfQ0xBU1NfTkFNRVM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgcGF0aFxuICAgKi9cbiAgZ2V0IHBsYWNlaG9sZGVyUGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jcVBhdGggJiYgdGhpcy5jcVBhdGggKyAnLycgKyBQTEFDRUhPTERFUl9JVEVNX05BTUU7XG4gIH1cbn1cblxuIl19