/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
import { Component, Input, NgZone } from '@angular/core';
import { ModelManager } from "@adobe/cq-spa-page-model-manager";
var AEMModelProviderComponent = /** @class */ (function () {
    function AEMModelProviderComponent(ngZone) {
        this.ngZone = ngZone;
    }
    /**
     * Updates the item data
     */
    /**
     * Updates the item data
     * @return {?}
     */
    AEMModelProviderComponent.prototype.updateItem = /**
     * Updates the item data
     * @return {?}
     */
    function () {
        var _this = this;
        ModelManager.getData({ path: this.cqPath }).then(function (model) {
            _this.ngZone.run(function () {
                _this.cqItem = model;
            });
        });
    };
    /**
     * @return {?}
     */
    AEMModelProviderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        ModelManager.addListener(this.cqPath, this.updateItem.bind(this));
    };
    /**
     * @return {?}
     */
    AEMModelProviderComponent.prototype.ngDestroy = /**
     * @return {?}
     */
    function () {
        ModelManager.removeListener(this.cqPath, this.updateItem.bind(this));
    };
    AEMModelProviderComponent.decorators = [
        { type: Component, args: [{
                    selector: '[aemModelProvider]',
                    template: "<ng-container [aemComponent] [cqItem]='cqItem' [cqPath]='cqPath' [itemName]='itemName'></ng-container>"
                },] },
    ];
    /** @nocollapse */
    AEMModelProviderComponent.ctorParameters = function () { return [
        { type: NgZone, },
    ]; };
    AEMModelProviderComponent.propDecorators = {
        "cqPath": [{ type: Input },],
        "cqItem": [{ type: Input },],
        "itemName": [{ type: Input },],
        "aemModelProvider": [{ type: Input },],
    };
    return AEMModelProviderComponent;
}());
export { AEMModelProviderComponent };
function AEMModelProviderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AEMModelProviderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AEMModelProviderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AEMModelProviderComponent.propDecorators;
    /**
     * Path to the model associated with the current instance of the component
     * @type {?}
     */
    AEMModelProviderComponent.prototype.cqPath;
    /**
     * Model item associated with the current model provider component
     * @type {?}
     */
    AEMModelProviderComponent.prototype.cqItem;
    /**
     * Name of the item associated with the current model provider component
     * @type {?}
     */
    AEMModelProviderComponent.prototype.itemName;
    /** @type {?} */
    AEMModelProviderComponent.prototype.aemModelProvider;
    /** @type {?} */
    AEMModelProviderComponent.prototype.ngZone;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWVtLW1vZGVsLXByb3ZpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhZG9iZS9jcS1hbmd1bGFyLWVkaXRhYmxlLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvbGF5b3V0L2FlbS1tb2RlbC1wcm92aWRlci9hZW0tbW9kZWwtcHJvdmlkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7O0lBeUI5RCxtQ0FBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7S0FDakM7SUFFRDs7T0FFRzs7Ozs7SUFDSCw4Q0FBVTs7OztJQUFWO1FBQUEsaUJBTUM7UUFMQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEtBQUs7WUFDaEQsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7Z0JBQ2QsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7YUFDckIsQ0FBQyxDQUFDO1NBQ04sQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFFRCw0Q0FBUTs7O0lBQVI7UUFDRSxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUNuRTs7OztJQUVELDZDQUFTOzs7SUFBVDtRQUNFLFlBQVksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ3RFOztnQkEzQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSx3R0FBd0c7aUJBQ25IOzs7O2dCQU4wQixNQUFNOzs7MkJBYzlCLEtBQUs7MkJBSUwsS0FBSzs2QkFJTCxLQUFLO3FDQUVMLEtBQUs7O29DQXpDUjs7U0EyQmEseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEFET0JFIENPTkZJREVOVElBTFxuICpcbiAqIENvcHlyaWdodCAyMDE4IEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogIEFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgaGVyZWluIGlzLCBhbmQgcmVtYWluc1xuICogdGhlIHByb3BlcnR5IG9mIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkIGFuZCBpdHMgc3VwcGxpZXJzLFxuICogaWYgYW55LiAgVGhlIGludGVsbGVjdHVhbCBhbmQgdGVjaG5pY2FsIGNvbmNlcHRzIGNvbnRhaW5lZFxuICogaGVyZWluIGFyZSBwcm9wcmlldGFyeSB0byBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZCBhbmQgaXRzXG4gKiBzdXBwbGllcnMgYW5kIG1heSBiZSBjb3ZlcmVkIGJ5IFUuUy4gYW5kIEZvcmVpZ24gUGF0ZW50cyxcbiAqIHBhdGVudHMgaW4gcHJvY2VzcywgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgdHJhZGUgc2VjcmV0IG9yIGNvcHlyaWdodCBsYXcuXG4gKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcbiAqIGlzIHN0cmljdGx5IGZvcmJpZGRlbiB1bmxlc3MgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uIGlzIG9idGFpbmVkXG4gKiBmcm9tIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kZWxNYW5hZ2VyIH0gZnJvbSBcIkBhZG9iZS9jcS1zcGEtcGFnZS1tb2RlbC1tYW5hZ2VyXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1thZW1Nb2RlbFByb3ZpZGVyXScsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRhaW5lciBbYWVtQ29tcG9uZW50XSBbY3FJdGVtXT0nY3FJdGVtJyBbY3FQYXRoXT0nY3FQYXRoJyBbaXRlbU5hbWVdPSdpdGVtTmFtZSc+PC9uZy1jb250YWluZXI+YFxufSlcbi8qKlxuICogVGhlIGN1cnJlbnQgY29tcG9uZW50IGlzIHJlc3BvbnNpYmxlIGZvciBwcm92aWRpbmcgYWNjZXNzIHRvIHRoZSBNb2RlbE1hbmFnZXIgYW5kIHRoZSBtb2RlbCBvZiBhIGNvbXBvbmVudFxuICovXG5leHBvcnQgY2xhc3MgQUVNTW9kZWxQcm92aWRlckNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBQYXRoIHRvIHRoZSBtb2RlbCBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgQElucHV0KCkgY3FQYXRoO1xuICAvKipcbiAgICogTW9kZWwgaXRlbSBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgbW9kZWwgcHJvdmlkZXIgY29tcG9uZW50XG4gICAqL1xuICBASW5wdXQoKSBjcUl0ZW07XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBpdGVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBtb2RlbCBwcm92aWRlciBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIGl0ZW1OYW1lO1xuXG4gIEBJbnB1dCgpIGFlbU1vZGVsUHJvdmlkZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGl0ZW0gZGF0YVxuICAgKi9cbiAgdXBkYXRlSXRlbSgpIHtcbiAgICBNb2RlbE1hbmFnZXIuZ2V0RGF0YSh7cGF0aDogdGhpcy5jcVBhdGh9KS50aGVuKG1vZGVsID0+IHtcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmNxSXRlbSA9IG1vZGVsO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIE1vZGVsTWFuYWdlci5hZGRMaXN0ZW5lcih0aGlzLmNxUGF0aCwgdGhpcy51cGRhdGVJdGVtLmJpbmQodGhpcykpO1xuICB9XG5cbiAgbmdEZXN0cm95KCkge1xuICAgIE1vZGVsTWFuYWdlci5yZW1vdmVMaXN0ZW5lcih0aGlzLmNxUGF0aCwgdGhpcy51cGRhdGVJdGVtLmJpbmQodGhpcykpO1xuICB9XG59XG5cbiJdfQ==