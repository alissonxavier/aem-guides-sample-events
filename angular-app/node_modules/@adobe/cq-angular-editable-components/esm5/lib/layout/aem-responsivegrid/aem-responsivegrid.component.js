/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { AEMContainerComponent } from '../aem-container/aem-container.component';
import { Constants } from '../constants';
var /** @type {?} */ PLACEHOLDER_CLASS_NAMES = ' aem-Grid-newComponent';
var /** @type {?} */ RESPONSIVE_GRID_TYPE = 'wcm/foundation/components/responsivegrid';
var AEMResponsiveGridComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AEMResponsiveGridComponent, _super);
    function AEMResponsiveGridComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the column class names for a given column
     * @param itemKey - The key of the column item
     */
    /**
     * Returns the column class names for a given column
     * @param {?} itemKey - The key of the column item
     * @return {?}
     */
    AEMResponsiveGridComponent.prototype.getColumnClassNames = /**
     * Returns the column class names for a given column
     * @param {?} itemKey - The key of the column item
     * @return {?}
     */
    function (itemKey) {
        return this.columnClassNames && this.columnClassNames[itemKey];
    };
    /**
     * Returns the placeholder classes
     */
    /**
     * Returns the placeholder classes
     * @return {?}
     */
    AEMResponsiveGridComponent.prototype.getPlaceholderClassNames = /**
     * Returns the placeholder classes
     * @return {?}
     */
    function () {
        return _super.prototype.getPlaceholderClassNames.call(this) + PLACEHOLDER_CLASS_NAMES;
    };
    /**
     * Returns the class names of the responsive grid based on the data from the cqModel
     */
    /**
     * Returns the class names of the responsive grid based on the data from the cqModel
     * @return {?}
     */
    AEMResponsiveGridComponent.prototype.getHostClassNames = /**
     * Returns the class names of the responsive grid based on the data from the cqModel
     * @return {?}
     */
    function () {
        var /** @type {?} */ classNames = _super.prototype.getHostClassNames.call(this);
        if (this.classNames) {
            classNames += ' ' + (this.classNames || '');
        }
        return classNames + ' ' + this.gridClassNames;
    };
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param path - the provided path to aggregate with the container path
     */
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    AEMResponsiveGridComponent.prototype.getAttrDataPath = /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    function (path) {
        var /** @type {?} */ item = this.getItem(path);
        if (item && item[Constants.TYPE_PROP] === RESPONSIVE_GRID_TYPE) {
            // We don't want to add the path for the wrapper for a reponsivegrid
            // The reponsivegrid adds the path on it's own
            return null;
        }
        return this.getDataPath(path);
    };
    AEMResponsiveGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'aem-responsivegrid',
                    host: {
                        '[class]': 'hostClasses',
                        '[attr.data-cq-data-path]': 'cqPath'
                    },
                    template: "<ng-container *ngFor=\"let itemKey of cqItemsOrder\">\n  <div [aemModelProvider] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey' [class]=\"getColumnClassNames(itemKey)\" [attr.data-cq-data-path]='getAttrDataPath(itemKey)'>\n  </div>\n</ng-container>\n<div *ngIf=\"isInEditMode\" [attr.data-cq-data-path]=\"placeholderPath\" [class]=\"getPlaceholderClassNames()\"></div>\n\n\n",
                },] },
    ];
    /** @nocollapse */
    AEMResponsiveGridComponent.propDecorators = {
        "gridClassNames": [{ type: Input },],
        "columnClassNames": [{ type: Input },],
        "classNames": [{ type: Input },],
        "columnCount": [{ type: Input },],
    };
    return AEMResponsiveGridComponent;
}(AEMContainerComponent));
export { AEMResponsiveGridComponent };
function AEMResponsiveGridComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AEMResponsiveGridComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AEMResponsiveGridComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AEMResponsiveGridComponent.propDecorators;
    /**
     * Class names associated with the current responsive grid
     * @type {?}
     */
    AEMResponsiveGridComponent.prototype.gridClassNames;
    /**
     * Map of class names corresponding to each child of the current responsive grid
     * @type {?}
     */
    AEMResponsiveGridComponent.prototype.columnClassNames;
    /**
     * Class names of the current component
     * @type {?}
     */
    AEMResponsiveGridComponent.prototype.classNames;
    /**
     * Current number of columns of the grid
     * @type {?}
     */
    AEMResponsiveGridComponent.prototype.columnCount;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWVtLXJlc3BvbnNpdmVncmlkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhZG9iZS9jcS1hbmd1bGFyLWVkaXRhYmxlLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvbGF5b3V0L2FlbS1yZXNwb25zaXZlZ3JpZC9hZW0tcmVzcG9uc2l2ZWdyaWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNqRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXpDLHFCQUFNLHVCQUF1QixHQUFHLHdCQUF3QixDQUFDO0FBQ3pELHFCQUFNLG9CQUFvQixHQUFHLDBDQUEwQyxDQUFDOztJQW9CeEIsc0RBQXFCOzs7O0lBa0JuRTs7O09BR0c7Ozs7OztJQUNILHdEQUFtQjs7Ozs7SUFBbkIsVUFBb0IsT0FBYztRQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNoRTtJQUVEOztPQUVHOzs7OztJQUNILDZEQUF3Qjs7OztJQUF4QjtRQUNFLE1BQU0sQ0FBQyxpQkFBTSx3QkFBd0IsV0FBRSxHQUFHLHVCQUF1QixDQUFDO0tBQ25FO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsc0RBQWlCOzs7O0lBQWpCO1FBQ0UscUJBQUksVUFBVSxHQUFHLGlCQUFNLGlCQUFpQixXQUFFLENBQUM7UUFFM0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbEIsVUFBVSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUU7U0FDaEQ7UUFFRCxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0tBQy9DO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNILG9EQUFlOzs7Ozs7SUFBZixVQUFnQixJQUFJO1FBQ2xCLHFCQUFJLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLG9CQUFvQixDQUFDLENBQUMsQ0FBQzs7O1lBRy9ELE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQy9COztnQkE5RUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLElBQUksRUFBRTt3QkFDRixTQUFTLEVBQUUsYUFBYTt3QkFDeEIsMEJBQTBCLEVBQUMsUUFBUTtxQkFDdEM7b0JBQ0QsUUFBUSxFQUFFLDBaQU9YO2lCQUNBOzs7O21DQVFFLEtBQUs7cUNBSUwsS0FBSzsrQkFJTCxLQUFLO2dDQUlMLEtBQUs7O3FDQTFEUjtFQTBDZ0QscUJBQXFCO1NBQXhELDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBBRE9CRSBDT05GSURFTlRJQUxcbiAqXG4gKiBDb3B5cmlnaHQgMjAxOCBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZFxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBOT1RJQ0U6ICBBbGwgaW5mb3JtYXRpb24gY29udGFpbmVkIGhlcmVpbiBpcywgYW5kIHJlbWFpbnNcbiAqIHRoZSBwcm9wZXJ0eSBvZiBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZCBhbmQgaXRzIHN1cHBsaWVycyxcbiAqIGlmIGFueS4gIFRoZSBpbnRlbGxlY3R1YWwgYW5kIHRlY2huaWNhbCBjb25jZXB0cyBjb250YWluZWRcbiAqIGhlcmVpbiBhcmUgcHJvcHJpZXRhcnkgdG8gQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQgYW5kIGl0c1xuICogc3VwcGxpZXJzIGFuZCBtYXkgYmUgY292ZXJlZCBieSBVLlMuIGFuZCBGb3JlaWduIFBhdGVudHMsXG4gKiBwYXRlbnRzIGluIHByb2Nlc3MsIGFuZCBhcmUgcHJvdGVjdGVkIGJ5IHRyYWRlIHNlY3JldCBvciBjb3B5cmlnaHQgbGF3LlxuICogRGlzc2VtaW5hdGlvbiBvZiB0aGlzIGluZm9ybWF0aW9uIG9yIHJlcHJvZHVjdGlvbiBvZiB0aGlzIG1hdGVyaWFsXG4gKiBpcyBzdHJpY3RseSBmb3JiaWRkZW4gdW5sZXNzIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBpcyBvYnRhaW5lZFxuICogZnJvbSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZC5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBRU1Db250YWluZXJDb21wb25lbnQgfSBmcm9tICcuLi9hZW0tY29udGFpbmVyL2FlbS1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IFBMQUNFSE9MREVSX0NMQVNTX05BTUVTID0gJyBhZW0tR3JpZC1uZXdDb21wb25lbnQnO1xuY29uc3QgUkVTUE9OU0lWRV9HUklEX1RZUEUgPSAnd2NtL2ZvdW5kYXRpb24vY29tcG9uZW50cy9yZXNwb25zaXZlZ3JpZCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FlbS1yZXNwb25zaXZlZ3JpZCcsXG4gIGhvc3Q6IHtcbiAgICAgICdbY2xhc3NdJzogJ2hvc3RDbGFzc2VzJyxcbiAgICAgICdbYXR0ci5kYXRhLWNxLWRhdGEtcGF0aF0nOidjcVBhdGgnXG4gIH0sXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbUtleSBvZiBjcUl0ZW1zT3JkZXJcIj5cbiAgPGRpdiBbYWVtTW9kZWxQcm92aWRlcl0gW2NxSXRlbV09J2dldEl0ZW0oaXRlbUtleSknIFtjcVBhdGhdPSdnZXREYXRhUGF0aChpdGVtS2V5KScgW2l0ZW1OYW1lXT0naXRlbUtleScgW2NsYXNzXT1cImdldENvbHVtbkNsYXNzTmFtZXMoaXRlbUtleSlcIiBbYXR0ci5kYXRhLWNxLWRhdGEtcGF0aF09J2dldEF0dHJEYXRhUGF0aChpdGVtS2V5KSc+XG4gIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG48ZGl2ICpuZ0lmPVwiaXNJbkVkaXRNb2RlXCIgW2F0dHIuZGF0YS1jcS1kYXRhLXBhdGhdPVwicGxhY2Vob2xkZXJQYXRoXCIgW2NsYXNzXT1cImdldFBsYWNlaG9sZGVyQ2xhc3NOYW1lcygpXCI+PC9kaXY+XG5cblxuYCxcbn0pXG4vKipcbiAqIFRoZSBjdXJyZW50IGNsYXNzIGNhcnJpZXMgdGhlIGJhc2UgcHJlc2VudGF0aW9uYWwgbG9naWMgb2YgdGhlIEFFTSBMYXlvdXQgQ29udGFpbmVyIChha2EuIFJlc3BvbnNpdmUgZ3JpZClcbiAqL1xuZXhwb3J0IGNsYXNzIEFFTVJlc3BvbnNpdmVHcmlkQ29tcG9uZW50IGV4dGVuZHMgQUVNQ29udGFpbmVyQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIENsYXNzIG5hbWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCByZXNwb25zaXZlIGdyaWRcbiAgICovXG4gIEBJbnB1dCgpIGdyaWRDbGFzc05hbWVzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBNYXAgb2YgY2xhc3MgbmFtZXMgY29ycmVzcG9uZGluZyB0byBlYWNoIGNoaWxkIG9mIHRoZSBjdXJyZW50IHJlc3BvbnNpdmUgZ3JpZFxuICAgKi9cbiAgQElucHV0KCkgY29sdW1uQ2xhc3NOYW1lczogT2JqZWN0O1xuICAvKipcbiAgICogQ2xhc3MgbmFtZXMgb2YgdGhlIGN1cnJlbnQgY29tcG9uZW50XG4gICAqL1xuICBASW5wdXQoKSBjbGFzc05hbWVzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDdXJyZW50IG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBncmlkXG4gICAqL1xuICBASW5wdXQoKSBjb2x1bW5Db3VudDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb2x1bW4gY2xhc3MgbmFtZXMgZm9yIGEgZ2l2ZW4gY29sdW1uXG4gICAqIEBwYXJhbSBpdGVtS2V5IC0gVGhlIGtleSBvZiB0aGUgY29sdW1uIGl0ZW1cbiAgICovXG4gIGdldENvbHVtbkNsYXNzTmFtZXMoaXRlbUtleTpzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5DbGFzc05hbWVzICYmIHRoaXMuY29sdW1uQ2xhc3NOYW1lc1tpdGVtS2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjbGFzc2VzXG4gICAqL1xuICBnZXRQbGFjZWhvbGRlckNsYXNzTmFtZXMoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldFBsYWNlaG9sZGVyQ2xhc3NOYW1lcygpICsgUExBQ0VIT0xERVJfQ0xBU1NfTkFNRVM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2xhc3MgbmFtZXMgb2YgdGhlIHJlc3BvbnNpdmUgZ3JpZCBiYXNlZCBvbiB0aGUgZGF0YSBmcm9tIHRoZSBjcU1vZGVsXG4gICAqL1xuICBnZXRIb3N0Q2xhc3NOYW1lcygpIHtcbiAgICBsZXQgY2xhc3NOYW1lcyA9IHN1cGVyLmdldEhvc3RDbGFzc05hbWVzKCk7XG5cbiAgICBpZiAodGhpcy5jbGFzc05hbWVzKSB7XG4gICAgICAgIGNsYXNzTmFtZXMgKz0gJyAnICsgKHRoaXMuY2xhc3NOYW1lcyB8fCAnJykgO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc05hbWVzICsgJyAnICsgdGhpcy5ncmlkQ2xhc3NOYW1lcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhZ2dyZWdhdGVkIHBhdGggb2YgdGhpcyBjb250YWluZXIgcGF0aCBhbmQgdGhlIHByb3ZpZGVkIHBhdGhcbiAgICpcbiAgICogQHBhcmFtIHBhdGggLSB0aGUgcHJvdmlkZWQgcGF0aCB0byBhZ2dyZWdhdGUgd2l0aCB0aGUgY29udGFpbmVyIHBhdGhcbiAgICovXG4gIGdldEF0dHJEYXRhUGF0aChwYXRoKSB7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLmdldEl0ZW0ocGF0aCk7XG4gICAgaWYgKGl0ZW0gJiYgaXRlbVtDb25zdGFudHMuVFlQRV9QUk9QXSA9PT0gUkVTUE9OU0lWRV9HUklEX1RZUEUpIHtcbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gYWRkIHRoZSBwYXRoIGZvciB0aGUgd3JhcHBlciBmb3IgYSByZXBvbnNpdmVncmlkXG4gICAgICAvLyBUaGUgcmVwb25zaXZlZ3JpZCBhZGRzIHRoZSBwYXRoIG9uIGl0J3Mgb3duXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXREYXRhUGF0aChwYXRoKTtcbiAgfVxufVxuIl19