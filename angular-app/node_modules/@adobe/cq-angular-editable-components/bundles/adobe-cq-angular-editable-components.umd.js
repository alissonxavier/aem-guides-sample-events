(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@adobe/cq-spa-component-mapping'), require('@adobe/cq-spa-page-model-manager'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@adobe/cq-angular-editable-components', ['exports', '@adobe/cq-spa-component-mapping', '@adobe/cq-spa-page-model-manager', '@angular/core', '@angular/common'], factory) :
    (factory((global.adobe = global.adobe || {}, global.adobe['cq-angular-editable-components'] = {}),null,null,global.ng.core,global.ng.common));
}(this, (function (exports,cqSpaComponentMapping,cqSpaPageModelManager,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * The current class extends the \@adobe/cq-spa-component-mapping#Mapto library and features with Angular specifics such as
     *
     * - Storing the editing configurations for each resource type
     */
    var /**
     * The current class extends the \@adobe/cq-spa-component-mapping#Mapto library and features with Angular specifics such as
     *
     * - Storing the editing configurations for each resource type
     */ ComponentMappingWithConfig = (function () {
        function ComponentMappingWithConfig(spaMapping) {
            this.spaMapping = spaMapping;
            /**
             * Store of EditConfig structures
             */
            this.editConfigMap = {};
        }
        /**
         * Stores a component class for the given resource types and also allows to provide an EditConfig object
         * @param resourceTypes - List of resource types
         * @param clazz - Component class to be stored
         * @param [editConfig] - Edit configuration to be stored for the given resource types
         */
        /**
         * Stores a component class for the given resource types and also allows to provide an EditConfig object
         * @param {?} resourceTypes - List of resource types
         * @param {?} clazz - Component class to be stored
         * @param {?=} editConfig
         * @return {?}
         */
        ComponentMappingWithConfig.prototype.map = /**
         * Stores a component class for the given resource types and also allows to provide an EditConfig object
         * @param {?} resourceTypes - List of resource types
         * @param {?} clazz - Component class to be stored
         * @param {?=} editConfig
         * @return {?}
         */
            function (resourceTypes, clazz, editConfig) {
                if (editConfig === void 0) {
                    editConfig = null;
                }
                var /** @type {?} */ innerClass = clazz;
                if (editConfig) {
                    this.editConfigMap[resourceTypes] = editConfig;
                }
                this.spaMapping.map(resourceTypes, innerClass);
            };
        /**
         * Returns the component class for the given resourceType
         * @param resourceType - Resource type for which the component class has been stored
         */
        /**
         * Returns the component class for the given resourceType
         * @param {?} resourceType - Resource type for which the component class has been stored
         * @return {?}
         */
        ComponentMappingWithConfig.prototype.get = /**
         * Returns the component class for the given resourceType
         * @param {?} resourceType - Resource type for which the component class has been stored
         * @return {?}
         */
            function (resourceType) {
                return this.spaMapping.get(resourceType);
            };
        /**
         * Returns the EditConfig structure for the given type
         * @param resourceType - Resource type for which the configuration has been stored
         */
        /**
         * Returns the EditConfig structure for the given type
         * @param {?} resourceType - Resource type for which the configuration has been stored
         * @return {?}
         */
        ComponentMappingWithConfig.prototype.getEditConfig = /**
         * Returns the EditConfig structure for the given type
         * @param {?} resourceType - Resource type for which the configuration has been stored
         * @return {?}
         */
            function (resourceType) {
                return this.editConfigMap[resourceType];
            };
        return ComponentMappingWithConfig;
    }());
    var /** @type {?} */ componentMapping = new ComponentMappingWithConfig(cqSpaComponentMapping.ComponentMapping);
    /**
     * @param {?} resourceTypes
     * @return {?}
     */
    function MapTo(resourceTypes) {
        return function (clazz, editConfig) {
            if (editConfig === void 0) {
                editConfig = null;
            }
            return componentMapping.map(resourceTypes, clazz, editConfig);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ Constants = {
        /**
             * Class names associated with a new section component
             *
             */
        NEW_SECTION_CLASS_NAMES: 'new section',
        TYPE_PROP: cqSpaPageModelManager.Constants.TYPE_PROP,
        /**
             * List of child items of an item
             *
             */
        ITEMS_PROP: cqSpaPageModelManager.Constants.ITEMS_PROP,
        /**
             * Order in which the items should be listed
             *
             */
        ITEMS_ORDER_PROP: cqSpaPageModelManager.Constants.ITEMS_ORDER_PROP,
        /**
             * Path of the item
             *
             */
        PATH_PROP: cqSpaPageModelManager.Constants.PATH_PROP,
        /**
             * Children of an item
             *
             */
        CHILDREN_PROP: cqSpaPageModelManager.Constants.CHILDREN_PROP,
        /**
             * Path of the resource in the model
             *
             */
        DATA_PATH_PROP: ':dataPath',
        /**
             * Hierarchical type of the item
             */
        HIERARCHY_TYPE_PROP: cqSpaPageModelManager.Constants.HIERARCHY_TYPE_PROP
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /*
     * ADOBE CONFIDENTIAL
     *
     * Copyright 2018 Adobe Systems Incorporated
     * All Rights Reserved.
     *
     * NOTICE:  All information contained herein is, and remains
     * the property of Adobe Systems Incorporated and its suppliers,
     * if any.  The intellectual and technical concepts contained
     * herein are proprietary to Adobe Systems Incorporated and its
     * suppliers and may be covered by U.S. and Foreign Patents,
     * patents in process, and are protected by trade secret or copyright law.
     * Dissemination of this information or reproduction of this material
     * is strictly forbidden unless prior written permission is obtained
     * from Adobe Systems Incorporated.
     */
    /**
     * Selector that identifies the node that contains the WCM mode state
     */
    var /** @type {?} */ WCM_MODE_META_SELECTOR = 'meta[property="cq:wcmmode"]';
    /**
     * The editor is in one of the edition modes
     */
    var /** @type {?} */ EDIT_MODE = 'edit';
    /**
     * The editor is in preview mode
     */
    var /** @type {?} */ PREVIEW_MODE = 'preview';
    /**
     * Returns if we are in the browser context or not by checking for the
     * existence of the window object
     * @return {?}
     */
    function isBrowser() {
        try {
            return typeof window !== 'undefined';
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Returns the current WCM mode
     *
     * <p>Note that the value isn't, as of the date of this writing, updated by the editor</p>
     * @return {?}
     */
    function getWCMMode() {
        if (isBrowser()) {
            var /** @type {?} */ wcmModeMeta = document.head.querySelector(WCM_MODE_META_SELECTOR);
            return wcmModeMeta && wcmModeMeta.content;
        }
    }
    /**
     * Helper functions for interacting with the AEM environment
     */
    var /** @type {?} */ Utils = {
        /**
         * Is the app used in the context of the AEM Page editor
         */
        isInEditor: /**
         * Is the app used in the context of the AEM Page editor
         * @return {?}
         */ function () {
            var /** @type {?} */ wcmMode = getWCMMode();
            return wcmMode && (EDIT_MODE === wcmMode || PREVIEW_MODE === wcmMode);
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ PLACEHOLDER_CLASS_NAME = 'cq-placeholder';
    var AEMComponentDirective = (function () {
        function AEMComponentDirective(renderer, viewContainer, factoryResolver, ngZone) {
            this.renderer = renderer;
            this.viewContainer = viewContainer;
            this.factoryResolver = factoryResolver;
            this.ngZone = ngZone;
        }
        Object.defineProperty(AEMComponentDirective.prototype, "cqItem", {
            get: /**
             * @return {?}
             */ function () {
                return this._cqItem;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._cqItem = value;
                this.updateComponentData();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AEMComponentDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.renderComponent(componentMapping.get(this.type));
            };
        Object.defineProperty(AEMComponentDirective.prototype, "type", {
            /**
             * Returns the type of the cqItem if exists.
             */
            get: /**
             * Returns the type of the cqItem if exists.
             * @return {?}
             */ function () {
                return this.cqItem && this.cqItem[Constants.TYPE_PROP];
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Renders a component dynamically based on the component definition
         *
         * @param {?} componentDefinition The component definition to render
         * @return {?}
         */
        AEMComponentDirective.prototype.renderComponent = /**
         * Renders a component dynamically based on the component definition
         *
         * @param {?} componentDefinition The component definition to render
         * @return {?}
         */
            function (componentDefinition) {
                if (componentDefinition) {
                    var /** @type {?} */ factory = this.factoryResolver.resolveComponentFactory(componentDefinition);
                    this.viewContainer.clear();
                    this._component = this.viewContainer.createComponent(factory);
                    this.updateComponentData();
                }
            };
        /**
         * Updates the data of the component based the data of the directive
         * @return {?}
         */
        AEMComponentDirective.prototype.updateComponentData = /**
         * Updates the data of the component based the data of the directive
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this._component || !this._component.instance) {
                    return;
                }
                var /** @type {?} */ keys = Object.getOwnPropertyNames(this.cqItem);
                keys.forEach(function (key) {
                    var /** @type {?} */ propKey = key;
                    if (propKey.startsWith(":")) {
                        // Transformation of internal properties namespaced with [:] to [cq]
                        // :myProperty => cqMyProperty
                        var /** @type {?} */ tempKey = propKey.substr(1);
                        propKey = "cq" + tempKey.substr(0, 1).toUpperCase() + tempKey.substr(1);
                    }
                    _this._component.instance[propKey] = _this.cqItem[key];
                });
                this._component.instance.cqPath = this.cqPath;
                this._component.instance.itemName = this.itemName;
                var /** @type {?} */ editConfig = componentMapping.getEditConfig(this.type);
                if (editConfig && Utils.isInEditor) {
                    this.setupPlaceholder(editConfig);
                }
            };
        /**
         * Adds the specified item attributes to the element
         * @return {?}
         */
        AEMComponentDirective.prototype.setupItemAttrs = /**
         * Adds the specified item attributes to the element
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.itemAttrs) {
                    var /** @type {?} */ keys = Object.getOwnPropertyNames(this.itemAttrs);
                    keys.forEach(function (key) {
                        if (key === "class") {
                            var /** @type {?} */ classes = _this.itemAttrs[key].split(' ');
                            classes.forEach(function (itemClass) {
                                _this.renderer.addClass(_this._component.location.nativeElement, itemClass);
                            });
                        }
                        else {
                            _this.renderer.setAttribute(_this._component.location.nativeElement, key, _this.itemAttrs[key]);
                        }
                    });
                }
            };
        /**
         * Determines if the placeholder should e displayed.
         *
         * @param {?} editConfig - the edit config of the directive
         * @return {?}
         */
        AEMComponentDirective.prototype.usePlaceholder = /**
         * Determines if the placeholder should e displayed.
         *
         * @param {?} editConfig - the edit config of the directive
         * @return {?}
         */
            function (editConfig) {
                return editConfig.isEmpty && typeof editConfig.isEmpty === "function" && editConfig.isEmpty(this.cqItem);
            };
        /**
         * Setups the placeholder of needed for the AEM editor
         *
         * @param {?} editConfig - the editConfig, which will dictate the classes to be added on.
         * @return {?}
         */
        AEMComponentDirective.prototype.setupPlaceholder = /**
         * Setups the placeholder of needed for the AEM editor
         *
         * @param {?} editConfig - the editConfig, which will dictate the classes to be added on.
         * @return {?}
         */
            function (editConfig) {
                if (this.usePlaceholder(editConfig)) {
                    this.renderer.addClass(this._component.location.nativeElement, PLACEHOLDER_CLASS_NAME);
                    this.renderer.setAttribute(this._component.location.nativeElement, "data-emptytext", editConfig.emptyLabel);
                }
                else {
                    this.renderer.removeClass(this._component.location.nativeElement, PLACEHOLDER_CLASS_NAME);
                    this.renderer.removeAttribute(this._component.location.nativeElement, "data-emptytext");
                }
            };
        /**
         * @return {?}
         */
        AEMComponentDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.setupItemAttrs();
            };
        /**
         * @return {?}
         */
        AEMComponentDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._component && this._component.destroy();
            };
        AEMComponentDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[aemComponent]'
                    },] },
        ];
        /** @nocollapse */
        AEMComponentDirective.ctorParameters = function () {
            return [
                { type: core.Renderer2, },
                { type: core.ViewContainerRef, },
                { type: core.ComponentFactoryResolver, },
                { type: core.NgZone, },
            ];
        };
        AEMComponentDirective.propDecorators = {
            "cqItem": [{ type: core.Input },],
            "cqPath": [{ type: core.Input },],
            "itemName": [{ type: core.Input },],
            "itemAttrs": [{ type: core.Input },],
            "aemComponent": [{ type: core.Input },],
        };
        return AEMComponentDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ PLACEHOLDER_CLASS_NAMES = Constants.NEW_SECTION_CLASS_NAMES;
    var /** @type {?} */ PLACEHOLDER_ITEM_NAME = '*';
    var /** @type {?} */ CONTAINER_CLASS_NAMES = 'aem-container';
    var AEMContainerComponent = (function () {
        function AEMContainerComponent() {
            /**
             * Path to the model associated with the current instance of the component
             */
            this.cqPath = '';
            /**
             * Key of the model structure
             */
            this.modelName = '';
        }
        Object.defineProperty(AEMContainerComponent.prototype, "isInEditMode", {
            /**
             * Returns weather of not we are in the editor
             */
            get: /**
             * Returns weather of not we are in the editor
             * @return {?}
             */ function () {
                return Utils.isInEditor();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param path - the provided path to aggregate with the container path
         */
        /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param {?} path - the provided path to aggregate with the container path
         * @return {?}
         */
        AEMContainerComponent.prototype.getDataPath = /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param {?} path - the provided path to aggregate with the container path
         * @return {?}
         */
            function (path) {
                return this.cqPath ? this.cqPath + '/' + path : path;
            };
        /**
         * Returns the item data from the cqModel
         *
         * @param itemKey - the itemKey to look for in the items.
         */
        /**
         * Returns the item data from the cqModel
         *
         * @param {?} itemKey - the itemKey to look for in the items.
         * @return {?}
         */
        AEMContainerComponent.prototype.getItem = /**
         * Returns the item data from the cqModel
         *
         * @param {?} itemKey - the itemKey to look for in the items.
         * @return {?}
         */
            function (itemKey) {
                return this.cqItems && this.cqItems[itemKey];
            };
        /**
         * Returns the class names of the container based on the data from the cqModel
         */
        /**
         * Returns the class names of the container based on the data from the cqModel
         * @return {?}
         */
        AEMContainerComponent.prototype.getHostClassNames = /**
         * Returns the class names of the container based on the data from the cqModel
         * @return {?}
         */
            function () {
                return CONTAINER_CLASS_NAMES;
            };
        Object.defineProperty(AEMContainerComponent.prototype, "hostClasses", {
            get: /**
             * @return {?}
             */ function () {
                return this.getHostClassNames();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Returns the placeholder classes
         */
        /**
         * Returns the placeholder classes
         * @return {?}
         */
        AEMContainerComponent.prototype.getPlaceholderClassNames = /**
         * Returns the placeholder classes
         * @return {?}
         */
            function () {
                return PLACEHOLDER_CLASS_NAMES;
            };
        Object.defineProperty(AEMContainerComponent.prototype, "placeholderPath", {
            /**
             * Returns the placeholder path
             */
            get: /**
             * Returns the placeholder path
             * @return {?}
             */ function () {
                return this.cqPath && this.cqPath + '/' + PLACEHOLDER_ITEM_NAME;
            },
            enumerable: true,
            configurable: true
        });
        AEMContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aem-container',
                        host: {
                            '[class]': 'hostClasses',
                            '[attr.data-cq-data-path]': 'cqPath'
                        },
                        template: "<ng-container *ngFor=\"let itemKey of cqItemsOrder\">\n  <ng-container [aemComponent] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey'></ng-container>\n  <div *ngIf=\"isInEditMode\" [attr.data-cq-data-path]=\"placeholderPath\" [class]=\"getPlaceholderClassNames()\"></div>\n</ng-container>\n"
                    },] },
        ];
        /** @nocollapse */
        AEMContainerComponent.propDecorators = {
            "cqItems": [{ type: core.Input },],
            "cqItemsOrder": [{ type: core.Input },],
            "cqPath": [{ type: core.Input },],
            "modelName": [{ type: core.Input },],
            "classNames": [{ type: core.Input },],
        };
        return AEMContainerComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ PLACEHOLDER_CLASS_NAMES$1 = ' aem-Grid-newComponent';
    var /** @type {?} */ RESPONSIVE_GRID_TYPE = 'wcm/foundation/components/responsivegrid';
    var AEMResponsiveGridComponent = (function (_super) {
        __extends(AEMResponsiveGridComponent, _super);
        function AEMResponsiveGridComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the column class names for a given column
         * @param itemKey - The key of the column item
         */
        /**
         * Returns the column class names for a given column
         * @param {?} itemKey - The key of the column item
         * @return {?}
         */
        AEMResponsiveGridComponent.prototype.getColumnClassNames = /**
         * Returns the column class names for a given column
         * @param {?} itemKey - The key of the column item
         * @return {?}
         */
            function (itemKey) {
                return this.columnClassNames && this.columnClassNames[itemKey];
            };
        /**
         * Returns the placeholder classes
         */
        /**
         * Returns the placeholder classes
         * @return {?}
         */
        AEMResponsiveGridComponent.prototype.getPlaceholderClassNames = /**
         * Returns the placeholder classes
         * @return {?}
         */
            function () {
                return _super.prototype.getPlaceholderClassNames.call(this) + PLACEHOLDER_CLASS_NAMES$1;
            };
        /**
         * Returns the class names of the responsive grid based on the data from the cqModel
         */
        /**
         * Returns the class names of the responsive grid based on the data from the cqModel
         * @return {?}
         */
        AEMResponsiveGridComponent.prototype.getHostClassNames = /**
         * Returns the class names of the responsive grid based on the data from the cqModel
         * @return {?}
         */
            function () {
                var /** @type {?} */ classNames = _super.prototype.getHostClassNames.call(this);
                if (this.classNames) {
                    classNames += ' ' + (this.classNames || '');
                }
                return classNames + ' ' + this.gridClassNames;
            };
        /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param path - the provided path to aggregate with the container path
         */
        /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param {?} path - the provided path to aggregate with the container path
         * @return {?}
         */
        AEMResponsiveGridComponent.prototype.getAttrDataPath = /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param {?} path - the provided path to aggregate with the container path
         * @return {?}
         */
            function (path) {
                var /** @type {?} */ item = this.getItem(path);
                if (item && item[Constants.TYPE_PROP] === RESPONSIVE_GRID_TYPE) {
                    // We don't want to add the path for the wrapper for a reponsivegrid
                    // The reponsivegrid adds the path on it's own
                    return null;
                }
                return this.getDataPath(path);
            };
        AEMResponsiveGridComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aem-responsivegrid',
                        host: {
                            '[class]': 'hostClasses',
                            '[attr.data-cq-data-path]': 'cqPath'
                        },
                        template: "<ng-container *ngFor=\"let itemKey of cqItemsOrder\">\n  <div [aemModelProvider] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey' [class]=\"getColumnClassNames(itemKey)\" [attr.data-cq-data-path]='getAttrDataPath(itemKey)'>\n  </div>\n</ng-container>\n<div *ngIf=\"isInEditMode\" [attr.data-cq-data-path]=\"placeholderPath\" [class]=\"getPlaceholderClassNames()\"></div>\n\n\n",
                    },] },
        ];
        /** @nocollapse */
        AEMResponsiveGridComponent.propDecorators = {
            "gridClassNames": [{ type: core.Input },],
            "columnClassNames": [{ type: core.Input },],
            "classNames": [{ type: core.Input },],
            "columnCount": [{ type: core.Input },],
        };
        return AEMResponsiveGridComponent;
    }(AEMContainerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AEMModelProviderComponent = (function () {
        function AEMModelProviderComponent(ngZone) {
            this.ngZone = ngZone;
        }
        /**
         * Updates the item data
         */
        /**
         * Updates the item data
         * @return {?}
         */
        AEMModelProviderComponent.prototype.updateItem = /**
         * Updates the item data
         * @return {?}
         */
            function () {
                var _this = this;
                cqSpaPageModelManager.ModelManager.getData({ path: this.cqPath }).then(function (model) {
                    _this.ngZone.run(function () {
                        _this.cqItem = model;
                    });
                });
            };
        /**
         * @return {?}
         */
        AEMModelProviderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                cqSpaPageModelManager.ModelManager.addListener(this.cqPath, this.updateItem.bind(this));
            };
        /**
         * @return {?}
         */
        AEMModelProviderComponent.prototype.ngDestroy = /**
         * @return {?}
         */
            function () {
                cqSpaPageModelManager.ModelManager.removeListener(this.cqPath, this.updateItem.bind(this));
            };
        AEMModelProviderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: '[aemModelProvider]',
                        template: "<ng-container [aemComponent] [cqItem]='cqItem' [cqPath]='cqPath' [itemName]='itemName'></ng-container>"
                    },] },
        ];
        /** @nocollapse */
        AEMModelProviderComponent.ctorParameters = function () {
            return [
                { type: core.NgZone, },
            ];
        };
        AEMModelProviderComponent.propDecorators = {
            "cqPath": [{ type: core.Input },],
            "cqItem": [{ type: core.Input },],
            "itemName": [{ type: core.Input },],
            "aemModelProvider": [{ type: core.Input },],
        };
        return AEMModelProviderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ PAGE_MODEL_SEPARATOR = '/jcr:content/';
    var AEMPageComponent = (function (_super) {
        __extends(AEMPageComponent, _super);
        function AEMPageComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param path - the provided path to aggregate with the container path
         */
        /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param {?} path - the provided path to aggregate with the container path
         * @return {?}
         */
        AEMPageComponent.prototype.getDataPath = /**
         * Returns the aggregated path of this container path and the provided path
         *
         * @param {?} path - the provided path to aggregate with the container path
         * @return {?}
         */
            function (path) {
                return this.cqPath ? this.cqPath + PAGE_MODEL_SEPARATOR + path : path;
            };
        AEMPageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'aem-page',
                        host: {
                            '[class]': 'hostClasses',
                            '[attr.data-cq-data-path]': 'cqPath'
                        },
                        template: "<ng-container *ngFor=\"let itemKey of cqItemsOrder\">\n  <ng-container [aemComponent] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey'></ng-container>\n  <div *ngIf=\"isInEditMode\" [attr.data-cq-data-path]=\"placeholderPath\" [class]=\"getPlaceholderClassNames()\"></div>\n</ng-container>\n"
                    },] },
        ];
        return AEMPageComponent;
    }(AEMContainerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SpaAngularEditableComponentsModule = (function () {
        function SpaAngularEditableComponentsModule() {
        }
        SpaAngularEditableComponentsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [AEMContainerComponent, AEMResponsiveGridComponent, AEMComponentDirective, AEMModelProviderComponent, AEMPageComponent],
                        exports: [AEMContainerComponent, AEMResponsiveGridComponent, AEMComponentDirective, AEMModelProviderComponent, AEMPageComponent],
                        entryComponents: [AEMContainerComponent, AEMResponsiveGridComponent, AEMPageComponent]
                    },] },
        ];
        return SpaAngularEditableComponentsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AemPageDataResolver = (function () {
        function AemPageDataResolver() {
        }
        /**
         * Returns the absolute resource path without extension.
         * @example
         * // returns: '/content/aa/bb' for route.url [ 'content', 'aa', 'bb.html' ]
         * resolve(route)
         * @param route - route
         * @returns absolute resource path without extension
         */
        /**
         * Returns the absolute resource path without extension.
         * \@example
         * // returns: '/content/aa/bb' for route.url [ 'content', 'aa', 'bb.html' ]
         * resolve(route)
         * @param {?} route - route
         * @return {?} absolute resource path without extension
         */
        AemPageDataResolver.prototype.resolve = /**
         * Returns the absolute resource path without extension.
         * \@example
         * // returns: '/content/aa/bb' for route.url [ 'content', 'aa', 'bb.html' ]
         * resolve(route)
         * @param {?} route - route
         * @return {?} absolute resource path without extension
         */
            function (route) {
                return '/' + route.url.join('/').replace(/\.[^/.]+$/, '');
            };
        AemPageDataResolver.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        AemPageDataResolver.ctorParameters = function () { return []; };
        return AemPageDataResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Implements RouteReuseStrategy to customize route reuse.
     */
    var /**
     * Implements RouteReuseStrategy to customize route reuse.
     */ AemPageRouteReuseStrategy = (function () {
        function AemPageRouteReuseStrategy() {
        }
        /** Determines if this route (and its subtree) should be detached to be reused later. */
        /**
         * Determines if this route (and its subtree) should be detached to be reused later.
         * @param {?} route
         * @return {?}
         */
        AemPageRouteReuseStrategy.prototype.shouldDetach = /**
         * Determines if this route (and its subtree) should be detached to be reused later.
         * @param {?} route
         * @return {?}
         */
            function (route) {
                return false;
            };
        /** Not storing deteached route. */
        /**
         * Not storing deteached route.
         * @param {?} route
         * @param {?} detachedTree
         * @return {?}
         */
        AemPageRouteReuseStrategy.prototype.store = /**
         * Not storing deteached route.
         * @param {?} route
         * @param {?} detachedTree
         * @return {?}
         */
            function (route, detachedTree) { };
        /** Determines if this route (and its subtree) should be reattached. */
        /**
         * Determines if this route (and its subtree) should be reattached.
         * @param {?} route
         * @return {?}
         */
        AemPageRouteReuseStrategy.prototype.shouldAttach = /**
         * Determines if this route (and its subtree) should be reattached.
         * @param {?} route
         * @return {?}
         */
            function (route) {
                return false;
            };
        /** Retrieves the previously stored route. */
        /**
         * Retrieves the previously stored route.
         * @param {?} route
         * @return {?}
         */
        AemPageRouteReuseStrategy.prototype.retrieve = /**
         * Retrieves the previously stored route.
         * @param {?} route
         * @return {?}
         */
            function (route) {
                return null;
            };
        /** Determines if a route should be reused */
        /**
         * Determines if a route should be reused
         * @param {?} future
         * @param {?} curr
         * @return {?}
         */
        AemPageRouteReuseStrategy.prototype.shouldReuseRoute = /**
         * Determines if a route should be reused
         * @param {?} future
         * @param {?} curr
         * @return {?}
         */
            function (future, curr) {
                return false;
            };
        return AemPageRouteReuseStrategy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.AEMComponentDirective = AEMComponentDirective;
    exports.AEMContainerComponent = AEMContainerComponent;
    exports.AEMResponsiveGridComponent = AEMResponsiveGridComponent;
    exports.ComponentMappingWithConfig = ComponentMappingWithConfig;
    exports.ComponentMapping = componentMapping;
    exports.MapTo = MapTo;
    exports.Constants = Constants;
    exports.Utils = Utils;
    exports.SpaAngularEditableComponentsModule = SpaAngularEditableComponentsModule;
    exports.AemPageDataResolver = AemPageDataResolver;
    exports.AemPageRouteReuseStrategy = AemPageRouteReuseStrategy;
    exports.ɵa = AEMModelProviderComponent;
    exports.ɵb = AEMPageComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,