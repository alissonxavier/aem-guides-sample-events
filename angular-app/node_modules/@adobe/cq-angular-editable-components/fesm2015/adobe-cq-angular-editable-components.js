import { ComponentMapping } from '@adobe/cq-spa-component-mapping';
import { Constants, ModelManager } from '@adobe/cq-spa-page-model-manager';
import { Directive, Input, Renderer2, NgZone, ViewContainerRef, ComponentFactoryResolver, Component, NgModule, Injectable } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * The current class extends the \@adobe/cq-spa-component-mapping#Mapto library and features with Angular specifics such as
 *
 * - Storing the editing configurations for each resource type
 */
class ComponentMappingWithConfig {
    /**
     * @param {?} spaMapping
     */
    constructor(spaMapping) {
        this.spaMapping = spaMapping;
        /**
         * Store of EditConfig structures
         */
        this.editConfigMap = {};
    }
    /**
     * Stores a component class for the given resource types and also allows to provide an EditConfig object
     * @param {?} resourceTypes - List of resource types
     * @param {?} clazz - Component class to be stored
     * @param {?=} editConfig
     * @return {?}
     */
    map(resourceTypes, clazz, editConfig = null) {
        let /** @type {?} */ innerClass = clazz;
        if (editConfig) {
            this.editConfigMap[resourceTypes] = editConfig;
        }
        this.spaMapping.map(resourceTypes, innerClass);
    }
    ;
    /**
     * Returns the component class for the given resourceType
     * @param {?} resourceType - Resource type for which the component class has been stored
     * @return {?}
     */
    get(resourceType) {
        return this.spaMapping.get(resourceType);
    }
    /**
     * Returns the EditConfig structure for the given type
     * @param {?} resourceType - Resource type for which the configuration has been stored
     * @return {?}
     */
    getEditConfig(resourceType) {
        return this.editConfigMap[resourceType];
    }
}
let /** @type {?} */ componentMapping = new ComponentMappingWithConfig(ComponentMapping);
/**
 * @param {?} resourceTypes
 * @return {?}
 */
function MapTo(resourceTypes) {
    return (clazz, editConfig = null) => {
        return componentMapping.map(resourceTypes, clazz, editConfig);
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ Constants$1 = {
    /**
         * Class names associated with a new section component
         *
         */
    NEW_SECTION_CLASS_NAMES: 'new section',
    TYPE_PROP: Constants.TYPE_PROP,
    /**
         * List of child items of an item
         *
         */
    ITEMS_PROP: Constants.ITEMS_PROP,
    /**
         * Order in which the items should be listed
         *
         */
    ITEMS_ORDER_PROP: Constants.ITEMS_ORDER_PROP,
    /**
         * Path of the item
         *
         */
    PATH_PROP: Constants.PATH_PROP,
    /**
         * Children of an item
         *
         */
    CHILDREN_PROP: Constants.CHILDREN_PROP,
    /**
         * Path of the resource in the model
         *
         */
    DATA_PATH_PROP: ':dataPath',
    /**
         * Hierarchical type of the item
         */
    HIERARCHY_TYPE_PROP: Constants.HIERARCHY_TYPE_PROP
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
/**
 * Selector that identifies the node that contains the WCM mode state
 */
const /** @type {?} */ WCM_MODE_META_SELECTOR = 'meta[property="cq:wcmmode"]';
/**
 * The editor is in one of the edition modes
 */
const /** @type {?} */ EDIT_MODE = 'edit';
/**
 * The editor is in preview mode
 */
const /** @type {?} */ PREVIEW_MODE = 'preview';
/**
 * Returns if we are in the browser context or not by checking for the
 * existence of the window object
 * @return {?}
 */
function isBrowser() {
    try {
        return typeof window !== 'undefined';
    }
    catch (/** @type {?} */ e) {
        return false;
    }
}
/**
 * Returns the current WCM mode
 *
 * <p>Note that the value isn't, as of the date of this writing, updated by the editor</p>
 * @return {?}
 */
function getWCMMode() {
    if (isBrowser()) {
        const /** @type {?} */ wcmModeMeta = document.head.querySelector(WCM_MODE_META_SELECTOR);
        return wcmModeMeta && wcmModeMeta.content;
    }
}
/**
 * Helper functions for interacting with the AEM environment
 */
const /** @type {?} */ Utils = {
    /**
     * Is the app used in the context of the AEM Page editor
     * @return {?}
     */
    isInEditor() {
        const /** @type {?} */ wcmMode = getWCMMode();
        return wcmMode && (EDIT_MODE === wcmMode || PREVIEW_MODE === wcmMode);
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ PLACEHOLDER_CLASS_NAME = 'cq-placeholder';
/**
 * The current directive provides advanced capabilities among which are
 *
 * - The management of the component placeholder in the Page Editor
 * - The dynamic instantiation of components based on a component definition
 * - The conversion from model fields to properties and injection in the component instance
 * - The management of HTMLElement attributes and class names on the native element
 */
class AEMComponentDirective {
    /**
     * @param {?} renderer
     * @param {?} viewContainer
     * @param {?} factoryResolver
     * @param {?} ngZone
     */
    constructor(renderer, viewContainer, factoryResolver, ngZone) {
        this.renderer = renderer;
        this.viewContainer = viewContainer;
        this.factoryResolver = factoryResolver;
        this.ngZone = ngZone;
    }
    /**
     * @return {?}
     */
    get cqItem() {
        return this._cqItem;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set cqItem(value) {
        this._cqItem = value;
        this.updateComponentData();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderComponent(componentMapping.get(this.type));
    }
    /**
     * Returns the type of the cqItem if exists.
     * @return {?}
     */
    get type() {
        return this.cqItem && this.cqItem[Constants$1.TYPE_PROP];
    }
    /**
     * Renders a component dynamically based on the component definition
     *
     * @param {?} componentDefinition The component definition to render
     * @return {?}
     */
    renderComponent(componentDefinition) {
        if (componentDefinition) {
            const /** @type {?} */ factory = this.factoryResolver.resolveComponentFactory(componentDefinition);
            this.viewContainer.clear();
            this._component = this.viewContainer.createComponent(factory);
            this.updateComponentData();
        }
    }
    /**
     * Updates the data of the component based the data of the directive
     * @return {?}
     */
    updateComponentData() {
        if (!this._component || !this._component.instance) {
            return;
        }
        let /** @type {?} */ keys = Object.getOwnPropertyNames(this.cqItem);
        keys.forEach((key) => {
            let /** @type {?} */ propKey = key;
            if (propKey.startsWith(":")) {
                // Transformation of internal properties namespaced with [:] to [cq]
                // :myProperty => cqMyProperty
                let /** @type {?} */ tempKey = propKey.substr(1);
                propKey = "cq" + tempKey.substr(0, 1).toUpperCase() + tempKey.substr(1);
            }
            this._component.instance[propKey] = this.cqItem[key];
        });
        this._component.instance.cqPath = this.cqPath;
        this._component.instance.itemName = this.itemName;
        let /** @type {?} */ editConfig = componentMapping.getEditConfig(this.type);
        if (editConfig && Utils.isInEditor) {
            this.setupPlaceholder(editConfig);
        }
    }
    /**
     * Adds the specified item attributes to the element
     * @return {?}
     */
    setupItemAttrs() {
        if (this.itemAttrs) {
            let /** @type {?} */ keys = Object.getOwnPropertyNames(this.itemAttrs);
            keys.forEach((key) => {
                if (key === "class") {
                    let /** @type {?} */ classes = this.itemAttrs[key].split(' ');
                    classes.forEach((itemClass) => {
                        this.renderer.addClass(this._component.location.nativeElement, itemClass);
                    });
                }
                else {
                    this.renderer.setAttribute(this._component.location.nativeElement, key, this.itemAttrs[key]);
                }
            });
        }
    }
    /**
     * Determines if the placeholder should e displayed.
     *
     * @param {?} editConfig - the edit config of the directive
     * @return {?}
     */
    usePlaceholder(editConfig) {
        return editConfig.isEmpty && typeof editConfig.isEmpty === "function" && editConfig.isEmpty(this.cqItem);
    }
    /**
     * Setups the placeholder of needed for the AEM editor
     *
     * @param {?} editConfig - the editConfig, which will dictate the classes to be added on.
     * @return {?}
     */
    setupPlaceholder(editConfig) {
        if (this.usePlaceholder(editConfig)) {
            this.renderer.addClass(this._component.location.nativeElement, PLACEHOLDER_CLASS_NAME);
            this.renderer.setAttribute(this._component.location.nativeElement, "data-emptytext", editConfig.emptyLabel);
        }
        else {
            this.renderer.removeClass(this._component.location.nativeElement, PLACEHOLDER_CLASS_NAME);
            this.renderer.removeAttribute(this._component.location.nativeElement, "data-emptytext");
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setupItemAttrs();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._component && this._component.destroy();
    }
}
AEMComponentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[aemComponent]'
            },] },
];
/** @nocollapse */
AEMComponentDirective.ctorParameters = () => [
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
    { type: NgZone, },
];
AEMComponentDirective.propDecorators = {
    "cqItem": [{ type: Input },],
    "cqPath": [{ type: Input },],
    "itemName": [{ type: Input },],
    "itemAttrs": [{ type: Input },],
    "aemComponent": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ PLACEHOLDER_CLASS_NAMES = Constants$1.NEW_SECTION_CLASS_NAMES;
const /** @type {?} */ PLACEHOLDER_ITEM_NAME = '*';
const /** @type {?} */ CONTAINER_CLASS_NAMES = 'aem-container';
/**
 * The current component provides the base presentational logic common to containers such as a grid or a page.
 * Container have in common the notion of item holders. Items are represented in the model by the fields _:items_ and _:itemsOrder_
 */
class AEMContainerComponent {
    constructor() {
        /**
         * Path to the model associated with the current instance of the component
         */
        this.cqPath = '';
        /**
         * Key of the model structure
         */
        this.modelName = '';
    }
    /**
     * Returns weather of not we are in the editor
     * @return {?}
     */
    get isInEditMode() {
        return Utils.isInEditor();
    }
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    getDataPath(path) {
        return this.cqPath ? this.cqPath + '/' + path : path;
    }
    /**
     * Returns the item data from the cqModel
     *
     * @param {?} itemKey - the itemKey to look for in the items.
     * @return {?}
     */
    getItem(itemKey) {
        return this.cqItems && this.cqItems[itemKey];
    }
    /**
     * Returns the class names of the container based on the data from the cqModel
     * @return {?}
     */
    getHostClassNames() {
        return CONTAINER_CLASS_NAMES;
    }
    /**
     * @return {?}
     */
    get hostClasses() {
        return this.getHostClassNames();
    }
    /**
     * Returns the placeholder classes
     * @return {?}
     */
    getPlaceholderClassNames() {
        return PLACEHOLDER_CLASS_NAMES;
    }
    /**
     * Returns the placeholder path
     * @return {?}
     */
    get placeholderPath() {
        return this.cqPath && this.cqPath + '/' + PLACEHOLDER_ITEM_NAME;
    }
}
AEMContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'aem-container',
                host: {
                    '[class]': 'hostClasses',
                    '[attr.data-cq-data-path]': 'cqPath'
                },
                template: `<ng-container *ngFor="let itemKey of cqItemsOrder">
  <ng-container [aemComponent] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey'></ng-container>
  <div *ngIf="isInEditMode" [attr.data-cq-data-path]="placeholderPath" [class]="getPlaceholderClassNames()"></div>
</ng-container>
`
            },] },
];
/** @nocollapse */
AEMContainerComponent.propDecorators = {
    "cqItems": [{ type: Input },],
    "cqItemsOrder": [{ type: Input },],
    "cqPath": [{ type: Input },],
    "modelName": [{ type: Input },],
    "classNames": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ PLACEHOLDER_CLASS_NAMES$1 = ' aem-Grid-newComponent';
const /** @type {?} */ RESPONSIVE_GRID_TYPE = 'wcm/foundation/components/responsivegrid';
/**
 * The current class carries the base presentational logic of the AEM Layout Container (aka. Responsive grid)
 */
class AEMResponsiveGridComponent extends AEMContainerComponent {
    /**
     * Returns the column class names for a given column
     * @param {?} itemKey - The key of the column item
     * @return {?}
     */
    getColumnClassNames(itemKey) {
        return this.columnClassNames && this.columnClassNames[itemKey];
    }
    /**
     * Returns the placeholder classes
     * @return {?}
     */
    getPlaceholderClassNames() {
        return super.getPlaceholderClassNames() + PLACEHOLDER_CLASS_NAMES$1;
    }
    /**
     * Returns the class names of the responsive grid based on the data from the cqModel
     * @return {?}
     */
    getHostClassNames() {
        let /** @type {?} */ classNames = super.getHostClassNames();
        if (this.classNames) {
            classNames += ' ' + (this.classNames || '');
        }
        return classNames + ' ' + this.gridClassNames;
    }
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    getAttrDataPath(path) {
        let /** @type {?} */ item = this.getItem(path);
        if (item && item[Constants$1.TYPE_PROP] === RESPONSIVE_GRID_TYPE) {
            // We don't want to add the path for the wrapper for a reponsivegrid
            // The reponsivegrid adds the path on it's own
            return null;
        }
        return this.getDataPath(path);
    }
}
AEMResponsiveGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'aem-responsivegrid',
                host: {
                    '[class]': 'hostClasses',
                    '[attr.data-cq-data-path]': 'cqPath'
                },
                template: `<ng-container *ngFor="let itemKey of cqItemsOrder">
  <div [aemModelProvider] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey' [class]="getColumnClassNames(itemKey)" [attr.data-cq-data-path]='getAttrDataPath(itemKey)'>
  </div>
</ng-container>
<div *ngIf="isInEditMode" [attr.data-cq-data-path]="placeholderPath" [class]="getPlaceholderClassNames()"></div>


`,
            },] },
];
/** @nocollapse */
AEMResponsiveGridComponent.propDecorators = {
    "gridClassNames": [{ type: Input },],
    "columnClassNames": [{ type: Input },],
    "classNames": [{ type: Input },],
    "columnCount": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * The current component is responsible for providing access to the ModelManager and the model of a component
 */
class AEMModelProviderComponent {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
    }
    /**
     * Updates the item data
     * @return {?}
     */
    updateItem() {
        ModelManager.getData({ path: this.cqPath }).then(model => {
            this.ngZone.run(() => {
                this.cqItem = model;
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        ModelManager.addListener(this.cqPath, this.updateItem.bind(this));
    }
    /**
     * @return {?}
     */
    ngDestroy() {
        ModelManager.removeListener(this.cqPath, this.updateItem.bind(this));
    }
}
AEMModelProviderComponent.decorators = [
    { type: Component, args: [{
                selector: '[aemModelProvider]',
                template: `<ng-container [aemComponent] [cqItem]='cqItem' [cqPath]='cqPath' [itemName]='itemName'></ng-container>`
            },] },
];
/** @nocollapse */
AEMModelProviderComponent.ctorParameters = () => [
    { type: NgZone, },
];
AEMModelProviderComponent.propDecorators = {
    "cqPath": [{ type: Input },],
    "cqItem": [{ type: Input },],
    "itemName": [{ type: Input },],
    "aemModelProvider": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ PAGE_MODEL_SEPARATOR = '/jcr:content/';
/**
 * The current component carries the base presentational logic of page component
 */
class AEMPageComponent extends AEMContainerComponent {
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    getDataPath(path) {
        return this.cqPath ? this.cqPath + PAGE_MODEL_SEPARATOR + path : path;
    }
}
AEMPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'aem-page',
                host: {
                    '[class]': 'hostClasses',
                    '[attr.data-cq-data-path]': 'cqPath'
                },
                template: `<ng-container *ngFor="let itemKey of cqItemsOrder">
  <ng-container [aemComponent] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey'></ng-container>
  <div *ngIf="isInEditMode" [attr.data-cq-data-path]="placeholderPath" [class]="getPlaceholderClassNames()"></div>
</ng-container>
`
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SpaAngularEditableComponentsModule {
}
SpaAngularEditableComponentsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [AEMContainerComponent, AEMResponsiveGridComponent, AEMComponentDirective, AEMModelProviderComponent, AEMPageComponent],
                exports: [AEMContainerComponent, AEMResponsiveGridComponent, AEMComponentDirective, AEMModelProviderComponent, AEMPageComponent],
                entryComponents: [AEMContainerComponent, AEMResponsiveGridComponent, AEMPageComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AemPageDataResolver {
    constructor() { }
    /**
     * Returns the absolute resource path without extension.
     * \@example
     * // returns: '/content/aa/bb' for route.url [ 'content', 'aa', 'bb.html' ]
     * resolve(route)
     * @param {?} route - route
     * @return {?} absolute resource path without extension
     */
    resolve(route) {
        return '/' + route.url.join('/').replace(/\.[^/.]+$/, '');
    }
}
AemPageDataResolver.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AemPageDataResolver.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Implements RouteReuseStrategy to customize route reuse.
 */
class AemPageRouteReuseStrategy {
    /**
     * Determines if this route (and its subtree) should be detached to be reused later.
     * @param {?} route
     * @return {?}
     */
    shouldDetach(route) {
        return false;
    }
    /**
     * Not storing deteached route.
     * @param {?} route
     * @param {?} detachedTree
     * @return {?}
     */
    store(route, detachedTree) { }
    /**
     * Determines if this route (and its subtree) should be reattached.
     * @param {?} route
     * @return {?}
     */
    shouldAttach(route) {
        return false;
    }
    /**
     * Retrieves the previously stored route.
     * @param {?} route
     * @return {?}
     */
    retrieve(route) {
        return null;
    }
    /**
     * Determines if a route should be reused
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    shouldReuseRoute(future, curr) {
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { AEMComponentDirective, AEMContainerComponent, AEMResponsiveGridComponent, ComponentMappingWithConfig, componentMapping as ComponentMapping, MapTo, Constants$1 as Constants, Utils, SpaAngularEditableComponentsModule, AemPageDataResolver, AemPageRouteReuseStrategy, AEMModelProviderComponent as ɵa, AEMPageComponent as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,