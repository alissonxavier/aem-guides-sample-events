import { Renderer2, NgZone, ViewContainerRef, ComponentFactoryResolver, AfterViewInit } from '@angular/core';
export declare class AEMComponentDirective implements AfterViewInit {
    private renderer;
    private viewContainer;
    private factoryResolver;
    private ngZone;
    /**
     * Dynamically created component
     */
    private _component;
    /**
     * Model item that corresponds to the current component
     */
    private _cqItem;
    cqItem: object;
    /**
     * Path to the model structure associated with the current component
     */
    cqPath: string;
    /**
     * Name of the current instance of the component
     */
    itemName: string;
    /**
     * HtmlElement attributes for the current instance of the component
     */
    itemAttrs: object;
    aemComponent: any;
    constructor(renderer: Renderer2, viewContainer: ViewContainerRef, factoryResolver: ComponentFactoryResolver, ngZone: NgZone);
    ngOnInit(): void;
    /**
     * Returns the type of the cqItem if exists.
     */
    readonly type: any;
    /**
     * Renders a component dynamically based on the component definition
     *
     * @param componentDefinition The component definition to render
     */
    private renderComponent(componentDefinition);
    /**
     * Updates the data of the component based the data of the directive
     */
    private updateComponentData();
    /**
     * Adds the specified item attributes to the element
     */
    private setupItemAttrs();
    /**
     * Determines if the placeholder should e displayed.
     *
     * @param editConfig - the edit config of the directive
     */
    private usePlaceholder(editConfig);
    /**
     * Setups the placeholder of needed for the AEM editor
     *
     * @param editConfig - the editConfig, which will dictate the classes to be added on.
     */
    private setupPlaceholder(editConfig);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
}
