/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
import { Component, Input, NgZone } from '@angular/core';
import { ModelManager } from "@adobe/cq-spa-page-model-manager";
/**
 * The current component is responsible for providing access to the ModelManager and the model of a component
 */
export class AEMModelProviderComponent {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
    }
    /**
     * Updates the item data
     * @return {?}
     */
    updateItem() {
        ModelManager.getData({ path: this.cqPath }).then(model => {
            this.ngZone.run(() => {
                this.cqItem = model;
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        ModelManager.addListener(this.cqPath, this.updateItem.bind(this));
    }
    /**
     * @return {?}
     */
    ngDestroy() {
        ModelManager.removeListener(this.cqPath, this.updateItem.bind(this));
    }
}
AEMModelProviderComponent.decorators = [
    { type: Component, args: [{
                selector: '[aemModelProvider]',
                template: `<ng-container [aemComponent] [cqItem]='cqItem' [cqPath]='cqPath' [itemName]='itemName'></ng-container>`
            },] },
];
/** @nocollapse */
AEMModelProviderComponent.ctorParameters = () => [
    { type: NgZone, },
];
AEMModelProviderComponent.propDecorators = {
    "cqPath": [{ type: Input },],
    "cqItem": [{ type: Input },],
    "itemName": [{ type: Input },],
    "aemModelProvider": [{ type: Input },],
};
function AEMModelProviderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AEMModelProviderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AEMModelProviderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AEMModelProviderComponent.propDecorators;
    /**
     * Path to the model associated with the current instance of the component
     * @type {?}
     */
    AEMModelProviderComponent.prototype.cqPath;
    /**
     * Model item associated with the current model provider component
     * @type {?}
     */
    AEMModelProviderComponent.prototype.cqItem;
    /**
     * Name of the item associated with the current model provider component
     * @type {?}
     */
    AEMModelProviderComponent.prototype.itemName;
    /** @type {?} */
    AEMModelProviderComponent.prototype.aemModelProvider;
    /** @type {?} */
    AEMModelProviderComponent.prototype.ngZone;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWVtLW1vZGVsLXByb3ZpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhZG9iZS9jcS1hbmd1bGFyLWVkaXRhYmxlLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvbGF5b3V0L2FlbS1tb2RlbC1wcm92aWRlci9hZW0tbW9kZWwtcHJvdmlkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFaEU7OztBQU9BLE1BQU07Ozs7SUFnQkosWUFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7S0FDakM7Ozs7O0lBS0QsVUFBVTtRQUNSLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25ELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7YUFDckIsQ0FBQyxDQUFDO1NBQ04sQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFFRCxRQUFRO1FBQ04sWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbkU7Ozs7SUFFRCxTQUFTO1FBQ1AsWUFBWSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDdEU7OztZQTNDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsUUFBUSxFQUFFLHdHQUF3RzthQUNuSDs7OztZQU4wQixNQUFNOzs7dUJBYzlCLEtBQUs7dUJBSUwsS0FBSzt5QkFJTCxLQUFLO2lDQUVMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQURPQkUgQ09ORklERU5USUFMXG4gKlxuICogQ29weXJpZ2h0IDIwMTggQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWRcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiAgQWxsIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBoZXJlaW4gaXMsIGFuZCByZW1haW5zXG4gKiB0aGUgcHJvcGVydHkgb2YgQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQgYW5kIGl0cyBzdXBwbGllcnMsXG4gKiBpZiBhbnkuICBUaGUgaW50ZWxsZWN0dWFsIGFuZCB0ZWNobmljYWwgY29uY2VwdHMgY29udGFpbmVkXG4gKiBoZXJlaW4gYXJlIHByb3ByaWV0YXJ5IHRvIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkIGFuZCBpdHNcbiAqIHN1cHBsaWVycyBhbmQgbWF5IGJlIGNvdmVyZWQgYnkgVS5TLiBhbmQgRm9yZWlnbiBQYXRlbnRzLFxuICogcGF0ZW50cyBpbiBwcm9jZXNzLCBhbmQgYXJlIHByb3RlY3RlZCBieSB0cmFkZSBzZWNyZXQgb3IgY29weXJpZ2h0IGxhdy5cbiAqIERpc3NlbWluYXRpb24gb2YgdGhpcyBpbmZvcm1hdGlvbiBvciByZXByb2R1Y3Rpb24gb2YgdGhpcyBtYXRlcmlhbFxuICogaXMgc3RyaWN0bHkgZm9yYmlkZGVuIHVubGVzcyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gaXMgb2J0YWluZWRcbiAqIGZyb20gQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNb2RlbE1hbmFnZXIgfSBmcm9tIFwiQGFkb2JlL2NxLXNwYS1wYWdlLW1vZGVsLW1hbmFnZXJcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW2FlbU1vZGVsUHJvdmlkZXJdJyxcbiAgdGVtcGxhdGU6IGA8bmctY29udGFpbmVyIFthZW1Db21wb25lbnRdIFtjcUl0ZW1dPSdjcUl0ZW0nIFtjcVBhdGhdPSdjcVBhdGgnIFtpdGVtTmFtZV09J2l0ZW1OYW1lJz48L25nLWNvbnRhaW5lcj5gXG59KVxuLyoqXG4gKiBUaGUgY3VycmVudCBjb21wb25lbnQgaXMgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyBhY2Nlc3MgdG8gdGhlIE1vZGVsTWFuYWdlciBhbmQgdGhlIG1vZGVsIG9mIGEgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBBRU1Nb2RlbFByb3ZpZGVyQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFBhdGggdG8gdGhlIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50XG4gICAqL1xuICBASW5wdXQoKSBjcVBhdGg7XG4gIC8qKlxuICAgKiBNb2RlbCBpdGVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBtb2RlbCBwcm92aWRlciBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIGNxSXRlbTtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGl0ZW0gYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50IG1vZGVsIHByb3ZpZGVyIGNvbXBvbmVudFxuICAgKi9cbiAgQElucHV0KCkgaXRlbU5hbWU7XG5cbiAgQElucHV0KCkgYWVtTW9kZWxQcm92aWRlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lKSB7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgaXRlbSBkYXRhXG4gICAqL1xuICB1cGRhdGVJdGVtKCkge1xuICAgIE1vZGVsTWFuYWdlci5nZXREYXRhKHtwYXRoOiB0aGlzLmNxUGF0aH0pLnRoZW4obW9kZWwgPT4ge1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY3FJdGVtID0gbW9kZWw7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgTW9kZWxNYW5hZ2VyLmFkZExpc3RlbmVyKHRoaXMuY3FQYXRoLCB0aGlzLnVwZGF0ZUl0ZW0uYmluZCh0aGlzKSk7XG4gIH1cblxuICBuZ0Rlc3Ryb3koKSB7XG4gICAgTW9kZWxNYW5hZ2VyLnJlbW92ZUxpc3RlbmVyKHRoaXMuY3FQYXRoLCB0aGlzLnVwZGF0ZUl0ZW0uYmluZCh0aGlzKSk7XG4gIH1cbn1cblxuIl19