/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
import { Component, Input } from '@angular/core';
import { AEMContainerComponent } from '../aem-container/aem-container.component';
import { Constants } from '../constants';
const /** @type {?} */ PLACEHOLDER_CLASS_NAMES = ' aem-Grid-newComponent';
const /** @type {?} */ RESPONSIVE_GRID_TYPE = 'wcm/foundation/components/responsivegrid';
/**
 * The current class carries the base presentational logic of the AEM Layout Container (aka. Responsive grid)
 */
export class AEMResponsiveGridComponent extends AEMContainerComponent {
    /**
     * Returns the column class names for a given column
     * @param {?} itemKey - The key of the column item
     * @return {?}
     */
    getColumnClassNames(itemKey) {
        return this.columnClassNames && this.columnClassNames[itemKey];
    }
    /**
     * Returns the placeholder classes
     * @return {?}
     */
    getPlaceholderClassNames() {
        return super.getPlaceholderClassNames() + PLACEHOLDER_CLASS_NAMES;
    }
    /**
     * Returns the class names of the responsive grid based on the data from the cqModel
     * @return {?}
     */
    getHostClassNames() {
        let /** @type {?} */ classNames = super.getHostClassNames();
        if (this.classNames) {
            classNames += ' ' + (this.classNames || '');
        }
        return classNames + ' ' + this.gridClassNames;
    }
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    getAttrDataPath(path) {
        let /** @type {?} */ item = this.getItem(path);
        if (item && item[Constants.TYPE_PROP] === RESPONSIVE_GRID_TYPE) {
            // We don't want to add the path for the wrapper for a reponsivegrid
            // The reponsivegrid adds the path on it's own
            return null;
        }
        return this.getDataPath(path);
    }
}
AEMResponsiveGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'aem-responsivegrid',
                host: {
                    '[class]': 'hostClasses',
                    '[attr.data-cq-data-path]': 'cqPath'
                },
                template: `<ng-container *ngFor="let itemKey of cqItemsOrder">
  <div [aemModelProvider] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey' [class]="getColumnClassNames(itemKey)" [attr.data-cq-data-path]='getAttrDataPath(itemKey)'>
  </div>
</ng-container>
<div *ngIf="isInEditMode" [attr.data-cq-data-path]="placeholderPath" [class]="getPlaceholderClassNames()"></div>


`,
            },] },
];
/** @nocollapse */
AEMResponsiveGridComponent.propDecorators = {
    "gridClassNames": [{ type: Input },],
    "columnClassNames": [{ type: Input },],
    "classNames": [{ type: Input },],
    "columnCount": [{ type: Input },],
};
function AEMResponsiveGridComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AEMResponsiveGridComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AEMResponsiveGridComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AEMResponsiveGridComponent.propDecorators;
    /**
     * Class names associated with the current responsive grid
     * @type {?}
     */
    AEMResponsiveGridComponent.prototype.gridClassNames;
    /**
     * Map of class names corresponding to each child of the current responsive grid
     * @type {?}
     */
    AEMResponsiveGridComponent.prototype.columnClassNames;
    /**
     * Class names of the current component
     * @type {?}
     */
    AEMResponsiveGridComponent.prototype.classNames;
    /**
     * Current number of columns of the grid
     * @type {?}
     */
    AEMResponsiveGridComponent.prototype.columnCount;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWVtLXJlc3BvbnNpdmVncmlkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhZG9iZS9jcS1hbmd1bGFyLWVkaXRhYmxlLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvbGF5b3V0L2FlbS1yZXNwb25zaXZlZ3JpZC9hZW0tcmVzcG9uc2l2ZWdyaWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekMsdUJBQU0sdUJBQXVCLEdBQUcsd0JBQXdCLENBQUM7QUFDekQsdUJBQU0sb0JBQW9CLEdBQUcsMENBQTBDLENBQUM7QUFFeEU7OztBQWtCQSxNQUFNLGlDQUFrQyxTQUFRLHFCQUFxQjs7Ozs7O0lBc0JuRSxtQkFBbUIsQ0FBQyxPQUFjO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2hFOzs7OztJQUtELHdCQUF3QjtRQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsdUJBQXVCLENBQUM7S0FDbkU7Ozs7O0lBS0QsaUJBQWlCO1FBQ2YscUJBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRTNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLFVBQVUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFFO1NBQ2hEO1FBRUQsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztLQUMvQzs7Ozs7OztJQU9ELGVBQWUsQ0FBQyxJQUFJO1FBQ2xCLHFCQUFJLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLG9CQUFvQixDQUFDLENBQUMsQ0FBQzs7O1lBRy9ELE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQy9COzs7WUE5RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLElBQUksRUFBRTtvQkFDRixTQUFTLEVBQUUsYUFBYTtvQkFDeEIsMEJBQTBCLEVBQUMsUUFBUTtpQkFDdEM7Z0JBQ0QsUUFBUSxFQUFFOzs7Ozs7O0NBT1g7YUFDQTs7OzsrQkFRRSxLQUFLO2lDQUlMLEtBQUs7MkJBSUwsS0FBSzs0QkFJTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEFET0JFIENPTkZJREVOVElBTFxuICpcbiAqIENvcHlyaWdodCAyMDE4IEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogIEFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgaGVyZWluIGlzLCBhbmQgcmVtYWluc1xuICogdGhlIHByb3BlcnR5IG9mIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkIGFuZCBpdHMgc3VwcGxpZXJzLFxuICogaWYgYW55LiAgVGhlIGludGVsbGVjdHVhbCBhbmQgdGVjaG5pY2FsIGNvbmNlcHRzIGNvbnRhaW5lZFxuICogaGVyZWluIGFyZSBwcm9wcmlldGFyeSB0byBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZCBhbmQgaXRzXG4gKiBzdXBwbGllcnMgYW5kIG1heSBiZSBjb3ZlcmVkIGJ5IFUuUy4gYW5kIEZvcmVpZ24gUGF0ZW50cyxcbiAqIHBhdGVudHMgaW4gcHJvY2VzcywgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgdHJhZGUgc2VjcmV0IG9yIGNvcHlyaWdodCBsYXcuXG4gKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcbiAqIGlzIHN0cmljdGx5IGZvcmJpZGRlbiB1bmxlc3MgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uIGlzIG9idGFpbmVkXG4gKiBmcm9tIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFFTUNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4uL2FlbS1jb250YWluZXIvYWVtLWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuY29uc3QgUExBQ0VIT0xERVJfQ0xBU1NfTkFNRVMgPSAnIGFlbS1HcmlkLW5ld0NvbXBvbmVudCc7XG5jb25zdCBSRVNQT05TSVZFX0dSSURfVFlQRSA9ICd3Y20vZm91bmRhdGlvbi9jb21wb25lbnRzL3Jlc3BvbnNpdmVncmlkJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWVtLXJlc3BvbnNpdmVncmlkJyxcbiAgaG9zdDoge1xuICAgICAgJ1tjbGFzc10nOiAnaG9zdENsYXNzZXMnLFxuICAgICAgJ1thdHRyLmRhdGEtY3EtZGF0YS1wYXRoXSc6J2NxUGF0aCdcbiAgfSxcbiAgdGVtcGxhdGU6IGA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBpdGVtS2V5IG9mIGNxSXRlbXNPcmRlclwiPlxuICA8ZGl2IFthZW1Nb2RlbFByb3ZpZGVyXSBbY3FJdGVtXT0nZ2V0SXRlbShpdGVtS2V5KScgW2NxUGF0aF09J2dldERhdGFQYXRoKGl0ZW1LZXkpJyBbaXRlbU5hbWVdPSdpdGVtS2V5JyBbY2xhc3NdPVwiZ2V0Q29sdW1uQ2xhc3NOYW1lcyhpdGVtS2V5KVwiIFthdHRyLmRhdGEtY3EtZGF0YS1wYXRoXT0nZ2V0QXR0ckRhdGFQYXRoKGl0ZW1LZXkpJz5cbiAgPC9kaXY+XG48L25nLWNvbnRhaW5lcj5cbjxkaXYgKm5nSWY9XCJpc0luRWRpdE1vZGVcIiBbYXR0ci5kYXRhLWNxLWRhdGEtcGF0aF09XCJwbGFjZWhvbGRlclBhdGhcIiBbY2xhc3NdPVwiZ2V0UGxhY2Vob2xkZXJDbGFzc05hbWVzKClcIj48L2Rpdj5cblxuXG5gLFxufSlcbi8qKlxuICogVGhlIGN1cnJlbnQgY2xhc3MgY2FycmllcyB0aGUgYmFzZSBwcmVzZW50YXRpb25hbCBsb2dpYyBvZiB0aGUgQUVNIExheW91dCBDb250YWluZXIgKGFrYS4gUmVzcG9uc2l2ZSBncmlkKVxuICovXG5leHBvcnQgY2xhc3MgQUVNUmVzcG9uc2l2ZUdyaWRDb21wb25lbnQgZXh0ZW5kcyBBRU1Db250YWluZXJDb21wb25lbnQge1xuICAvKipcbiAgICogQ2xhc3MgbmFtZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50IHJlc3BvbnNpdmUgZ3JpZFxuICAgKi9cbiAgQElucHV0KCkgZ3JpZENsYXNzTmFtZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIE1hcCBvZiBjbGFzcyBuYW1lcyBjb3JyZXNwb25kaW5nIHRvIGVhY2ggY2hpbGQgb2YgdGhlIGN1cnJlbnQgcmVzcG9uc2l2ZSBncmlkXG4gICAqL1xuICBASW5wdXQoKSBjb2x1bW5DbGFzc05hbWVzOiBPYmplY3Q7XG4gIC8qKlxuICAgKiBDbGFzcyBuYW1lcyBvZiB0aGUgY3VycmVudCBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIGNsYXNzTmFtZXM6IHN0cmluZztcbiAgLyoqXG4gICAqIEN1cnJlbnQgbnVtYmVyIG9mIGNvbHVtbnMgb2YgdGhlIGdyaWRcbiAgICovXG4gIEBJbnB1dCgpIGNvbHVtbkNvdW50OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbHVtbiBjbGFzcyBuYW1lcyBmb3IgYSBnaXZlbiBjb2x1bW5cbiAgICogQHBhcmFtIGl0ZW1LZXkgLSBUaGUga2V5IG9mIHRoZSBjb2x1bW4gaXRlbVxuICAgKi9cbiAgZ2V0Q29sdW1uQ2xhc3NOYW1lcyhpdGVtS2V5OnN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbkNsYXNzTmFtZXMgJiYgdGhpcy5jb2x1bW5DbGFzc05hbWVzW2l0ZW1LZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNsYXNzZXNcbiAgICovXG4gIGdldFBsYWNlaG9sZGVyQ2xhc3NOYW1lcygpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0UGxhY2Vob2xkZXJDbGFzc05hbWVzKCkgKyBQTEFDRUhPTERFUl9DTEFTU19OQU1FUztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjbGFzcyBuYW1lcyBvZiB0aGUgcmVzcG9uc2l2ZSBncmlkIGJhc2VkIG9uIHRoZSBkYXRhIGZyb20gdGhlIGNxTW9kZWxcbiAgICovXG4gIGdldEhvc3RDbGFzc05hbWVzKCkge1xuICAgIGxldCBjbGFzc05hbWVzID0gc3VwZXIuZ2V0SG9zdENsYXNzTmFtZXMoKTtcblxuICAgIGlmICh0aGlzLmNsYXNzTmFtZXMpIHtcbiAgICAgICAgY2xhc3NOYW1lcyArPSAnICcgKyAodGhpcy5jbGFzc05hbWVzIHx8ICcnKSA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzTmFtZXMgKyAnICcgKyB0aGlzLmdyaWRDbGFzc05hbWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFnZ3JlZ2F0ZWQgcGF0aCBvZiB0aGlzIGNvbnRhaW5lciBwYXRoIGFuZCB0aGUgcHJvdmlkZWQgcGF0aFxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCAtIHRoZSBwcm92aWRlZCBwYXRoIHRvIGFnZ3JlZ2F0ZSB3aXRoIHRoZSBjb250YWluZXIgcGF0aFxuICAgKi9cbiAgZ2V0QXR0ckRhdGFQYXRoKHBhdGgpIHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuZ2V0SXRlbShwYXRoKTtcbiAgICBpZiAoaXRlbSAmJiBpdGVtW0NvbnN0YW50cy5UWVBFX1BST1BdID09PSBSRVNQT05TSVZFX0dSSURfVFlQRSkge1xuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBhZGQgdGhlIHBhdGggZm9yIHRoZSB3cmFwcGVyIGZvciBhIHJlcG9uc2l2ZWdyaWRcbiAgICAgIC8vIFRoZSByZXBvbnNpdmVncmlkIGFkZHMgdGhlIHBhdGggb24gaXQncyBvd25cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldERhdGFQYXRoKHBhdGgpO1xuICB9XG59XG4iXX0=