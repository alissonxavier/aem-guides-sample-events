/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
import { Directive, Input, Renderer2, NgZone, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { ComponentMapping } from './component-mapping';
import { Constants } from './constants';
import { Utils } from './utils';
const /** @type {?} */ PLACEHOLDER_CLASS_NAME = 'cq-placeholder';
/**
 * The current directive provides advanced capabilities among which are
 *
 * - The management of the component placeholder in the Page Editor
 * - The dynamic instantiation of components based on a component definition
 * - The conversion from model fields to properties and injection in the component instance
 * - The management of HTMLElement attributes and class names on the native element
 */
export class AEMComponentDirective {
    /**
     * @param {?} renderer
     * @param {?} viewContainer
     * @param {?} factoryResolver
     * @param {?} ngZone
     */
    constructor(renderer, viewContainer, factoryResolver, ngZone) {
        this.renderer = renderer;
        this.viewContainer = viewContainer;
        this.factoryResolver = factoryResolver;
        this.ngZone = ngZone;
    }
    /**
     * @return {?}
     */
    get cqItem() {
        return this._cqItem;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set cqItem(value) {
        this._cqItem = value;
        this.updateComponentData();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderComponent(ComponentMapping.get(this.type));
    }
    /**
     * Returns the type of the cqItem if exists.
     * @return {?}
     */
    get type() {
        return this.cqItem && this.cqItem[Constants.TYPE_PROP];
    }
    /**
     * Renders a component dynamically based on the component definition
     *
     * @param {?} componentDefinition The component definition to render
     * @return {?}
     */
    renderComponent(componentDefinition) {
        if (componentDefinition) {
            const /** @type {?} */ factory = this.factoryResolver.resolveComponentFactory(componentDefinition);
            this.viewContainer.clear();
            this._component = this.viewContainer.createComponent(factory);
            this.updateComponentData();
        }
    }
    /**
     * Updates the data of the component based the data of the directive
     * @return {?}
     */
    updateComponentData() {
        if (!this._component || !this._component.instance) {
            return;
        }
        let /** @type {?} */ keys = Object.getOwnPropertyNames(this.cqItem);
        keys.forEach((key) => {
            let /** @type {?} */ propKey = key;
            if (propKey.startsWith(":")) {
                // Transformation of internal properties namespaced with [:] to [cq]
                // :myProperty => cqMyProperty
                let /** @type {?} */ tempKey = propKey.substr(1);
                propKey = "cq" + tempKey.substr(0, 1).toUpperCase() + tempKey.substr(1);
            }
            this._component.instance[propKey] = this.cqItem[key];
        });
        this._component.instance.cqPath = this.cqPath;
        this._component.instance.itemName = this.itemName;
        let /** @type {?} */ editConfig = ComponentMapping.getEditConfig(this.type);
        if (editConfig && Utils.isInEditor) {
            this.setupPlaceholder(editConfig);
        }
    }
    /**
     * Adds the specified item attributes to the element
     * @return {?}
     */
    setupItemAttrs() {
        if (this.itemAttrs) {
            let /** @type {?} */ keys = Object.getOwnPropertyNames(this.itemAttrs);
            keys.forEach((key) => {
                if (key === "class") {
                    let /** @type {?} */ classes = this.itemAttrs[key].split(' ');
                    classes.forEach((itemClass) => {
                        this.renderer.addClass(this._component.location.nativeElement, itemClass);
                    });
                }
                else {
                    this.renderer.setAttribute(this._component.location.nativeElement, key, this.itemAttrs[key]);
                }
            });
        }
    }
    /**
     * Determines if the placeholder should e displayed.
     *
     * @param {?} editConfig - the edit config of the directive
     * @return {?}
     */
    usePlaceholder(editConfig) {
        return editConfig.isEmpty && typeof editConfig.isEmpty === "function" && editConfig.isEmpty(this.cqItem);
    }
    /**
     * Setups the placeholder of needed for the AEM editor
     *
     * @param {?} editConfig - the editConfig, which will dictate the classes to be added on.
     * @return {?}
     */
    setupPlaceholder(editConfig) {
        if (this.usePlaceholder(editConfig)) {
            this.renderer.addClass(this._component.location.nativeElement, PLACEHOLDER_CLASS_NAME);
            this.renderer.setAttribute(this._component.location.nativeElement, "data-emptytext", editConfig.emptyLabel);
        }
        else {
            this.renderer.removeClass(this._component.location.nativeElement, PLACEHOLDER_CLASS_NAME);
            this.renderer.removeAttribute(this._component.location.nativeElement, "data-emptytext");
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setupItemAttrs();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._component && this._component.destroy();
    }
}
AEMComponentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[aemComponent]'
            },] },
];
/** @nocollapse */
AEMComponentDirective.ctorParameters = () => [
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
    { type: NgZone, },
];
AEMComponentDirective.propDecorators = {
    "cqItem": [{ type: Input },],
    "cqPath": [{ type: Input },],
    "itemName": [{ type: Input },],
    "itemAttrs": [{ type: Input },],
    "aemComponent": [{ type: Input },],
};
function AEMComponentDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AEMComponentDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AEMComponentDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AEMComponentDirective.propDecorators;
    /**
     * Dynamically created component
     * @type {?}
     */
    AEMComponentDirective.prototype._component;
    /**
     * Model item that corresponds to the current component
     * @type {?}
     */
    AEMComponentDirective.prototype._cqItem;
    /**
     * Path to the model structure associated with the current component
     * @type {?}
     */
    AEMComponentDirective.prototype.cqPath;
    /**
     * Name of the current instance of the component
     * @type {?}
     */
    AEMComponentDirective.prototype.itemName;
    /**
     * HtmlElement attributes for the current instance of the component
     * @type {?}
     */
    AEMComponentDirective.prototype.itemAttrs;
    /** @type {?} */
    AEMComponentDirective.prototype.aemComponent;
    /** @type {?} */
    AEMComponentDirective.prototype.renderer;
    /** @type {?} */
    AEMComponentDirective.prototype.viewContainer;
    /** @type {?} */
    AEMComponentDirective.prototype.factoryResolver;
    /** @type {?} */
    AEMComponentDirective.prototype.ngZone;
}

//# sourceMappingURL=data:application/json;base64,