/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
import { Component, Input } from '@angular/core';
import { Constants } from '../constants';
import { Utils } from "../utils";
const /** @type {?} */ PLACEHOLDER_CLASS_NAMES = Constants.NEW_SECTION_CLASS_NAMES;
const /** @type {?} */ PLACEHOLDER_ITEM_NAME = '*';
const /** @type {?} */ CONTAINER_CLASS_NAMES = 'aem-container';
/**
 * The current component provides the base presentational logic common to containers such as a grid or a page.
 * Container have in common the notion of item holders. Items are represented in the model by the fields _:items_ and _:itemsOrder_
 */
export class AEMContainerComponent {
    constructor() {
        /**
         * Path to the model associated with the current instance of the component
         */
        this.cqPath = '';
        /**
         * Key of the model structure
         */
        this.modelName = '';
    }
    /**
     * Returns weather of not we are in the editor
     * @return {?}
     */
    get isInEditMode() {
        return Utils.isInEditor();
    }
    /**
     * Returns the aggregated path of this container path and the provided path
     *
     * @param {?} path - the provided path to aggregate with the container path
     * @return {?}
     */
    getDataPath(path) {
        return this.cqPath ? this.cqPath + '/' + path : path;
    }
    /**
     * Returns the item data from the cqModel
     *
     * @param {?} itemKey - the itemKey to look for in the items.
     * @return {?}
     */
    getItem(itemKey) {
        return this.cqItems && this.cqItems[itemKey];
    }
    /**
     * Returns the class names of the container based on the data from the cqModel
     * @return {?}
     */
    getHostClassNames() {
        return CONTAINER_CLASS_NAMES;
    }
    /**
     * @return {?}
     */
    get hostClasses() {
        return this.getHostClassNames();
    }
    /**
     * Returns the placeholder classes
     * @return {?}
     */
    getPlaceholderClassNames() {
        return PLACEHOLDER_CLASS_NAMES;
    }
    /**
     * Returns the placeholder path
     * @return {?}
     */
    get placeholderPath() {
        return this.cqPath && this.cqPath + '/' + PLACEHOLDER_ITEM_NAME;
    }
}
AEMContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'aem-container',
                host: {
                    '[class]': 'hostClasses',
                    '[attr.data-cq-data-path]': 'cqPath'
                },
                template: `<ng-container *ngFor="let itemKey of cqItemsOrder">
  <ng-container [aemComponent] [cqItem]='getItem(itemKey)' [cqPath]='getDataPath(itemKey)' [itemName]='itemKey'></ng-container>
  <div *ngIf="isInEditMode" [attr.data-cq-data-path]="placeholderPath" [class]="getPlaceholderClassNames()"></div>
</ng-container>
`
            },] },
];
/** @nocollapse */
AEMContainerComponent.propDecorators = {
    "cqItems": [{ type: Input },],
    "cqItemsOrder": [{ type: Input },],
    "cqPath": [{ type: Input },],
    "modelName": [{ type: Input },],
    "classNames": [{ type: Input },],
};
function AEMContainerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AEMContainerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AEMContainerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AEMContainerComponent.propDecorators;
    /**
     * Map of model items included in the current container
     * @type {?}
     */
    AEMContainerComponent.prototype.cqItems;
    /**
     * Array of model item keys
     * @type {?}
     */
    AEMContainerComponent.prototype.cqItemsOrder;
    /**
     * Path to the model associated with the current instance of the component
     * @type {?}
     */
    AEMContainerComponent.prototype.cqPath;
    /**
     * Key of the model structure
     * @type {?}
     */
    AEMContainerComponent.prototype.modelName;
    /**
     * Class names of the current component
     * @type {?}
     */
    AEMContainerComponent.prototype.classNames;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWVtLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWRvYmUvY3EtYW5ndWxhci1lZGl0YWJsZS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2xheW91dC9hZW0tY29udGFpbmVyL2FlbS1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDeEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVqQyx1QkFBTSx1QkFBdUIsR0FBRyxTQUFTLENBQUMsdUJBQXVCLENBQUM7QUFDbEUsdUJBQU0scUJBQXFCLEdBQUcsR0FBRyxDQUFDO0FBQ2xDLHVCQUFNLHFCQUFxQixHQUFHLGVBQWUsQ0FBQztBQUU5Qzs7OztBQWdCQSxNQUFNOzs7OztzQkFZcUIsRUFBRTs7Ozt5QkFJQyxFQUFFOzs7Ozs7SUFTOUIsSUFBSSxZQUFZO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUMzQjs7Ozs7OztJQU9ELFdBQVcsQ0FBQyxJQUFJO1FBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ3REOzs7Ozs7O0lBT0QsT0FBTyxDQUFDLE9BQU87UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzlDOzs7OztJQUtELGlCQUFpQjtRQUNmLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztLQUM5Qjs7OztJQUVELElBQUksV0FBVztRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztLQUNqQzs7Ozs7SUFLRCx3QkFBd0I7UUFDdEIsTUFBTSxDQUFDLHVCQUF1QixDQUFDO0tBQ2hDOzs7OztJQUtELElBQUksZUFBZTtRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQztLQUNqRTs7O1lBdEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsSUFBSSxFQUFFO29CQUNGLFNBQVMsRUFBRSxhQUFhO29CQUN4QiwwQkFBMEIsRUFBQyxRQUFRO2lCQUN0QztnQkFDRCxRQUFRLEVBQUU7Ozs7Q0FJWDthQUNBOzs7O3dCQVNFLEtBQUs7NkJBSUwsS0FBSzt1QkFJTCxLQUFLOzBCQUlMLEtBQUs7MkJBSUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBBRE9CRSBDT05GSURFTlRJQUxcbiAqXG4gKiBDb3B5cmlnaHQgMjAxOCBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZFxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBOT1RJQ0U6ICBBbGwgaW5mb3JtYXRpb24gY29udGFpbmVkIGhlcmVpbiBpcywgYW5kIHJlbWFpbnNcbiAqIHRoZSBwcm9wZXJ0eSBvZiBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZCBhbmQgaXRzIHN1cHBsaWVycyxcbiAqIGlmIGFueS4gIFRoZSBpbnRlbGxlY3R1YWwgYW5kIHRlY2huaWNhbCBjb25jZXB0cyBjb250YWluZWRcbiAqIGhlcmVpbiBhcmUgcHJvcHJpZXRhcnkgdG8gQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQgYW5kIGl0c1xuICogc3VwcGxpZXJzIGFuZCBtYXkgYmUgY292ZXJlZCBieSBVLlMuIGFuZCBGb3JlaWduIFBhdGVudHMsXG4gKiBwYXRlbnRzIGluIHByb2Nlc3MsIGFuZCBhcmUgcHJvdGVjdGVkIGJ5IHRyYWRlIHNlY3JldCBvciBjb3B5cmlnaHQgbGF3LlxuICogRGlzc2VtaW5hdGlvbiBvZiB0aGlzIGluZm9ybWF0aW9uIG9yIHJlcHJvZHVjdGlvbiBvZiB0aGlzIG1hdGVyaWFsXG4gKiBpcyBzdHJpY3RseSBmb3JiaWRkZW4gdW5sZXNzIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBpcyBvYnRhaW5lZFxuICogZnJvbSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZC5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMnXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5jb25zdCBQTEFDRUhPTERFUl9DTEFTU19OQU1FUyA9IENvbnN0YW50cy5ORVdfU0VDVElPTl9DTEFTU19OQU1FUztcbmNvbnN0IFBMQUNFSE9MREVSX0lURU1fTkFNRSA9ICcqJztcbmNvbnN0IENPTlRBSU5FUl9DTEFTU19OQU1FUyA9ICdhZW0tY29udGFpbmVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWVtLWNvbnRhaW5lcicsXG4gIGhvc3Q6IHtcbiAgICAgICdbY2xhc3NdJzogJ2hvc3RDbGFzc2VzJyxcbiAgICAgICdbYXR0ci5kYXRhLWNxLWRhdGEtcGF0aF0nOidjcVBhdGgnXG4gIH0sXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbUtleSBvZiBjcUl0ZW1zT3JkZXJcIj5cbiAgPG5nLWNvbnRhaW5lciBbYWVtQ29tcG9uZW50XSBbY3FJdGVtXT0nZ2V0SXRlbShpdGVtS2V5KScgW2NxUGF0aF09J2dldERhdGFQYXRoKGl0ZW1LZXkpJyBbaXRlbU5hbWVdPSdpdGVtS2V5Jz48L25nLWNvbnRhaW5lcj5cbiAgPGRpdiAqbmdJZj1cImlzSW5FZGl0TW9kZVwiIFthdHRyLmRhdGEtY3EtZGF0YS1wYXRoXT1cInBsYWNlaG9sZGVyUGF0aFwiIFtjbGFzc109XCJnZXRQbGFjZWhvbGRlckNsYXNzTmFtZXMoKVwiPjwvZGl2PlxuPC9uZy1jb250YWluZXI+XG5gXG59KVxuLyoqXG4gKiBUaGUgY3VycmVudCBjb21wb25lbnQgcHJvdmlkZXMgdGhlIGJhc2UgcHJlc2VudGF0aW9uYWwgbG9naWMgY29tbW9uIHRvIGNvbnRhaW5lcnMgc3VjaCBhcyBhIGdyaWQgb3IgYSBwYWdlLlxuICogQ29udGFpbmVyIGhhdmUgaW4gY29tbW9uIHRoZSBub3Rpb24gb2YgaXRlbSBob2xkZXJzLiBJdGVtcyBhcmUgcmVwcmVzZW50ZWQgaW4gdGhlIG1vZGVsIGJ5IHRoZSBmaWVsZHMgXzppdGVtc18gYW5kIF86aXRlbXNPcmRlcl9cbiAqL1xuZXhwb3J0IGNsYXNzIEFFTUNvbnRhaW5lckNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBNYXAgb2YgbW9kZWwgaXRlbXMgaW5jbHVkZWQgaW4gdGhlIGN1cnJlbnQgY29udGFpbmVyXG4gICAqL1xuICBASW5wdXQoKSBjcUl0ZW1zO1xuICAvKipcbiAgICogQXJyYXkgb2YgbW9kZWwgaXRlbSBrZXlzXG4gICAqL1xuICBASW5wdXQoKSBjcUl0ZW1zT3JkZXI7XG4gIC8qKlxuICAgKiBQYXRoIHRvIHRoZSBtb2RlbCBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgQElucHV0KCkgY3FQYXRoOnN0cmluZyA9ICcnO1xuICAvKipcbiAgICogS2V5IG9mIHRoZSBtb2RlbCBzdHJ1Y3R1cmVcbiAgICovXG4gIEBJbnB1dCgpIG1vZGVsTmFtZTpzdHJpbmcgPSAnJztcbiAgLyoqXG4gICAqIENsYXNzIG5hbWVzIG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudFxuICAgKi9cbiAgQElucHV0KCkgY2xhc3NOYW1lczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdlYXRoZXIgb2Ygbm90IHdlIGFyZSBpbiB0aGUgZWRpdG9yXG4gICAqL1xuICBnZXQgaXNJbkVkaXRNb2RlKCkge1xuICAgIHJldHVybiBVdGlscy5pc0luRWRpdG9yKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWdncmVnYXRlZCBwYXRoIG9mIHRoaXMgY29udGFpbmVyIHBhdGggYW5kIHRoZSBwcm92aWRlZCBwYXRoXG4gICAqXG4gICAqIEBwYXJhbSBwYXRoIC0gdGhlIHByb3ZpZGVkIHBhdGggdG8gYWdncmVnYXRlIHdpdGggdGhlIGNvbnRhaW5lciBwYXRoXG4gICAqL1xuICBnZXREYXRhUGF0aChwYXRoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3FQYXRoID8gdGhpcy5jcVBhdGggKyAnLycgKyBwYXRoIDogcGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVtIGRhdGEgZnJvbSB0aGUgY3FNb2RlbFxuICAgKlxuICAgKiBAcGFyYW0gaXRlbUtleSAtIHRoZSBpdGVtS2V5IHRvIGxvb2sgZm9yIGluIHRoZSBpdGVtcy5cbiAgICovXG4gIGdldEl0ZW0oaXRlbUtleSkge1xuICAgIHJldHVybiB0aGlzLmNxSXRlbXMgJiYgdGhpcy5jcUl0ZW1zW2l0ZW1LZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNsYXNzIG5hbWVzIG9mIHRoZSBjb250YWluZXIgYmFzZWQgb24gdGhlIGRhdGEgZnJvbSB0aGUgY3FNb2RlbFxuICAgKi9cbiAgZ2V0SG9zdENsYXNzTmFtZXMoKSB7XG4gICAgcmV0dXJuIENPTlRBSU5FUl9DTEFTU19OQU1FUztcbiAgfVxuXG4gIGdldCBob3N0Q2xhc3NlcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SG9zdENsYXNzTmFtZXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjbGFzc2VzXG4gICAqL1xuICBnZXRQbGFjZWhvbGRlckNsYXNzTmFtZXMoKSB7XG4gICAgcmV0dXJuIFBMQUNFSE9MREVSX0NMQVNTX05BTUVTO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHBhdGhcbiAgICovXG4gIGdldCBwbGFjZWhvbGRlclBhdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3FQYXRoICYmIHRoaXMuY3FQYXRoICsgJy8nICsgUExBQ0VIT0xERVJfSVRFTV9OQU1FO1xuICB9XG59XG5cbiJdfQ==